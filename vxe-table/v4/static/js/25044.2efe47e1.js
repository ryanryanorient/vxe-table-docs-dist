"use strict";(self["webpackChunkvxe_table_v4"]=self["webpackChunkvxe_table_v4"]||[]).push([[25044],{25044:function(t,r,n){n.r(r),n.d(r,{default:function(){return p}});var o=n(66252),a=n(3577),e={class:"tip"},i=(0,o._)("br",null,null,-1),l=(0,o._)("br",null,null,-1),u=(0,o._)("br",null,null,-1),_=(0,o._)("span",{class:"green"},"（性能优化：横向虚拟滚动由列宽决定性能，每一列的列宽越大就越流畅；纵向虚拟滚动由行高决定性能，每一行的高度越高就越流畅）",-1),c={class:"demo-code"};function w(t,r,n,w,s,d){var f=(0,o.up)("table-api-link"),m=(0,o.up)("table-column-api-link"),k=(0,o.up)("vxe-button"),b=(0,o.up)("vxe-grid"),v=(0,o.up)("pre-code");return(0,o.wg)(),(0,o.iD)("div",null,[(0,o._)("p",e,[(0,o.Uk)(" 虚拟滚动渲染，左右固定列"),i,(0,o.Uk)(" 大数据不建议使用双向绑定的 "),(0,o.Wm)(f,{name:"data"}),(0,o.Uk)(" 属性，建议使用 "),(0,o.Wm)(f,{prop:"loadData"}),(0,o.Uk)("/"),(0,o.Wm)(f,{prop:"loadColumn"}),(0,o.Uk)(" 函数"),l,(0,o.Uk)(" 对于多选 type="),(0,o.Wm)(m,{prop:"checkbox"}),(0,o.Uk)(" 当数据量海量时应该绑定 "),(0,o.Wm)(f,{prop:"checkField"}),(0,o.Uk)(" 属性渲染速度更快"),u,_]),(0,o.Wm)(b,(0,o.dG)({ref:"xGrid"},t.gridOptions),{toolbar_buttons:(0,o.w5)((function(){return[(0,o.Wm)(k,{onClick:r[0]||(r[0]=function(r){return t.loadColumnAndData(50,20)})},{default:(0,o.w5)((function(){return[(0,o.Uk)("50列20条")]})),_:1}),(0,o.Wm)(k,{onClick:r[1]||(r[1]=function(r){return t.loadColumnAndData(100,50)})},{default:(0,o.w5)((function(){return[(0,o.Uk)("100列50条")]})),_:1}),(0,o.Wm)(k,{onClick:r[2]||(r[2]=function(r){return t.loadColumnAndData(200,100)})},{default:(0,o.w5)((function(){return[(0,o.Uk)("200列100条")]})),_:1}),(0,o.Wm)(k,{onClick:r[3]||(r[3]=function(r){return t.loadColumnAndData(1e3,5e3)})},{default:(0,o.w5)((function(){return[(0,o.Uk)("1k列5k条")]})),_:1}),(0,o.Wm)(k,{onClick:r[4]||(r[4]=function(r){return t.loadColumnAndData(5e3,1e4)})},{default:(0,o.w5)((function(){return[(0,o.Uk)("5k列1w条")]})),_:1}),(0,o.Wm)(k,{onClick:r[5]||(r[5]=function(r){return t.loadColumnAndData(1e4,1e5)})},{default:(0,o.w5)((function(){return[(0,o.Uk)("1w列10w条")]})),_:1}),(0,o.Wm)(k,{onClick:r[6]||(r[6]=function(r){return t.loadColumnAndData(5e4,2e5)})},{default:(0,o.w5)((function(){return[(0,o.Uk)("5w列20w条")]})),_:1}),(0,o.Wm)(k,{onClick:r[7]||(r[7]=function(r){return t.loadColumnAndData(1e5,5e4)})},{default:(0,o.w5)((function(){return[(0,o.Uk)("10w列5w条")]})),_:1}),(0,o.Wm)(k,{onClick:r[8]||(r[8]=function(r){return t.$refs.xGrid.setAllCheckboxRow(!0)})},{default:(0,o.w5)((function(){return[(0,o.Uk)("所有选中")]})),_:1}),(0,o.Wm)(k,{onClick:r[9]||(r[9]=function(r){return t.$refs.xGrid.clearCheckboxRow()})},{default:(0,o.w5)((function(){return[(0,o.Uk)("清除选中")]})),_:1}),(0,o.Wm)(k,{onClick:t.getSelectEvent},{default:(0,o.w5)((function(){return[(0,o.Uk)("获取选中")]})),_:1},8,["onClick"])]})),_:1},16),(0,o._)("pre",null,[(0,o.Uk)("      "),(0,o.Wm)(v,null,{default:(0,o.w5)((function(){return[(0,o.Uk)("\n        | Arrow Up ↑ | 匀速向上滚动数据 |\n        | Arrow Down ↓ | 匀速向下滚动数据 |\n        | Arrow Left ← | 匀速向左滚动数据 |\n        | Arrow Right → | 匀速向右滚动数据 |\n        | Page Up | 向上翻页滚动 |\n        | Page Down | 向下翻页滚动 |\n        | Spacebar | 翻页滚动 |\n        | Home | 滚动到顶部 |\n        | End | 滚动到底部 |\n      ")]})),_:1}),(0,o.Uk)("\n    ")]),(0,o._)("p",c,(0,a.zw)(t.$t("app.body.button.showCode")),1),(0,o._)("pre",null,[(0,o.Uk)("      "),(0,o.Wm)(v,{class:"xml"},{default:(0,o.w5)((function(){return[(0,o.Uk)((0,a.zw)(t.demoCodes[0]),1)]})),_:1}),(0,o.Uk)("\n      "),(0,o.Wm)(v,{class:"typescript"},{default:(0,o.w5)((function(){return[(0,o.Uk)((0,a.zw)(t.demoCodes[1]),1)]})),_:1}),(0,o.Uk)("\n    ")])])}n(60228),n(70560),n(69358),n(48324),n(89730),n(21694),n(76265),n(34338);var s=n(2262),d=n(72896),f=[],m=[],k=(0,o.aZ)({setup:function(){var t=(0,s.qj)({border:!0,showOverflow:!0,showHeaderOverflow:!0,height:600,loading:!1,rowConfig:{useKey:!0,isHover:!0,isCurrent:!0},columnConfig:{resizable:!0},toolbarConfig:{slots:{buttons:"toolbar_buttons"}},checkboxConfig:{checkField:"checked",labelField:"nickname"}}),r=(0,s.iH)(),n=function(t){return new Promise((function(r){setTimeout((function(){var n=f.length;if(n<t)for(var o=n;o<t;o++)f.push({field:"attr"+o,title:0===o?"":"Attr"+o,width:0===o?60:140,type:0===o?"checkbox":null,fixed:o<1?"left":null});var a=JSON.parse(JSON.stringify(f.slice(0,t)));r(a)}),100)}))},a=function(t){return new Promise((function(r){setTimeout((function(){var n=m.length;if(n<t)for(var o=n;o<t;o++)m.push({checked:!1,attr0:"attr0_row_"+o,attr1:"attr1_row_"+o,attr2:"attr2_row_"+o,attr3:"attr3_row_"+o,attr4:"attr3_row_"+o,attr5:"attr3_row_"+o,attr10:"attr10_row_"+o,attr11:"attr11_row_"+o,attr12:"attr12_row_"+o,attr13:"attr12_row_"+o,attr14:"attr12_row_"+o,attr50:"attr50_row_"+o,attr51:"attr51_row_"+o,attr52:"attr52_row_"+o,attr53:"attr53_row_"+o,attr54:"attr54_row_"+o,attr100:"attr100_row_"+o,attr101:"attr101_row_"+o,attr102:"attr102_row_"+o,attr103:"attr103_row_"+o,attr105:"attr105_row_"+o,attr104:"attr104_row_"+o,attr106:"attr106_row_"+o,attr107:"attr107_row_"+o,attr400:"attr100_row_"+o,attr401:"attr401_row_"+o,attr402:"attr402_row_"+o,attr403:"attr403_row_"+o,attr404:"attr404_row_"+o,attr405:"attr405_row_"+o,attr406:"attr405_row_"+o,attr407:"attr405_row_"+o,attr1000:"attr100_row_"+o,attr1001:"attr1001_row_"+o,attr1002:"attr1002_row_"+o,attr1003:"attr1003_row_"+o,attr1004:"attr1004_row_"+o,attr1005:"attr1005_row_"+o,attr1006:"attr1005_row_"+o,attr1007:"attr1005_row_"+o,attr10005:"attr10005_row_"+o,attr10006:"attr10005_row_"+o,attr10007:"attr10005_row_"+o,attr150005:"attr100005_row_"+o,attr150006:"attr100005_row_"+o,attr150007:"attr100005_row_"+o});var a=JSON.parse(JSON.stringify(m.slice(0,t)));r(a)}),100)}))},e=function(o,e){t.loading=!0,Promise.all([n(o),a(e)]).then((function(n){var a=n[0],i=n[1],l=Date.now(),u=r.value;u?Promise.all([u.reloadColumn(a),u.reloadData(i)]).then((function(){d.s7.modal.message({content:"渲染 ".concat(o," 列 ").concat(e," 行，用时 ").concat(Date.now()-l,"毫秒"),status:"info"}),t.loading=!1})):t.loading=!1}))},i=function(){var t=r.value;if(t){var n=t.getCheckboxRecords();d.s7.modal.alert("".concat(n.length))}};return(0,o.Y3)((function(){e(20,10)})),{xGrid:r,gridOptions:t,loadColumnAndData:e,getSelectEvent:i,demoCodes:['\n        <vxe-grid ref="xGrid" v-bind="gridOptions">\n          <template #toolbar_buttons>\n            <vxe-button @click="loadColumnAndData(50, 20)">50列20条</vxe-button>\n            <vxe-button @click="loadColumnAndData(100, 50)">100列50条</vxe-button>\n            <vxe-button @click="loadColumnAndData(200, 100)">200列100条</vxe-button>\n            <vxe-button @click="loadColumnAndData(1000, 5000)">1k列5k条</vxe-button>\n            <vxe-button @click="loadColumnAndData(5000, 10000)">5k列1w条</vxe-button>\n            <vxe-button @click="loadColumnAndData(10000, 100000)">1w列10w条</vxe-button>\n            <vxe-button @click="loadColumnAndData(50000, 200000)">5w列20w条</vxe-button>\n            <vxe-button @click="loadColumnAndData(100000, 50000)">10w列5w条</vxe-button>\n            <vxe-button @click="$refs.xGrid.setAllCheckboxRow(true)">所有选中</vxe-button>\n            <vxe-button @click="$refs.xGrid.clearCheckboxRow()">清除选中</vxe-button>\n            <vxe-button @click="getSelectEvent">获取选中</vxe-button>\n          </template>\n        </vxe-grid>\n        ',"\n        import { defineComponent, nextTick, reactive, ref } from 'vue'\n        import { VXETable, VxeGridInstance, VxeGridProps } from 'vxe-table'\n\n        const columnList: any[] = []\n        const dataList: any[] = []\n\n        export default defineComponent({\n          setup () {\n            const gridOptions = reactive({\n              border: true,\n              showOverflow: true,\n              showHeaderOverflow: true,\n              height: 600,\n              loading: false,\n              rowConfig: {\n                useKey: true,\n                isHover: true,\n                isCurrent: true\n              },\n              columnConfig: {\n                resizable: true\n              },\n              toolbarConfig: {\n                slots: {\n                  buttons: 'toolbar_buttons'\n                }\n              },\n              checkboxConfig: {\n                checkField: 'checked',\n                labelField: 'nickname'\n              }\n            } as VxeGridProps)\n\n            const xGrid = ref<VxeGridInstance>()\n\n            const mockColumns = (colSize: number): Promise<any[]> => {\n              return new Promise(resolve => {\n                setTimeout(() => {\n                  const currSize = columnList.length\n                  if (currSize < colSize) {\n                    for (let i = currSize; i < colSize; i++) {\n                      columnList.push({\n                        field: 'attr' + i,\n                        title: i === 0 ? '' : 'Attr' + i,\n                        width: i === 0 ? 60 : 140,\n                        type: i === 0 ? 'checkbox' : null,\n                        fixed: i < 1 ? 'left' : null\n                      })\n                    }\n                  }\n                  // 模拟数据\n                  const result = JSON.parse(JSON.stringify(columnList.slice(0, colSize)))\n                  resolve(result)\n                }, 100)\n              })\n            }\n\n            const mockList = (rowSize: number): Promise<any[]> => {\n              return new Promise(resolve => {\n                setTimeout(() => {\n                  const currSize = dataList.length\n                  if (currSize < rowSize) {\n                    for (let i = currSize; i < rowSize; i++) {\n                      dataList.push({\n                        checked: false,\n                        attr0: 'attr0_row_' + i,\n                        attr1: 'attr1_row_' + i,\n                        attr2: 'attr2_row_' + i,\n                        attr3: 'attr3_row_' + i,\n                        attr4: 'attr3_row_' + i,\n                        attr5: 'attr3_row_' + i,\n                        attr10: 'attr10_row_' + i,\n                        attr11: 'attr11_row_' + i,\n                        attr12: 'attr12_row_' + i,\n                        attr13: 'attr12_row_' + i,\n                        attr14: 'attr12_row_' + i,\n                        attr50: 'attr50_row_' + i,\n                        attr51: 'attr51_row_' + i,\n                        attr52: 'attr52_row_' + i,\n                        attr53: 'attr53_row_' + i,\n                        attr54: 'attr54_row_' + i,\n                        attr100: 'attr100_row_' + i,\n                        attr101: 'attr101_row_' + i,\n                        attr102: 'attr102_row_' + i,\n                        attr103: 'attr103_row_' + i,\n                        attr105: 'attr105_row_' + i,\n                        attr104: 'attr104_row_' + i,\n                        attr106: 'attr106_row_' + i,\n                        attr107: 'attr107_row_' + i,\n                        attr400: 'attr100_row_' + i,\n                        attr401: 'attr401_row_' + i,\n                        attr402: 'attr402_row_' + i,\n                        attr403: 'attr403_row_' + i,\n                        attr404: 'attr404_row_' + i,\n                        attr405: 'attr405_row_' + i,\n                        attr406: 'attr405_row_' + i,\n                        attr407: 'attr405_row_' + i,\n                        attr1000: 'attr100_row_' + i,\n                        attr1001: 'attr1001_row_' + i,\n                        attr1002: 'attr1002_row_' + i,\n                        attr1003: 'attr1003_row_' + i,\n                        attr1004: 'attr1004_row_' + i,\n                        attr1005: 'attr1005_row_' + i,\n                        attr1006: 'attr1005_row_' + i,\n                        attr1007: 'attr1005_row_' + i,\n                        attr10005: 'attr10005_row_' + i,\n                        attr10006: 'attr10005_row_' + i,\n                        attr10007: 'attr10005_row_' + i,\n                        attr150005: 'attr100005_row_' + i,\n                        attr150006: 'attr100005_row_' + i,\n                        attr150007: 'attr100005_row_' + i\n                      })\n                    }\n                  }\n                  // 模拟数据\n                  const result = JSON.parse(JSON.stringify(dataList.slice(0, rowSize)))\n                  resolve(result)\n                }, 100)\n              })\n            }\n\n            const loadColumnAndData = (colSize: number, rowSize: number) => {\n              gridOptions.loading = true\n              Promise.all([\n                mockColumns(colSize),\n                mockList(rowSize)\n              ]).then(rest => {\n                const columns = rest[0]\n                const data = rest[1]\n                const startTime = Date.now()\n                const $grid = xGrid.value\n                // 使用函数式加载\n                if ($grid) {\n                  Promise.all([\n                    $grid.reloadColumn(columns),\n                    $grid.reloadData(data)\n                  ]).then(() => {\n                    VXETable.modal.message({ content: `渲染 ${colSize} 列 ${rowSize} 行，用时 ${Date.now() - startTime}毫秒`, status: 'info' })\n                    gridOptions.loading = false\n                  })\n                } else {\n                  gridOptions.loading = false\n                }\n              })\n            }\n\n            const getSelectEvent = () => {\n              const $grid = xGrid.value\n              const selectRecords = $grid.getCheckboxRecords()\n              VXETable.modal.alert(`${selectRecords.length}`)\n            }\n\n            nextTick(() => {\n              loadColumnAndData(20, 10)\n            })\n\n            return {\n              xGrid,\n              gridOptions,\n              loadColumnAndData,\n              getSelectEvent\n            }\n          }\n        }\n        "]}}}),b=n(83744);const v=(0,b.Z)(k,[["render",w]]);var p=v}}]);