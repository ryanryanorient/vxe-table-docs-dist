"use strict";(self["webpackChunkvxe_table_v3"]=self["webpackChunkvxe_table_v3"]||[]).push([[1387],{39933:function(n,e,t){t.r(e),t.d(e,{default:function(){return u}});var o=function(){var n=this,e=n._self._c;return e("div",[e("p",{staticClass:"tip"},[n._v(" 虚拟滚动渲染，左右固定列"),e("br"),n._v(" 大数据不建议使用双向绑定的 "),e("table-api-link",{attrs:{name:"data"}}),n._v(" 属性（vue 监听会大数据会短暂的卡顿），建议使用 "),e("table-api-link",{attrs:{prop:"loadData"}}),n._v("/"),e("table-api-link",{attrs:{prop:"loadColumn"}}),n._v(" 函数"),e("br"),n._v(" 对于多选 type="),e("table-column-api-link",{attrs:{prop:"checkbox"}}),n._v(" 当数据量海量时应该绑定 "),e("table-api-link",{attrs:{prop:"checkField"}}),n._v(" 属性渲染速度更快"),e("br"),e("span",{staticClass:"green"},[n._v("（性能优化：横向虚拟滚动由列宽决定性能，每一列的列宽越大就越流畅；纵向虚拟滚动由行高决定性能，每一行的高度越高就越流畅）")])],1),e("vxe-grid",{ref:"xGrid",attrs:{border:"",resizable:"","show-overflow":"","show-header-overflow":"",height:"600","row-config":{isCurrent:!0,isHover:!0},loading:n.loading,"toolbar-config":{slots:{buttons:"toolbar_buttons"}},"checkbox-config":{checkField:"checked",labelField:"name"}},scopedSlots:n._u([{key:"toolbar_buttons",fn:function(){return[e("vxe-button",{on:{click:function(e){return n.loadColumnAndData(50,20)}}},[n._v("50列20条")]),e("vxe-button",{on:{click:function(e){return n.loadColumnAndData(100,50)}}},[n._v("100列50条")]),e("vxe-button",{on:{click:function(e){return n.loadColumnAndData(200,100)}}},[n._v("200列100条")]),e("vxe-button",{on:{click:function(e){return n.loadColumnAndData(5e3,1e4)}}},[n._v("5k列1w条")]),e("vxe-button",{on:{click:function(e){return n.loadColumnAndData(1e4,5e4)}}},[n._v("1w列5w条")]),e("vxe-button",{on:{click:function(e){return n.loadColumnAndData(1e4,1e5)}}},[n._v("1w列10w条")]),e("vxe-button",{on:{click:function(e){return n.$refs.xGrid.setAllCheckboxRow(!0)}}},[n._v("所有选中")]),e("vxe-button",{on:{click:function(e){return n.$refs.xGrid.clearCheckboxRow()}}},[n._v("清除选中")]),e("vxe-button",{on:{click:n.getSelectEvent}},[n._v("获取选中")])]},proxy:!0}])}),e("pre",[n._v("    "),e("pre-code",[n._v("\n      | Arrow Up ↑ | 匀速向上滚动数据 |\n      | Arrow Down ↓ | 匀速向下滚动数据 |\n      | Arrow Left ← | 匀速向左滚动数据 |\n      | Arrow Right → | 匀速向右滚动数据 |\n      | Page Up | 向上翻页滚动 |\n      | Page Down | 向下翻页滚动 |\n      | Spacebar | 翻页滚动 |\n      | Home | 滚动到顶部 |\n      | End | 滚动到底部 |\n    ")]),n._v("\n  ")],1),e("p",{staticClass:"demo-code"},[n._v(n._s(n.$t("app.body.button.showCode")))]),e("pre",[n._v("    "),e("pre-code",{staticClass:"xml"},[n._v(n._s(n.demoCodes[0]))]),n._v("\n    "),e("pre-code",{staticClass:"javascript"},[n._v(n._s(n.demoCodes[1]))]),n._v("\n  ")],1)],1)},l=[],c=(t(60228),t(21694),t(76265),t(34338),t(70560),t(69851)),i=t.n(c),a={data:function(){return{loading:!1,demoCodes:['\n        <vxe-grid\n          border\n          resizable\n          show-overflow\n          show-header-overflow\n          ref="xGrid"\n          height="600"\n          :row-config="{isCurrent: true, isHover: true}"\n          :loading="loading"\n          :toolbar-config="{slots: {buttons: \'toolbar_buttons\'}}"\n          :checkbox-config="{checkField: \'checked\', labelField: \'name\'}">\n          <template #toolbar_buttons>\n            <vxe-button @click="loadColumnAndData(50, 20)">50列20条</vxe-button>\n            <vxe-button @click="loadColumnAndData(100, 50)">100列50条</vxe-button>\n            <vxe-button @click="loadColumnAndData(200, 100)">200列100条</vxe-button>\n            <vxe-button @click="loadColumnAndData(5000, 10000)">5k列1w条</vxe-button>\n            <vxe-button @click="loadColumnAndData(10000, 50000)">1w列5w条</vxe-button>\n            <vxe-button @click="loadColumnAndData(10000, 100000)">1w列10w条</vxe-button>\n            <vxe-button @click="$refs.xGrid.setAllCheckboxRow(true)">所有选中</vxe-button>\n            <vxe-button @click="$refs.xGrid.clearCheckboxRow()">清除选中</vxe-button>\n            <vxe-button @click="getSelectEvent">获取选中</vxe-button>\n          </template>\n        </vxe-grid>\n        ',"\n        import VXETable from 'vxe-table'\n        \n        export default {\n          data () {\n            return {\n              loading: false\n            }\n          },\n          created () {\n            this.loadColumnAndData(20, 20)\n          },\n          methods: {\n            loadColumnAndData (colSize, rowSize) {\n              this.loading = true\n              Promise.all([\n                this.mockColumns(colSize),\n                this.mockList(rowSize)\n              ]).then(rest => {\n                const columns = rest[0]\n                const data = rest[1]\n                const startTime = Date.now()\n                const xGrid = this.$refs.xGrid\n                // 使用函数式加载，阻断 vue 对大数组的双向绑定\n                if (xGrid) {\n                  Promise.all([\n                    xGrid.reloadColumn(columns),\n                    xGrid.reloadData(data)\n                  ]).then(() => {\n                    VXETable.modal.message({ content: `渲染 ${colSize} 列 ${rowSize} 行，用时 ${Date.now() - startTime}毫秒`, status: 'info' })\n                    this.loading = false\n                  })\n                }\n              })\n            },\n            mockColumns (size) {\n              return new Promise(resolve => {\n                const cols = []\n                for (let index = 0; index < size; index++) {\n                  if (index === 0) {\n                    cols.push({\n                      title: `Col_${index}`,\n                      type: 'seq',\n                      fixed: 'left',\n                      width: 100\n                    })\n                  } else if (index === 1) {\n                    cols.push({\n                      title: `Col_${index}`,\n                      type: 'checkbox',\n                      fixed: 'left',\n                      width: 200\n                    })\n                  } else if (index === size - 1) {\n                    cols.push({\n                      title: `Col_${index}`,\n                      field: `col${index}`,\n                      fixed: 'right',\n                      width: 140\n                    })\n                  } else {\n                    cols.push({\n                      title: `Col_${index}`,\n                      field: `col${index}`,\n                      width: 160\n                    })\n                  }\n                }\n                resolve(cols)\n              })\n            },\n            mockList (size) {\n              return new Promise(resolve => {\n                const list = []\n                for (let index = 0; index < size; index++) {\n                  list.push({\n                    name: `名称${index}`,\n                    checked: false,\n                    col1: '0',\n                    col2: 123,\n                    col3: 18,\n                    col4: 234,\n                    col5: 3,\n                    col6: 'shenzhen',\n                    col599: `600_${index}`,\n                    col999: `1k_${index}`,\n                    col4999: `5k_${index}`,\n                    col9999: `1w_${index}`,\n                    col19999: `2w_${index}`\n                  })\n                }\n                resolve(list)\n              })\n            },\n            getSelectEvent () {\n              let selectRecords = this.$refs.xGrid.getCheckboxRecords()\n              VXETable.modal.alert(selectRecords.length)\n            }\n          }\n        }\n        "]}},created:function(){this.loadColumnAndData(20,20)},methods:{loadColumnAndData:function(n,e){var t=this;this.loading=!0,Promise.all([this.mockColumns(n),this.mockList(e)]).then((function(o){var l=o[0],c=o[1],a=Date.now(),r=t.$refs.xGrid;r&&Promise.all([r.reloadColumn(l),r.reloadData(c)]).then((function(){i().modal.message({content:"渲染 ".concat(n," 列 ").concat(e," 行，用时 ").concat(Date.now()-a,"毫秒"),status:"info"}),t.loading=!1}))}))},mockColumns:function(n){return new Promise((function(e){for(var t=[],o=0;o<n;o++)0===o?t.push({title:"Col_".concat(o),type:"seq",fixed:"left",width:100}):1===o?t.push({title:"Col_".concat(o),type:"checkbox",fixed:"left",width:200}):o===n-1?t.push({title:"Col_".concat(o),field:"col".concat(o),fixed:"right",width:140}):t.push({title:"Col_".concat(o),field:"col".concat(o),width:160});e(t)}))},mockList:function(n){return new Promise((function(e){for(var t=[],o=0;o<n;o++)t.push({name:"名称".concat(o),checked:!1,col1:"0",col2:123,col3:18,col4:234,col5:3,col6:"shenzhen",col599:"600_".concat(o),col999:"1k_".concat(o),col4999:"5k_".concat(o),col9999:"1w_".concat(o),col19999:"2w_".concat(o)});e(t)}))},getSelectEvent:function(){var n=this.$refs.xGrid.getCheckboxRecords();i().modal.alert(n.length)}}},r=a,s=t(1001),d=(0,s.Z)(r,o,l,!1,null,null,null),u=d.exports}}]);