{"config":{"indexing":"full","lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"\u5de5\u4f5c\u6d41\u6838\u5fc3 Workflow Core \u662f\u4e00\u4e2a\u9762\u5411.NET \u6807\u51c6\u7684\u8f7b\u91cf\u7ea7\u5de5\u4f5c\u6d41\u5f15\u64ce\u3002\u601d\u8003\uff1a\u5177\u6709\u591a\u4e2a\u9700\u8981\u8ddf\u8e2a\u72b6\u6001\u7684\u4efb\u52a1\u7684\u957f\u65f6\u95f4\u8fd0\u884c\u7684\u8fdb\u7a0b\u3002\u5b83\u652f\u6301\u53ef\u63d2\u62d4\u7684\u6301\u4e45\u6027\u548c\u5e76\u53d1\u63d0\u4f9b\u7a0b\u5e8f\uff0c\u4ee5\u652f\u6301\u591a\u8282\u70b9\u96c6\u7fa4\u3002 \u6b63\u5728\u5b89\u88c5 \u5b89\u88c5 NuGet \u5305\u201cWorkflowCore \u201d \u4f7f\u7528 NuGet PM> Install-Package WorkflowCore \u4f7f\u7528.NET CLI dotnet add package WorkflowCore \u6d41\u7545\u7684 API \u4f7f\u7528 Fluent API \u5b9a\u4e49\u5de5\u4f5c\u6d41\u3002 public class MyWorkflow : IWorkflow { public void Build(IWorkflowBuilder<MyData> builder) { builder .StartWith<Task1>() .Then<Task2>() .Then<Task3>; } }","title":"Home"},{"location":"#_1","text":"Workflow Core \u662f\u4e00\u4e2a\u9762\u5411.NET \u6807\u51c6\u7684\u8f7b\u91cf\u7ea7\u5de5\u4f5c\u6d41\u5f15\u64ce\u3002\u601d\u8003\uff1a\u5177\u6709\u591a\u4e2a\u9700\u8981\u8ddf\u8e2a\u72b6\u6001\u7684\u4efb\u52a1\u7684\u957f\u65f6\u95f4\u8fd0\u884c\u7684\u8fdb\u7a0b\u3002\u5b83\u652f\u6301\u53ef\u63d2\u62d4\u7684\u6301\u4e45\u6027\u548c\u5e76\u53d1\u63d0\u4f9b\u7a0b\u5e8f\uff0c\u4ee5\u652f\u6301\u591a\u8282\u70b9\u96c6\u7fa4\u3002","title":"\u5de5\u4f5c\u6d41\u6838\u5fc3"},{"location":"#_2","text":"\u5b89\u88c5 NuGet \u5305\u201cWorkflowCore \u201d \u4f7f\u7528 NuGet PM> Install-Package WorkflowCore \u4f7f\u7528.NET CLI dotnet add package WorkflowCore","title":"\u6b63\u5728\u5b89\u88c5"},{"location":"#api","text":"\u4f7f\u7528 Fluent API \u5b9a\u4e49\u5de5\u4f5c\u6d41\u3002 public class MyWorkflow : IWorkflow { public void Build(IWorkflowBuilder<MyData> builder) { builder .StartWith<Task1>() .Then<Task2>() .Then<Task3>; } }","title":"\u6d41\u7545\u7684 API"},{"location":"activities/","text":"\u6d3b\u52a8 \u6d3b\u52a8\u5b9a\u4e49\u4e3a\u5de5\u4f5c\u6d41\u53ef\u4ee5\u7b49\u5f85\u7684\u5916\u90e8\u5de5\u4f5c\u961f\u5217\u4e2d\u7684\u9879\u76ee\u3002 \u5728\u6b64\u793a\u4f8b\u4e2d\uff0c\u5de5\u4f5c\u6d41\u5c06\u7b49\u5f85 activity-1 \uff0c\u7136\u540e\u7ee7\u7eed\u3002\u5b83\u8fd8\u5c06\u7684\u503c data.Value1 \u4f20\u9012\u7ed9\u6d3b\u52a8\uff0c\u7136\u540e\u5c06\u6d3b\u52a8\u7684\u7ed3\u679c\u6620\u5c04\u5230 data.Value2 \u3002 \u7136\u540e\uff0c\u6211\u4eec\u521b\u5efa\u4e00\u4e2a\u5de5\u4f5c\u7ebf\u7a0b\u6765\u5904\u7406\u6d3b\u52a8\u9879\u7684\u961f\u5217\u3002\u5b83\u4f7f\u7528\u8be5 GetPendingActivity \u65b9\u6cd5\u6765\u83b7\u53d6\u6d3b\u52a8\u548c\u5de5\u4f5c\u6d41\u6b63\u5728\u7b49\u5f85\u7684\u6570\u636e\u3002 public class ActivityWorkflow : IWorkflow<MyData> { public void Build(IWorkflowBuilder<MyData> builder) { builder .StartWith<HelloWorld>() .Activity(\"activity-1\", (data) => data.Value1) .Output(data => data.Value2, step => step.Result) .Then<PrintMessage>() .Input(step => step.Message, data => data.Value2); } } ... var activity = host.GetPendingActivity(\"activity-1\", \"worker1\", TimeSpan.FromMinutes(1)).Result; if (activity != null) { Console.WriteLine(activity.Parameters); host.SubmitActivitySuccess(activity.Token, \"Some response data\"); } \u6b64\u6b65\u9aa4\u7684 JSON \u8868\u793a\u5f62\u5f0f\u5982\u4e0b\u6240\u793a { \"Id\": \"activity-step\", \"StepType\": \"WorkflowCore.Primitives.Activity, WorkflowCore\", \"Inputs\": { \"ActivityName\": \"\\\"activity-1\\\"\", \"Parameters\": \"data.Value1\" }, \"Outputs\": { \"Value2\": \"step.Result\" } } JSON/YAML API \u8be5 Activity \u6b65\u9aa4\u53ef\u4ee5\u4f7f\u7528\u5982\u4e0b\u8f93\u5165\u8fdb\u884c\u914d\u7f6e Field \u63cf\u8ff0 CancelCondition \u7528\u4e8e\u6307\u5b9a\u53d6\u6d88\u6761\u4ef6\u7684\u53ef\u9009\u8868\u8fbe\u5f0f Inputs.ActivityName \u8868\u8fbe\u5f0f\u6307\u5b9a\u6d3b\u52a8\u540d\u79f0 Inputs.Parameters \u8868\u8fbe\u5f0f\u6307\u5b9a\u8981\u4f20\u9012\u6d3b\u52a8\u5de5\u4f5c\u7ebf\u7a0b\u7684\u53c2\u6570 Inputs.EffectiveDate \u7528\u4e8e\u6307\u5b9a\u751f\u6548\u65e5\u671f\u7684\u53ef\u9009\u8868\u8fbe\u5f0f { \"Id\": \"MyActivityStep\", \"StepType\": \"WorkflowCore.Primitives.Activity, WorkflowCore\", \"NextStepId\": \"...\", \"CancelCondition\": \"...\", \"Inputs\": { \"ActivityName\": \"\\\"my-activity\\\"\", \"Parameters\": \"data.SomeValue\" } } Id: MyActivityStep StepType: WorkflowCore.Primitives.Activity, WorkflowCore NextStepId: \"...\" CancelCondition: \"...\" Inputs: ActivityName: '\"my-activity\"' EventKey: '\"Key1\"' Parameters: data.SomeValue","title":"Activity workers"},{"location":"activities/#_1","text":"\u6d3b\u52a8\u5b9a\u4e49\u4e3a\u5de5\u4f5c\u6d41\u53ef\u4ee5\u7b49\u5f85\u7684\u5916\u90e8\u5de5\u4f5c\u961f\u5217\u4e2d\u7684\u9879\u76ee\u3002 \u5728\u6b64\u793a\u4f8b\u4e2d\uff0c\u5de5\u4f5c\u6d41\u5c06\u7b49\u5f85 activity-1 \uff0c\u7136\u540e\u7ee7\u7eed\u3002\u5b83\u8fd8\u5c06\u7684\u503c data.Value1 \u4f20\u9012\u7ed9\u6d3b\u52a8\uff0c\u7136\u540e\u5c06\u6d3b\u52a8\u7684\u7ed3\u679c\u6620\u5c04\u5230 data.Value2 \u3002 \u7136\u540e\uff0c\u6211\u4eec\u521b\u5efa\u4e00\u4e2a\u5de5\u4f5c\u7ebf\u7a0b\u6765\u5904\u7406\u6d3b\u52a8\u9879\u7684\u961f\u5217\u3002\u5b83\u4f7f\u7528\u8be5 GetPendingActivity \u65b9\u6cd5\u6765\u83b7\u53d6\u6d3b\u52a8\u548c\u5de5\u4f5c\u6d41\u6b63\u5728\u7b49\u5f85\u7684\u6570\u636e\u3002 public class ActivityWorkflow : IWorkflow<MyData> { public void Build(IWorkflowBuilder<MyData> builder) { builder .StartWith<HelloWorld>() .Activity(\"activity-1\", (data) => data.Value1) .Output(data => data.Value2, step => step.Result) .Then<PrintMessage>() .Input(step => step.Message, data => data.Value2); } } ... var activity = host.GetPendingActivity(\"activity-1\", \"worker1\", TimeSpan.FromMinutes(1)).Result; if (activity != null) { Console.WriteLine(activity.Parameters); host.SubmitActivitySuccess(activity.Token, \"Some response data\"); } \u6b64\u6b65\u9aa4\u7684 JSON \u8868\u793a\u5f62\u5f0f\u5982\u4e0b\u6240\u793a { \"Id\": \"activity-step\", \"StepType\": \"WorkflowCore.Primitives.Activity, WorkflowCore\", \"Inputs\": { \"ActivityName\": \"\\\"activity-1\\\"\", \"Parameters\": \"data.Value1\" }, \"Outputs\": { \"Value2\": \"step.Result\" } }","title":"\u6d3b\u52a8"},{"location":"activities/#jsonyaml-api","text":"\u8be5 Activity \u6b65\u9aa4\u53ef\u4ee5\u4f7f\u7528\u5982\u4e0b\u8f93\u5165\u8fdb\u884c\u914d\u7f6e Field \u63cf\u8ff0 CancelCondition \u7528\u4e8e\u6307\u5b9a\u53d6\u6d88\u6761\u4ef6\u7684\u53ef\u9009\u8868\u8fbe\u5f0f Inputs.ActivityName \u8868\u8fbe\u5f0f\u6307\u5b9a\u6d3b\u52a8\u540d\u79f0 Inputs.Parameters \u8868\u8fbe\u5f0f\u6307\u5b9a\u8981\u4f20\u9012\u6d3b\u52a8\u5de5\u4f5c\u7ebf\u7a0b\u7684\u53c2\u6570 Inputs.EffectiveDate \u7528\u4e8e\u6307\u5b9a\u751f\u6548\u65e5\u671f\u7684\u53ef\u9009\u8868\u8fbe\u5f0f { \"Id\": \"MyActivityStep\", \"StepType\": \"WorkflowCore.Primitives.Activity, WorkflowCore\", \"NextStepId\": \"...\", \"CancelCondition\": \"...\", \"Inputs\": { \"ActivityName\": \"\\\"my-activity\\\"\", \"Parameters\": \"data.SomeValue\" } } Id: MyActivityStep StepType: WorkflowCore.Primitives.Activity, WorkflowCore NextStepId: \"...\" CancelCondition: \"...\" Inputs: ActivityName: '\"my-activity\"' EventKey: '\"Key1\"' Parameters: data.SomeValue","title":"JSON/YAML API"},{"location":"control-structures/","text":"\u63a7\u5236\u7ed3\u6784 \u51b3\u7b56\u5206\u652f \u4f60\u53ef\u4ee5\u5728\u5de5\u4f5c\u6d41\u4e2d\u5b9a\u4e49\u591a\u4e2a\u72ec\u7acb\u5206\u652f\uff0c\u5e76\u6839\u636e\u8868\u8fbe\u5f0f\u503c\u9009\u62e9\u4e00\u4e2a\u5206\u652f\u3002 \u6d41\u7545\u7684 API \u5bf9\u4e8e Fluent API\uff0c\u6211\u4eec\u4f7f\u7528 Workflow Builder \u4e0a\u7684 CreateBranch() \u65b9\u6cd5\u5b9a\u4e49\u5206\u652f\u3002\u7136\u540e\uff0c\u6211\u4eec\u53ef\u4ee5\u4f7f\u7528\u8be5 Branch \u65b9\u6cd5\u9009\u62e9\u4e00\u4e2a\u5206\u652f\u3002 \u9009\u62e9\u8868\u8fbe\u5f0f\u5c06\u4e0e\u901a\u8fc7\u8be5 Branch \u65b9\u6cd5\u5217\u51fa\u7684\u5206\u652f\u5339\u914d\uff0c\u5e76\u4e14\u5339\u914d\u7684\u4e0b\u4e00\u6b65\u5c06\u88ab\u5b89\u6392\u5728\u4e0b\u4e00\u6b65\u6267\u884c\u3002\u5339\u914d\u591a\u4e2a\u540e\u7eed\u6b65\u9aa4\u5c06\u5bfc\u81f4\u5e76\u884c\u5206\u652f\u8fd0\u884c\u3002 \u6b64\u5de5\u4f5c\u6d41\u5c06\u9009\u62e9 branch1 \u7684 data.Value1 \u503c\u662f\u5426\u4e3a one \uff0c\u4ee5\u53ca branch2 \u662f\u5426\u4e3a two \u3002 var branch1 = builder.CreateBranch() .StartWith<PrintMessage>() .Input(step => step.Message, data => \"hi from 1\") .Then<PrintMessage>() .Input(step => step.Message, data => \"bye from 1\"); var branch2 = builder.CreateBranch() .StartWith<PrintMessage>() .Input(step => step.Message, data => \"hi from 2\") .Then<PrintMessage>() .Input(step => step.Message, data => \"bye from 2\"); builder .StartWith<HelloWorld>() .Decide(data => data.Value1) .Branch((data, outcome) => data.Value1 == \"one\", branch1) .Branch((data, outcome) => data.Value1 == \"two\", branch2); JSON/YAML API \u901a\u8fc7 SelectNextStep \u5c5e\u6027\u8fde\u63a5\u4f60\u7684\u5206\u652f\uff0c\u800c\u4e0d\u662f NextStepId \u3002\u8868\u8fbe\u5f0f\u5c06\u4e0e\u4e2d SelectNextStep \u5217\u51fa\u7684\u6b65\u9aa4 ID \u5339\u914d\uff0c\u5e76\u4e14\u5339\u914d\u7684\u4e0b\u4e00\u4e2a\u6b65\u9aa4\u5c06\u5b89\u6392\u5728\u4e0b\u4e00\u6b65\u6267\u884c\u3002 { \"Id\": \"DecisionWorkflow\", \"Version\": 1, \"DataType\": \"MyApp.MyData, MyApp\", \"Steps\": [ { \"Id\": \"decide\", \"StepType\": \"...\", \"SelectNextStep\": { \"Branch1\": \"<<result expression to match for branch 1>>\", \"Branch2\": \"<<result expression to match for branch 2>>\" } }, { \"Id\": \"Branch1\", \"StepType\": \"MyApp.PrintMessage, MyApp\", \"Inputs\": { \"Message\": \"\\\"Hello from 1\\\"\" } }, { \"Id\": \"Branch2\", \"StepType\": \"MyApp.PrintMessage, MyApp\", \"Inputs\": { \"Message\": \"\\\"Hello from 2\\\"\" } } ] } Id: DecisionWorkflow Version: 1 DataType: MyApp.MyData, MyApp Steps: - Id: decide StepType: WorkflowCore.Primitives.Decide, WorkflowCore Inputs: Expression: <<input expression to evaluate>> OutcomeSteps: Branch1: '<<result expression to match for branch 1>>' Branch2: '<<result expression to match for branch 2>>' - Id: Branch1 StepType: MyApp.PrintMessage, MyApp Inputs: Message: '\"Hello from 1\"' - Id: Branch2 StepType: MyApp.PrintMessage, MyApp Inputs: Message: '\"Hello from 2\"' \u5e76\u884c Foreach \u4f7f\u7528.Foreach \u65b9\u6cd5\u542f\u52a8\u5e76\u884c for \u5faa\u73af \u6d41\u7545\u7684 API public class ForEachWorkflow : IWorkflow { public string Id => \"Foreach\"; public int Version => 1; public void Build(IWorkflowBuilder<object> builder) { builder .StartWith<SayHello>() .ForEach(data => new List<int>() { 1, 2, 3, 4 }) .Do(x => x .StartWith<DisplayContext>() .Input(step => step.Message, (data, context) => context.Item) .Then<DoSomething>()) .Then<SayGoodbye>(); } } JSON/YAML API { \"Id\": \"MyForEachStep\", \"StepType\": \"WorkflowCore.Primitives.ForEach, WorkflowCore\", \"NextStepId\": \"...\", \"Inputs\": { \"Collection\": \"<<expression to evaluate>>\" }, \"Do\": [[ { \"Id\": \"do1\", \"StepType\": \"MyApp.DoSomething1, MyApp\", \"NextStepId\": \"do2\" }, { \"Id\": \"do2\", \"StepType\": \"MyApp.DoSomething2, MyApp\" } ]] } Id: MyForEachStep StepType: WorkflowCore.Primitives.ForEach, WorkflowCore NextStepId: \"...\" Inputs: Collection: \"<<expression to evaluate>>\" Do: - - Id: do1 StepType: MyApp.DoSomething1, MyApp NextStepId: do2 - Id: do2 StepType: MyApp.DoSomething2, MyApp While \u5faa\u73af \u4f7f\u7528.While \u65b9\u6cd5\u542f\u52a8 while \u6784\u9020 \u6d41\u7545\u7684 API public class WhileWorkflow : IWorkflow<MyData> { public string Id => \"While\"; public int Version => 1; public void Build(IWorkflowBuilder<MyData> builder) { builder .StartWith<SayHello>() .While(data => data.Counter < 3) .Do(x => x .StartWith<DoSomething>() .Then<IncrementStep>() .Input(step => step.Value1, data => data.Counter) .Output(data => data.Counter, step => step.Value2)) .Then<SayGoodbye>(); } } JSON/YAML API { \"Id\": \"MyWhileStep\", \"StepType\": \"WorkflowCore.Primitives.While, WorkflowCore\", \"NextStepId\": \"...\", \"Inputs\": { \"Condition\": \"<<expression to evaluate>>\" }, \"Do\": [[ { \"Id\": \"do1\", \"StepType\": \"MyApp.DoSomething1, MyApp\", \"NextStepId\": \"do2\" }, { \"Id\": \"do2\", \"StepType\": \"MyApp.DoSomething2, MyApp\" } ]] } Id: MyWhileStep StepType: WorkflowCore.Primitives.While, WorkflowCore NextStepId: \"...\" Inputs: Condition: \"<<expression to evaluate>>\" Do: - - Id: do1 StepType: MyApp.DoSomething1, MyApp NextStepId: do2 - Id: do2 StepType: MyApp.DoSomething2, MyApp \u5982\u679c\u6761\u4ef6 \u4f7f\u7528 If \u65b9\u6cd5\u542f\u52a8 If \u6761\u4ef6 \u6d41\u7545\u7684 API public class IfWorkflow : IWorkflow<MyData> { public void Build(IWorkflowBuilder<MyData> builder) { builder .StartWith<SayHello>() .If(data => data.Counter < 3).Do(then => then .StartWith<PrintMessage>() .Input(step => step.Message, data => \"Value is less than 3\") ) .If(data => data.Counter < 5).Do(then => then .StartWith<PrintMessage>() .Input(step => step.Message, data => \"Value is less than 5\") ) .Then<SayGoodbye>(); } } JSON/YAML API { \"Id\": \"MyIfStep\", \"StepType\": \"WorkflowCore.Primitives.If, WorkflowCore\", \"NextStepId\": \"...\", \"Inputs\": { \"Condition\": \"<<expression to evaluate>>\" }, \"Do\": [[ { \"Id\": \"do1\", \"StepType\": \"MyApp.DoSomething1, MyApp\", \"NextStepId\": \"do2\" }, { \"Id\": \"do2\", \"StepType\": \"MyApp.DoSomething2, MyApp\" } ]] } Id: MyIfStep StepType: WorkflowCore.Primitives.If, WorkflowCore NextStepId: \"...\" Inputs: Condition: \"<<expression to evaluate>>\" Do: - - Id: do1 StepType: MyApp.DoSomething1, MyApp NextStepId: do2 - Id: do2 StepType: MyApp.DoSomething2, MyApp \u5e73\u884c\u8def\u5f84 \u4f7f\u7528.parallel\uff08\uff09\u65b9\u6cd5\u5bf9\u5e76\u884c\u4efb\u52a1\u8fdb\u884c\u5206\u652f \u6d41\u7545\u7684 API public class ParallelWorkflow : IWorkflow<MyData> { public string Id => \"parallel-sample\"; public int Version => 1; public void Build(IWorkflowBuilder<MyData> builder) { builder .StartWith<SayHello>() .Parallel() .Do(then => then.StartWith<Task1dot1>() .Then<Task1dot2>() .Do(then => then.StartWith<Task2dot1>() .Then<Task2dot2>() .Do(then => then.StartWith<Task3dot1>() .Then<Task3dot2>() .Join() .Then<SayGoodbye>(); } } JSON/YAML API { \"Id\": \"MyParallelStep\", \"StepType\": \"WorkflowCore.Primitives.Sequence, WorkflowCore\", \"NextStepId\": \"...\", \"Do\": [ [ { \"Id\": \"Branch1.Step1\", \"StepType\": \"MyApp.DoSomething1, MyApp\", \"NextStepId\": \"Branch1.Step2\" }, { \"Id\": \"Branch1.Step2\", \"StepType\": \"MyApp.DoSomething2, MyApp\" } ], [ { \"Id\": \"Branch2.Step1\", \"StepType\": \"MyApp.DoSomething1, MyApp\", \"NextStepId\": \"Branch2.Step2\" }, { \"Id\": \"Branch2.Step2\", \"StepType\": \"MyApp.DoSomething2, MyApp\" } ] ] } Id: MyParallelStep StepType: WorkflowCore.Primitives.Sequence, WorkflowCore NextStepId: \"...\" Do: - - Id: Branch1.Step1 StepType: MyApp.DoSomething1, MyApp NextStepId: Branch1.Step2 - Id: Branch1.Step2 StepType: MyApp.DoSomething2, MyApp - - Id: Branch2.Step1 StepType: MyApp.DoSomething1, MyApp NextStepId: Branch2.Step2 - Id: Branch2.Step2 StepType: MyApp.DoSomething2, MyApp \u65e5\u7a0b\u8868 \u7528\u4e8e .Schedule \u6ce8\u518c\u5c06\u6765\u8981\u5728\u5de5\u4f5c\u6d41\u7684\u540e\u53f0\u5f02\u6b65\u8fd0\u884c\u7684\u4e00\u7ec4\u6b65\u9aa4\u3002 \u6d41\u7545\u7684 API builder .StartWith(context => Console.WriteLine(\"Hello\")) .Schedule(data => TimeSpan.FromSeconds(5)).Do(schedule => schedule .StartWith(context => Console.WriteLine(\"Doing scheduled tasks\")) ) .Then(context => Console.WriteLine(\"Doing normal tasks\")); JSON/YAML API { \"Id\": \"MyScheduleStep\", \"StepType\": \"WorkflowCore.Primitives.Schedule, WorkflowCore\", \"Inputs\": { \"Interval\": \"<<expression to evaluate>>\" }, \"Do\": [[ { \"Id\": \"do1\", \"StepType\": \"MyApp.DoSomething1, MyApp\", \"NextStepId\": \"do2\" }, { \"Id\": \"do2\", \"StepType\": \"MyApp.DoSomething2, MyApp\" } ]] } Id: MyScheduleStep StepType: WorkflowCore.Primitives.Schedule, WorkflowCore Inputs: Interval: \"<<expression to evaluate>>\" Do: - - Id: do1 StepType: MyApp.DoSomething1, MyApp NextStepId: do2 - Id: do2 StepType: MyApp.DoSomething2, MyApp \u5ef6\u8fdf \u8be5 Delay \u6b65\u9aa4\u4f1a\u5c06\u5de5\u4f5c\u6d41\u7684\u5f53\u524d\u5206\u652f\u6682\u505c\u4e00\u6bb5\u6307\u5b9a\u7684\u65f6\u95f4\u3002 JSON/YAML API { \"Id\": \"MyDelayStep\", \"StepType\": \"WorkflowCore.Primitives.Delay, WorkflowCore\", \"NextStepId\": \"...\", \"Inputs\": { \"Period\": \"<<expression to evaluate>>\" } } Id: MyDelayStep StepType: WorkflowCore.Primitives.Delay, WorkflowCore NextStepId: \"...\" Inputs: Period: \"<<expression to evaluate>>\" \u590d\u53d1 \u7528\u4e8e .Recur \u5728\u5de5\u4f5c\u6d41\u4e2d\u8bbe\u7f6e\u4e00\u7ec4\u91cd\u590d\u7684\u540e\u53f0\u6b65\u9aa4\uff0c\u76f4\u5230\u6ee1\u8db3\u7279\u5b9a\u6761\u4ef6\u4e3a\u6b62 \u6d41\u7545\u7684 API builder .StartWith(context => Console.WriteLine(\"Hello\")) .Recur(data => TimeSpan.FromSeconds(5), data => data.Counter > 5).Do(recur => recur .StartWith(context => Console.WriteLine(\"Doing recurring task\")) ) .Then(context => Console.WriteLine(\"Carry on\")); JSON/YAML API { \"Id\": \"MyScheduleStep\", \"StepType\": \"WorkflowCore.Primitives.Recur, WorkflowCore\", \"Inputs\": { \"Interval\": \"<<expression to evaluate>>\", \"StopCondition\": \"<<expression to evaluate>>\" }, \"Do\": [[ { \"Id\": \"do1\", \"StepType\": \"MyApp.DoSomething1, MyApp\", \"NextStepId\": \"do2\" }, { \"Id\": \"do2\", \"StepType\": \"MyApp.DoSomething2, MyApp\" } ]] } Id: MyScheduleStep StepType: WorkflowCore.Primitives.Recur, WorkflowCore Inputs: Interval: \"<<expression to evaluate>>\" StopCondition: \"<<expression to evaluate>>\" Do: - - Id: do1 StepType: MyApp.DoSomething1, MyApp NextStepId: do2 - Id: do2 StepType: MyApp.DoSomething2, MyApp","title":"Control structures"},{"location":"control-structures/#_1","text":"","title":"\u63a7\u5236\u7ed3\u6784"},{"location":"control-structures/#_2","text":"\u4f60\u53ef\u4ee5\u5728\u5de5\u4f5c\u6d41\u4e2d\u5b9a\u4e49\u591a\u4e2a\u72ec\u7acb\u5206\u652f\uff0c\u5e76\u6839\u636e\u8868\u8fbe\u5f0f\u503c\u9009\u62e9\u4e00\u4e2a\u5206\u652f\u3002","title":"\u51b3\u7b56\u5206\u652f"},{"location":"control-structures/#api","text":"\u5bf9\u4e8e Fluent API\uff0c\u6211\u4eec\u4f7f\u7528 Workflow Builder \u4e0a\u7684 CreateBranch() \u65b9\u6cd5\u5b9a\u4e49\u5206\u652f\u3002\u7136\u540e\uff0c\u6211\u4eec\u53ef\u4ee5\u4f7f\u7528\u8be5 Branch \u65b9\u6cd5\u9009\u62e9\u4e00\u4e2a\u5206\u652f\u3002 \u9009\u62e9\u8868\u8fbe\u5f0f\u5c06\u4e0e\u901a\u8fc7\u8be5 Branch \u65b9\u6cd5\u5217\u51fa\u7684\u5206\u652f\u5339\u914d\uff0c\u5e76\u4e14\u5339\u914d\u7684\u4e0b\u4e00\u6b65\u5c06\u88ab\u5b89\u6392\u5728\u4e0b\u4e00\u6b65\u6267\u884c\u3002\u5339\u914d\u591a\u4e2a\u540e\u7eed\u6b65\u9aa4\u5c06\u5bfc\u81f4\u5e76\u884c\u5206\u652f\u8fd0\u884c\u3002 \u6b64\u5de5\u4f5c\u6d41\u5c06\u9009\u62e9 branch1 \u7684 data.Value1 \u503c\u662f\u5426\u4e3a one \uff0c\u4ee5\u53ca branch2 \u662f\u5426\u4e3a two \u3002 var branch1 = builder.CreateBranch() .StartWith<PrintMessage>() .Input(step => step.Message, data => \"hi from 1\") .Then<PrintMessage>() .Input(step => step.Message, data => \"bye from 1\"); var branch2 = builder.CreateBranch() .StartWith<PrintMessage>() .Input(step => step.Message, data => \"hi from 2\") .Then<PrintMessage>() .Input(step => step.Message, data => \"bye from 2\"); builder .StartWith<HelloWorld>() .Decide(data => data.Value1) .Branch((data, outcome) => data.Value1 == \"one\", branch1) .Branch((data, outcome) => data.Value1 == \"two\", branch2);","title":"\u6d41\u7545\u7684 API"},{"location":"control-structures/#jsonyaml-api","text":"\u901a\u8fc7 SelectNextStep \u5c5e\u6027\u8fde\u63a5\u4f60\u7684\u5206\u652f\uff0c\u800c\u4e0d\u662f NextStepId \u3002\u8868\u8fbe\u5f0f\u5c06\u4e0e\u4e2d SelectNextStep \u5217\u51fa\u7684\u6b65\u9aa4 ID \u5339\u914d\uff0c\u5e76\u4e14\u5339\u914d\u7684\u4e0b\u4e00\u4e2a\u6b65\u9aa4\u5c06\u5b89\u6392\u5728\u4e0b\u4e00\u6b65\u6267\u884c\u3002 { \"Id\": \"DecisionWorkflow\", \"Version\": 1, \"DataType\": \"MyApp.MyData, MyApp\", \"Steps\": [ { \"Id\": \"decide\", \"StepType\": \"...\", \"SelectNextStep\": { \"Branch1\": \"<<result expression to match for branch 1>>\", \"Branch2\": \"<<result expression to match for branch 2>>\" } }, { \"Id\": \"Branch1\", \"StepType\": \"MyApp.PrintMessage, MyApp\", \"Inputs\": { \"Message\": \"\\\"Hello from 1\\\"\" } }, { \"Id\": \"Branch2\", \"StepType\": \"MyApp.PrintMessage, MyApp\", \"Inputs\": { \"Message\": \"\\\"Hello from 2\\\"\" } } ] } Id: DecisionWorkflow Version: 1 DataType: MyApp.MyData, MyApp Steps: - Id: decide StepType: WorkflowCore.Primitives.Decide, WorkflowCore Inputs: Expression: <<input expression to evaluate>> OutcomeSteps: Branch1: '<<result expression to match for branch 1>>' Branch2: '<<result expression to match for branch 2>>' - Id: Branch1 StepType: MyApp.PrintMessage, MyApp Inputs: Message: '\"Hello from 1\"' - Id: Branch2 StepType: MyApp.PrintMessage, MyApp Inputs: Message: '\"Hello from 2\"'","title":"JSON/YAML API"},{"location":"control-structures/#foreach","text":"\u4f7f\u7528.Foreach \u65b9\u6cd5\u542f\u52a8\u5e76\u884c for \u5faa\u73af","title":"\u5e76\u884c Foreach"},{"location":"control-structures/#api_1","text":"public class ForEachWorkflow : IWorkflow { public string Id => \"Foreach\"; public int Version => 1; public void Build(IWorkflowBuilder<object> builder) { builder .StartWith<SayHello>() .ForEach(data => new List<int>() { 1, 2, 3, 4 }) .Do(x => x .StartWith<DisplayContext>() .Input(step => step.Message, (data, context) => context.Item) .Then<DoSomething>()) .Then<SayGoodbye>(); } }","title":"\u6d41\u7545\u7684 API"},{"location":"control-structures/#jsonyaml-api_1","text":"{ \"Id\": \"MyForEachStep\", \"StepType\": \"WorkflowCore.Primitives.ForEach, WorkflowCore\", \"NextStepId\": \"...\", \"Inputs\": { \"Collection\": \"<<expression to evaluate>>\" }, \"Do\": [[ { \"Id\": \"do1\", \"StepType\": \"MyApp.DoSomething1, MyApp\", \"NextStepId\": \"do2\" }, { \"Id\": \"do2\", \"StepType\": \"MyApp.DoSomething2, MyApp\" } ]] } Id: MyForEachStep StepType: WorkflowCore.Primitives.ForEach, WorkflowCore NextStepId: \"...\" Inputs: Collection: \"<<expression to evaluate>>\" Do: - - Id: do1 StepType: MyApp.DoSomething1, MyApp NextStepId: do2 - Id: do2 StepType: MyApp.DoSomething2, MyApp","title":"JSON/YAML API"},{"location":"control-structures/#while","text":"\u4f7f\u7528.While \u65b9\u6cd5\u542f\u52a8 while \u6784\u9020","title":"While \u5faa\u73af"},{"location":"control-structures/#api_2","text":"public class WhileWorkflow : IWorkflow<MyData> { public string Id => \"While\"; public int Version => 1; public void Build(IWorkflowBuilder<MyData> builder) { builder .StartWith<SayHello>() .While(data => data.Counter < 3) .Do(x => x .StartWith<DoSomething>() .Then<IncrementStep>() .Input(step => step.Value1, data => data.Counter) .Output(data => data.Counter, step => step.Value2)) .Then<SayGoodbye>(); } }","title":"\u6d41\u7545\u7684 API"},{"location":"control-structures/#jsonyaml-api_2","text":"{ \"Id\": \"MyWhileStep\", \"StepType\": \"WorkflowCore.Primitives.While, WorkflowCore\", \"NextStepId\": \"...\", \"Inputs\": { \"Condition\": \"<<expression to evaluate>>\" }, \"Do\": [[ { \"Id\": \"do1\", \"StepType\": \"MyApp.DoSomething1, MyApp\", \"NextStepId\": \"do2\" }, { \"Id\": \"do2\", \"StepType\": \"MyApp.DoSomething2, MyApp\" } ]] } Id: MyWhileStep StepType: WorkflowCore.Primitives.While, WorkflowCore NextStepId: \"...\" Inputs: Condition: \"<<expression to evaluate>>\" Do: - - Id: do1 StepType: MyApp.DoSomething1, MyApp NextStepId: do2 - Id: do2 StepType: MyApp.DoSomething2, MyApp","title":"JSON/YAML API"},{"location":"control-structures/#_3","text":"\u4f7f\u7528 If \u65b9\u6cd5\u542f\u52a8 If \u6761\u4ef6","title":"\u5982\u679c\u6761\u4ef6"},{"location":"control-structures/#api_3","text":"public class IfWorkflow : IWorkflow<MyData> { public void Build(IWorkflowBuilder<MyData> builder) { builder .StartWith<SayHello>() .If(data => data.Counter < 3).Do(then => then .StartWith<PrintMessage>() .Input(step => step.Message, data => \"Value is less than 3\") ) .If(data => data.Counter < 5).Do(then => then .StartWith<PrintMessage>() .Input(step => step.Message, data => \"Value is less than 5\") ) .Then<SayGoodbye>(); } }","title":"\u6d41\u7545\u7684 API"},{"location":"control-structures/#jsonyaml-api_3","text":"{ \"Id\": \"MyIfStep\", \"StepType\": \"WorkflowCore.Primitives.If, WorkflowCore\", \"NextStepId\": \"...\", \"Inputs\": { \"Condition\": \"<<expression to evaluate>>\" }, \"Do\": [[ { \"Id\": \"do1\", \"StepType\": \"MyApp.DoSomething1, MyApp\", \"NextStepId\": \"do2\" }, { \"Id\": \"do2\", \"StepType\": \"MyApp.DoSomething2, MyApp\" } ]] } Id: MyIfStep StepType: WorkflowCore.Primitives.If, WorkflowCore NextStepId: \"...\" Inputs: Condition: \"<<expression to evaluate>>\" Do: - - Id: do1 StepType: MyApp.DoSomething1, MyApp NextStepId: do2 - Id: do2 StepType: MyApp.DoSomething2, MyApp","title":"JSON/YAML API"},{"location":"control-structures/#_4","text":"\u4f7f\u7528.parallel\uff08\uff09\u65b9\u6cd5\u5bf9\u5e76\u884c\u4efb\u52a1\u8fdb\u884c\u5206\u652f","title":"\u5e73\u884c\u8def\u5f84"},{"location":"control-structures/#api_4","text":"public class ParallelWorkflow : IWorkflow<MyData> { public string Id => \"parallel-sample\"; public int Version => 1; public void Build(IWorkflowBuilder<MyData> builder) { builder .StartWith<SayHello>() .Parallel() .Do(then => then.StartWith<Task1dot1>() .Then<Task1dot2>() .Do(then => then.StartWith<Task2dot1>() .Then<Task2dot2>() .Do(then => then.StartWith<Task3dot1>() .Then<Task3dot2>() .Join() .Then<SayGoodbye>(); } }","title":"\u6d41\u7545\u7684 API"},{"location":"control-structures/#jsonyaml-api_4","text":"{ \"Id\": \"MyParallelStep\", \"StepType\": \"WorkflowCore.Primitives.Sequence, WorkflowCore\", \"NextStepId\": \"...\", \"Do\": [ [ { \"Id\": \"Branch1.Step1\", \"StepType\": \"MyApp.DoSomething1, MyApp\", \"NextStepId\": \"Branch1.Step2\" }, { \"Id\": \"Branch1.Step2\", \"StepType\": \"MyApp.DoSomething2, MyApp\" } ], [ { \"Id\": \"Branch2.Step1\", \"StepType\": \"MyApp.DoSomething1, MyApp\", \"NextStepId\": \"Branch2.Step2\" }, { \"Id\": \"Branch2.Step2\", \"StepType\": \"MyApp.DoSomething2, MyApp\" } ] ] } Id: MyParallelStep StepType: WorkflowCore.Primitives.Sequence, WorkflowCore NextStepId: \"...\" Do: - - Id: Branch1.Step1 StepType: MyApp.DoSomething1, MyApp NextStepId: Branch1.Step2 - Id: Branch1.Step2 StepType: MyApp.DoSomething2, MyApp - - Id: Branch2.Step1 StepType: MyApp.DoSomething1, MyApp NextStepId: Branch2.Step2 - Id: Branch2.Step2 StepType: MyApp.DoSomething2, MyApp","title":"JSON/YAML API"},{"location":"control-structures/#_5","text":"\u7528\u4e8e .Schedule \u6ce8\u518c\u5c06\u6765\u8981\u5728\u5de5\u4f5c\u6d41\u7684\u540e\u53f0\u5f02\u6b65\u8fd0\u884c\u7684\u4e00\u7ec4\u6b65\u9aa4\u3002","title":"\u65e5\u7a0b\u8868"},{"location":"control-structures/#api_5","text":"builder .StartWith(context => Console.WriteLine(\"Hello\")) .Schedule(data => TimeSpan.FromSeconds(5)).Do(schedule => schedule .StartWith(context => Console.WriteLine(\"Doing scheduled tasks\")) ) .Then(context => Console.WriteLine(\"Doing normal tasks\"));","title":"\u6d41\u7545\u7684 API"},{"location":"control-structures/#jsonyaml-api_5","text":"{ \"Id\": \"MyScheduleStep\", \"StepType\": \"WorkflowCore.Primitives.Schedule, WorkflowCore\", \"Inputs\": { \"Interval\": \"<<expression to evaluate>>\" }, \"Do\": [[ { \"Id\": \"do1\", \"StepType\": \"MyApp.DoSomething1, MyApp\", \"NextStepId\": \"do2\" }, { \"Id\": \"do2\", \"StepType\": \"MyApp.DoSomething2, MyApp\" } ]] } Id: MyScheduleStep StepType: WorkflowCore.Primitives.Schedule, WorkflowCore Inputs: Interval: \"<<expression to evaluate>>\" Do: - - Id: do1 StepType: MyApp.DoSomething1, MyApp NextStepId: do2 - Id: do2 StepType: MyApp.DoSomething2, MyApp","title":"JSON/YAML API"},{"location":"control-structures/#_6","text":"\u8be5 Delay \u6b65\u9aa4\u4f1a\u5c06\u5de5\u4f5c\u6d41\u7684\u5f53\u524d\u5206\u652f\u6682\u505c\u4e00\u6bb5\u6307\u5b9a\u7684\u65f6\u95f4\u3002","title":"\u5ef6\u8fdf"},{"location":"control-structures/#jsonyaml-api_6","text":"{ \"Id\": \"MyDelayStep\", \"StepType\": \"WorkflowCore.Primitives.Delay, WorkflowCore\", \"NextStepId\": \"...\", \"Inputs\": { \"Period\": \"<<expression to evaluate>>\" } } Id: MyDelayStep StepType: WorkflowCore.Primitives.Delay, WorkflowCore NextStepId: \"...\" Inputs: Period: \"<<expression to evaluate>>\"","title":"JSON/YAML API"},{"location":"control-structures/#_7","text":"\u7528\u4e8e .Recur \u5728\u5de5\u4f5c\u6d41\u4e2d\u8bbe\u7f6e\u4e00\u7ec4\u91cd\u590d\u7684\u540e\u53f0\u6b65\u9aa4\uff0c\u76f4\u5230\u6ee1\u8db3\u7279\u5b9a\u6761\u4ef6\u4e3a\u6b62","title":"\u590d\u53d1"},{"location":"control-structures/#api_6","text":"builder .StartWith(context => Console.WriteLine(\"Hello\")) .Recur(data => TimeSpan.FromSeconds(5), data => data.Counter > 5).Do(recur => recur .StartWith(context => Console.WriteLine(\"Doing recurring task\")) ) .Then(context => Console.WriteLine(\"Carry on\"));","title":"\u6d41\u7545\u7684 API"},{"location":"control-structures/#jsonyaml-api_7","text":"{ \"Id\": \"MyScheduleStep\", \"StepType\": \"WorkflowCore.Primitives.Recur, WorkflowCore\", \"Inputs\": { \"Interval\": \"<<expression to evaluate>>\", \"StopCondition\": \"<<expression to evaluate>>\" }, \"Do\": [[ { \"Id\": \"do1\", \"StepType\": \"MyApp.DoSomething1, MyApp\", \"NextStepId\": \"do2\" }, { \"Id\": \"do2\", \"StepType\": \"MyApp.DoSomething2, MyApp\" } ]] } Id: MyScheduleStep StepType: WorkflowCore.Primitives.Recur, WorkflowCore Inputs: Interval: \"<<expression to evaluate>>\" StopCondition: \"<<expression to evaluate>>\" Do: - - Id: do1 StepType: MyApp.DoSomething1, MyApp NextStepId: do2 - Id: do2 StepType: MyApp.DoSomething2, MyApp","title":"JSON/YAML API"},{"location":"elastic-search/","text":"\u5de5\u4f5c\u6d41\u6838\u5fc3\u7684 ElasticSearch \u63d2\u4ef6 \u7531 ElasticSearch \u652f\u6301\u7684\u5de5\u4f5c\u6d41\u6838\u5fc3\u7684\u641c\u7d22\u7d22\u5f15\u63d2\u4ef6\uff0c\u4f7f\u4f60\u80fd\u591f\u7d22\u5f15\u4f60\u7684\u5de5\u4f5c\u6d41\uff0c\u5e76\u6839\u636e\u5b83\u4eec\u7684\u6570\u636e\u548c\u72b6\u6001\u8fdb\u884c\u641c\u7d22\u3002 \u6b63\u5728\u5b89\u88c5 \u5b89\u88c5 NuGet \u5305\u201cworkflowcore.providers.elasticsearch \u201d \u4f7f\u7528 NuGet \u5305\u63a7\u5236\u53f0 PM> Install-Package WorkflowCore.Providers.Elasticsearch \u4f7f\u7528.NET CLI dotnet add package WorkflowCore.Providers.Elasticsearch \u914d\u7f6e \u6784\u5efa\u670d\u52a1\u63d0\u4f9b\u7a0b\u5e8f\u65f6\uff0c\u8bf7\u4f7f\u7528\u4e0a IServiceCollection \u7684 .UseElasticsearch \u6269\u5c55\u65b9\u6cd5 using Nest; ... services.AddWorkflow(cfg => { ... cfg.UseElasticsearch(new ConnectionSettings(new Uri(\"http://localhost:9200\")), \"index_name\"); }); \u7528\u6cd5 \u5c06 ISearchIndex \u670d\u52a1\u6ce8\u5165\u5230\u4ee3\u7801\u4e2d\u5e76\u4f7f\u7528\u8be5 Search \u65b9\u6cd5\u3002 Search(string terms, int skip, int take, params SearchFilter[] filters) \u6761\u6b3e \u7528\u7a7a\u683c\u5206\u9694\u7684\u641c\u7d22\u8bcd\u5b57\u7b26\u4e32\uff0c\u7a7a\u5b57\u7b26\u4e32\u5c06\u5339\u914d\u6240\u6709\u5185\u5bb9\u3002\u8fd9\u5c06\u5bf9\u4ee5\u4e0b\u9ed8\u8ba4\u5b57\u6bb5\u6267\u884c\u5168\u6587\u641c\u7d22 * \u53c2\u8003\u6587\u732e * \u63cf\u8ff0 * \u5730\u4f4d * \u5de5\u4f5c\u6d41\u5b9a\u4e49 \u6b64\u5916\uff0c\u4f60\u8fd8\u53ef\u4ee5\u5728\u81ea\u5df1\u7684\u81ea\u5b9a\u4e49\u6570\u636e\u5bf9\u8c61\u4e2d\u641c\u7d22\u6570\u636e\uff08\u5982\u679c\u5b83\u5b9e\u73b0\u4e86 ISearchable ``` using WorkflowCore.Interfaces; ... public class MyData : ISearchable { public string StrValue1 { get; set; } public string StrValue2 { get; set; } public IEnumerable<string> GetSearchTokens() { return new List<string>() { StrValue1, StrValue2 }; } } ``` ##### \u4f8b\u5b50 \u5728\u6240\u6709\u5b57\u6bb5\u4e2d\u641c\u7d22\u201c\u5c0f\u72d7\u201d searchIndex.Search(\"puppies\", 0, 10); Skip&Take \u4f7f\u7528 skip \u548c take \u5bf9\u641c\u7d22\u7ed3\u679c\u8fdb\u884c\u5206\u9875\u3002\u5176\u4e2d\uff0c skip \u662f\u8981\u5f00\u59cb\u7684\u7ed3\u679c\u7f16\u53f7\uff0c take \u662f\u9875\u9762\u5927\u5c0f\u3002 \u8fc7\u6ee4\u5668 \u4f60\u8fd8\u53ef\u4ee5\u63d0\u4f9b\u5e94\u7528\u4e8e\u641c\u7d22\u7684\u7b5b\u9009\u5668\u5217\u8868\uff0c\u8fd9\u4e9b\u7b5b\u9009\u5668\u65e2\u53ef\u4ee5\u5e94\u7528\u4e8e\u6807\u51c6\u5b57\u6bb5\uff0c\u4e5f\u53ef\u4ee5\u5e94\u7528\u4e8e\u81ea\u5b9a\u4e49\u6570\u636e\u5bf9\u8c61\u4e2d\u7684\u4efb\u4f55\u5b57\u6bb5\u3002\u4e0d\u9700\u8981\u5728\u6570\u636e\u5bf9\u8c61\u4e0a\u5b9e\u73b0 ISearchable \uff0c\u5c31\u53ef\u4ee5\u5bf9\u5176\u4f7f\u7528\u7b5b\u9009\u5668\u3002 \u4ee5\u4e0b\u8fc7\u6ee4\u5668\u7c7b\u578b\u53ef\u7528 * \u6807\u91cf\u6ee4\u6ce2\u5668 * \u6570\u636e\u8303\u56f4\u8fc7\u6ee4\u5668 * \u6570\u503c\u8303\u56f4\u8fc7\u6ee4\u5668 * \u72b6\u6001\u7b5b\u9009\u5668 \u5b83\u4eec\u5b58\u5728\u4e8e WorkflowCore.Models.Search \u547d\u540d\u7a7a\u95f4\u4e2d\u3002 ##### \u4f8b\u5b50 \u6309\u5f15\u7528\u7b5b\u9009 ``` using WorkflowCore.Models.Search; ... searchIndex.Search(\"\", 0, 10, ScalarFilter.Equals(x => x.Reference, \"My Reference\")); ``` \u6309\u5728\u67d0\u4e2a\u65e5\u671f\u4e4b\u540e\u542f\u52a8\u7684\u5de5\u4f5c\u6d41\u8fdb\u884c\u7b5b\u9009 searchIndex.Search(\"\", 0, 10, DateRangeFilter.After(x => x.CreateTime, startDate)); \u6309\u65f6\u95f4\u6bb5\u5185\u5b8c\u6210\u7684\u5de5\u4f5c\u6d41\u8fdb\u884c\u7b5b\u9009 searchIndex.Search(\"\", 0, 10, DateRangeFilter.Between(x => x.CompleteTime, startDate, endDate)); \u6309\u5904\u4e8e\u67d0\u4e2a\u72b6\u6001\u7684\u5de5\u4f5c\u6d41\u8fdb\u884c\u7b5b\u9009 searchIndex.Search(\"\", 0, 10, StatusFilter.Equals(WorkflowStatus.Complete)); \u6839\u636e\u4f60\u81ea\u5df1\u7684\u81ea\u5b9a\u4e49\u6570\u636e\u7c7b\u8fdb\u884c\u7b5b\u9009 ``` class MyData { public string Value1 { get; set; } public int Value2 { get; set; } } searchIndex.Search(\"\", 0, 10, ScalarFilter.Equals (x => x.Value1, \"blue moon\")); searchIndex.Search(\"\", 0, 10, NumericRangeFilter.LessThan (x => x.Value2, 5)) ```","title":"Elasticsearch plugin"},{"location":"elastic-search/#elasticsearch","text":"\u7531 ElasticSearch \u652f\u6301\u7684\u5de5\u4f5c\u6d41\u6838\u5fc3\u7684\u641c\u7d22\u7d22\u5f15\u63d2\u4ef6\uff0c\u4f7f\u4f60\u80fd\u591f\u7d22\u5f15\u4f60\u7684\u5de5\u4f5c\u6d41\uff0c\u5e76\u6839\u636e\u5b83\u4eec\u7684\u6570\u636e\u548c\u72b6\u6001\u8fdb\u884c\u641c\u7d22\u3002","title":"\u5de5\u4f5c\u6d41\u6838\u5fc3\u7684 ElasticSearch \u63d2\u4ef6"},{"location":"elastic-search/#_1","text":"\u5b89\u88c5 NuGet \u5305\u201cworkflowcore.providers.elasticsearch \u201d \u4f7f\u7528 NuGet \u5305\u63a7\u5236\u53f0 PM> Install-Package WorkflowCore.Providers.Elasticsearch \u4f7f\u7528.NET CLI dotnet add package WorkflowCore.Providers.Elasticsearch","title":"\u6b63\u5728\u5b89\u88c5"},{"location":"elastic-search/#_2","text":"\u6784\u5efa\u670d\u52a1\u63d0\u4f9b\u7a0b\u5e8f\u65f6\uff0c\u8bf7\u4f7f\u7528\u4e0a IServiceCollection \u7684 .UseElasticsearch \u6269\u5c55\u65b9\u6cd5 using Nest; ... services.AddWorkflow(cfg => { ... cfg.UseElasticsearch(new ConnectionSettings(new Uri(\"http://localhost:9200\")), \"index_name\"); });","title":"\u914d\u7f6e"},{"location":"elastic-search/#_3","text":"\u5c06 ISearchIndex \u670d\u52a1\u6ce8\u5165\u5230\u4ee3\u7801\u4e2d\u5e76\u4f7f\u7528\u8be5 Search \u65b9\u6cd5\u3002 Search(string terms, int skip, int take, params SearchFilter[] filters)","title":"\u7528\u6cd5"},{"location":"elastic-search/#_4","text":"\u7528\u7a7a\u683c\u5206\u9694\u7684\u641c\u7d22\u8bcd\u5b57\u7b26\u4e32\uff0c\u7a7a\u5b57\u7b26\u4e32\u5c06\u5339\u914d\u6240\u6709\u5185\u5bb9\u3002\u8fd9\u5c06\u5bf9\u4ee5\u4e0b\u9ed8\u8ba4\u5b57\u6bb5\u6267\u884c\u5168\u6587\u641c\u7d22 * \u53c2\u8003\u6587\u732e * \u63cf\u8ff0 * \u5730\u4f4d * \u5de5\u4f5c\u6d41\u5b9a\u4e49 \u6b64\u5916\uff0c\u4f60\u8fd8\u53ef\u4ee5\u5728\u81ea\u5df1\u7684\u81ea\u5b9a\u4e49\u6570\u636e\u5bf9\u8c61\u4e2d\u641c\u7d22\u6570\u636e\uff08\u5982\u679c\u5b83\u5b9e\u73b0\u4e86 ISearchable ``` using WorkflowCore.Interfaces; ... public class MyData : ISearchable { public string StrValue1 { get; set; } public string StrValue2 { get; set; } public IEnumerable<string> GetSearchTokens() { return new List<string>() { StrValue1, StrValue2 }; } } ``` ##### \u4f8b\u5b50 \u5728\u6240\u6709\u5b57\u6bb5\u4e2d\u641c\u7d22\u201c\u5c0f\u72d7\u201d searchIndex.Search(\"puppies\", 0, 10);","title":"\u6761\u6b3e"},{"location":"elastic-search/#skiptake","text":"\u4f7f\u7528 skip \u548c take \u5bf9\u641c\u7d22\u7ed3\u679c\u8fdb\u884c\u5206\u9875\u3002\u5176\u4e2d\uff0c skip \u662f\u8981\u5f00\u59cb\u7684\u7ed3\u679c\u7f16\u53f7\uff0c take \u662f\u9875\u9762\u5927\u5c0f\u3002","title":"Skip&amp;Take"},{"location":"elastic-search/#_5","text":"\u4f60\u8fd8\u53ef\u4ee5\u63d0\u4f9b\u5e94\u7528\u4e8e\u641c\u7d22\u7684\u7b5b\u9009\u5668\u5217\u8868\uff0c\u8fd9\u4e9b\u7b5b\u9009\u5668\u65e2\u53ef\u4ee5\u5e94\u7528\u4e8e\u6807\u51c6\u5b57\u6bb5\uff0c\u4e5f\u53ef\u4ee5\u5e94\u7528\u4e8e\u81ea\u5b9a\u4e49\u6570\u636e\u5bf9\u8c61\u4e2d\u7684\u4efb\u4f55\u5b57\u6bb5\u3002\u4e0d\u9700\u8981\u5728\u6570\u636e\u5bf9\u8c61\u4e0a\u5b9e\u73b0 ISearchable \uff0c\u5c31\u53ef\u4ee5\u5bf9\u5176\u4f7f\u7528\u7b5b\u9009\u5668\u3002 \u4ee5\u4e0b\u8fc7\u6ee4\u5668\u7c7b\u578b\u53ef\u7528 * \u6807\u91cf\u6ee4\u6ce2\u5668 * \u6570\u636e\u8303\u56f4\u8fc7\u6ee4\u5668 * \u6570\u503c\u8303\u56f4\u8fc7\u6ee4\u5668 * \u72b6\u6001\u7b5b\u9009\u5668 \u5b83\u4eec\u5b58\u5728\u4e8e WorkflowCore.Models.Search \u547d\u540d\u7a7a\u95f4\u4e2d\u3002 ##### \u4f8b\u5b50 \u6309\u5f15\u7528\u7b5b\u9009 ``` using WorkflowCore.Models.Search; ... searchIndex.Search(\"\", 0, 10, ScalarFilter.Equals(x => x.Reference, \"My Reference\")); ``` \u6309\u5728\u67d0\u4e2a\u65e5\u671f\u4e4b\u540e\u542f\u52a8\u7684\u5de5\u4f5c\u6d41\u8fdb\u884c\u7b5b\u9009 searchIndex.Search(\"\", 0, 10, DateRangeFilter.After(x => x.CreateTime, startDate)); \u6309\u65f6\u95f4\u6bb5\u5185\u5b8c\u6210\u7684\u5de5\u4f5c\u6d41\u8fdb\u884c\u7b5b\u9009 searchIndex.Search(\"\", 0, 10, DateRangeFilter.Between(x => x.CompleteTime, startDate, endDate)); \u6309\u5904\u4e8e\u67d0\u4e2a\u72b6\u6001\u7684\u5de5\u4f5c\u6d41\u8fdb\u884c\u7b5b\u9009 searchIndex.Search(\"\", 0, 10, StatusFilter.Equals(WorkflowStatus.Complete)); \u6839\u636e\u4f60\u81ea\u5df1\u7684\u81ea\u5b9a\u4e49\u6570\u636e\u7c7b\u8fdb\u884c\u7b5b\u9009 ``` class MyData { public string Value1 { get; set; } public int Value2 { get; set; } } searchIndex.Search(\"\", 0, 10, ScalarFilter.Equals (x => x.Value1, \"blue moon\")); searchIndex.Search(\"\", 0, 10, NumericRangeFilter.LessThan (x => x.Value2, 5)) ```","title":"\u8fc7\u6ee4\u5668"},{"location":"error-handling/","text":"\u9519\u8bef\u5904\u7406 \u6bcf\u4e2a\u6b65\u9aa4\u90fd\u53ef\u4ee5\u914d\u7f6e\u81ea\u5df1\u7684\u9519\u8bef\u5904\u7406\u884c\u4e3a\uff0c\u53ef\u4ee5\u5728\u7a0d\u540e\u91cd\u8bd5\uff0c\u6302\u8d77\u5de5\u4f5c\u6d41\u6216\u7ec8\u6b62\u5de5\u4f5c\u6d41\u3002 \u6d41\u7545\u7684 API public void Build(IWorkflowBuilder<object> builder) { builder .StartWith<HelloWorld>() .OnError(WorkflowErrorHandling.Retry, TimeSpan.FromMinutes(10)) .Then<GoodbyeWorld>(); } JSON/YAML API \u9519\u8bef\u884c\u4e3a { \"Id\": \"...\", \"StepType\": \"...\", \"ErrorBehavior\": \"Retry / Suspend / Terminate / Compensate\", \"RetryInterval\": \"00:10:00\" } Id: \"...\" StepType: \"...\" ErrorBehavior: Retry / Suspend / Terminate / Compensate RetryInterval: '00:10:00' \u5168\u5c40\u9519\u8bef\u5904\u7406 WorkflowHost \u670d\u52a1\u8fd8\u6709\u4e00\u4e2a .OnStepError \u4e8b\u4ef6\uff0c\u53ef\u7528\u4e8e\u5728\u66f4\u5168\u5c40\u7684\u7ea7\u522b\u4e0a\u62e6\u622a\u5de5\u4f5c\u6d41\u6b65\u9aa4\u4e2d\u7684\u5f02\u5e38\u3002","title":"Error handling"},{"location":"error-handling/#_1","text":"\u6bcf\u4e2a\u6b65\u9aa4\u90fd\u53ef\u4ee5\u914d\u7f6e\u81ea\u5df1\u7684\u9519\u8bef\u5904\u7406\u884c\u4e3a\uff0c\u53ef\u4ee5\u5728\u7a0d\u540e\u91cd\u8bd5\uff0c\u6302\u8d77\u5de5\u4f5c\u6d41\u6216\u7ec8\u6b62\u5de5\u4f5c\u6d41\u3002","title":"\u9519\u8bef\u5904\u7406"},{"location":"error-handling/#api","text":"public void Build(IWorkflowBuilder<object> builder) { builder .StartWith<HelloWorld>() .OnError(WorkflowErrorHandling.Retry, TimeSpan.FromMinutes(10)) .Then<GoodbyeWorld>(); }","title":"\u6d41\u7545\u7684 API"},{"location":"error-handling/#jsonyaml-api","text":"\u9519\u8bef\u884c\u4e3a { \"Id\": \"...\", \"StepType\": \"...\", \"ErrorBehavior\": \"Retry / Suspend / Terminate / Compensate\", \"RetryInterval\": \"00:10:00\" } Id: \"...\" StepType: \"...\" ErrorBehavior: Retry / Suspend / Terminate / Compensate RetryInterval: '00:10:00'","title":"JSON/YAML API"},{"location":"error-handling/#_2","text":"WorkflowHost \u670d\u52a1\u8fd8\u6709\u4e00\u4e2a .OnStepError \u4e8b\u4ef6\uff0c\u53ef\u7528\u4e8e\u5728\u66f4\u5168\u5c40\u7684\u7ea7\u522b\u4e0a\u62e6\u622a\u5de5\u4f5c\u6d41\u6b65\u9aa4\u4e2d\u7684\u5f02\u5e38\u3002","title":"\u5168\u5c40\u9519\u8bef\u5904\u7406"},{"location":"extensions/","text":"\u6269\u5c55 \u7528\u6237\uff08\u4eba\u5458\uff09\u5de5\u4f5c\u6d41","title":"Extensions"},{"location":"extensions/#_1","text":"\u7528\u6237\uff08\u4eba\u5458\uff09\u5de5\u4f5c\u6d41","title":"\u6269\u5c55"},{"location":"external-events/","text":"\u4e8b\u4ef6 \u5de5\u4f5c\u6d41\u4e5f\u53ef\u4ee5\u5728\u7ee7\u7eed\u4e4b\u524d\u7b49\u5f85\u5916\u90e8\u4e8b\u4ef6\u3002\u5728\u4ee5\u4e0b\u793a\u4f8b\u4e2d\uff0c\u5de5\u4f5c\u6d41\u5c06\u7b49\u5f85\u952e\u4e3a\u7684 0 \u8c03\u7528 \u201c\u6211\u7684\u4e8b\u4ef6\u201d \u4e8b\u4ef6\u3002\u5916\u90e8\u6e90\u89e6\u53d1\u6b64\u4e8b\u4ef6\u540e\uff0c\u5de5\u4f5c\u6d41\u5c06\u5524\u9192\u5e76\u7ee7\u7eed\u5904\u7406\uff0c\u5c06\u4e8b\u4ef6\u751f\u6210\u7684\u6570\u636e\u4f20\u9012\u5230\u4e0b\u4e00\u4e2a\u6b65\u9aa4\u3002 public class EventSampleWorkflow : IWorkflow<MyDataClass> { public void Build(IWorkflowBuilder<MyDataClass> builder) { builder .StartWith(context => ExecutionResult.Next()) .WaitFor(\"MyEvent\", data => \"0\") .Output(data => data.Value, step => step.EventData) .Then<CustomMessage>() .Input(step => step.Message, data => \"The data from the event is \" + data.Value); } } ... //External events are published via the host //All workflows that have subscribed to MyEvent 0, will be passed \"hello\" host.PublishEvent(\"MyEvent\", \"0\", \"hello\"); \u751f\u6548\u65e5\u671f \u4f60\u8fd8\u53ef\u4ee5\u5728\u7b49\u5f85\u4e8b\u4ef6\u65f6\u6307\u5b9a\u751f\u6548\u65e5\u671f\uff0c\u8fd9\u5141\u8bb8\u4f60\u54cd\u5e94\u8fc7\u53bb\u53ef\u80fd\u5df2\u53d1\u751f\u7684\u4e8b\u4ef6\uff0c\u6216\u4ec5\u54cd\u5e94\u751f\u6548\u65e5\u671f\u4e4b\u540e\u53d1\u751f\u7684\u4e8b\u4ef6\u3002 JSON/YAML API .WaitFor \u53ef\u4ee5\u4f7f\u7528\u4ee5\u4e0b\u8f93\u5165\u6765\u5b9e\u73b0 Field \u63cf\u8ff0 CancelCondition \u7528\u4e8e\u6307\u5b9a\u53d6\u6d88\u6761\u4ef6\u7684\u53ef\u9009\u8868\u8fbe\u5f0f Inputs.EventName \u8868\u8fbe\u5f0f\u6307\u5b9a\u4e8b\u4ef6\u540d\u79f0\u3002 Inputs.EventKey \u8868\u8fbe\u5f0f\u6307\u5b9a\u4e8b\u4ef6\u952e\u3002 Inputs.EffectiveDate \u7528\u4e8e\u6307\u5b9a\u751f\u6548\u65e5\u671f\u7684\u53ef\u9009\u8868\u8fbe\u5f0f { \"Id\": \"MyWaitStep\", \"StepType\": \"WorkflowCore.Primitives.WaitFor, WorkflowCore\", \"NextStepId\": \"...\", \"CancelCondition\": \"...\", \"Inputs\": { \"EventName\": \"\\\"Event1\\\"\", \"EventKey\": \"\\\"Key1\\\"\", \"EffectiveDate\": \"DateTime.Now\" } } Id: MyWaitStep StepType: WorkflowCore.Primitives.WaitFor, WorkflowCore NextStepId: \"...\" CancelCondition: \"...\" Inputs: EventName: '\"Event1\"' EventKey: '\"Key1\"' EffectiveDate: DateTime.Now","title":"External events"},{"location":"external-events/#_1","text":"\u5de5\u4f5c\u6d41\u4e5f\u53ef\u4ee5\u5728\u7ee7\u7eed\u4e4b\u524d\u7b49\u5f85\u5916\u90e8\u4e8b\u4ef6\u3002\u5728\u4ee5\u4e0b\u793a\u4f8b\u4e2d\uff0c\u5de5\u4f5c\u6d41\u5c06\u7b49\u5f85\u952e\u4e3a\u7684 0 \u8c03\u7528 \u201c\u6211\u7684\u4e8b\u4ef6\u201d \u4e8b\u4ef6\u3002\u5916\u90e8\u6e90\u89e6\u53d1\u6b64\u4e8b\u4ef6\u540e\uff0c\u5de5\u4f5c\u6d41\u5c06\u5524\u9192\u5e76\u7ee7\u7eed\u5904\u7406\uff0c\u5c06\u4e8b\u4ef6\u751f\u6210\u7684\u6570\u636e\u4f20\u9012\u5230\u4e0b\u4e00\u4e2a\u6b65\u9aa4\u3002 public class EventSampleWorkflow : IWorkflow<MyDataClass> { public void Build(IWorkflowBuilder<MyDataClass> builder) { builder .StartWith(context => ExecutionResult.Next()) .WaitFor(\"MyEvent\", data => \"0\") .Output(data => data.Value, step => step.EventData) .Then<CustomMessage>() .Input(step => step.Message, data => \"The data from the event is \" + data.Value); } } ... //External events are published via the host //All workflows that have subscribed to MyEvent 0, will be passed \"hello\" host.PublishEvent(\"MyEvent\", \"0\", \"hello\");","title":"\u4e8b\u4ef6"},{"location":"external-events/#_2","text":"\u4f60\u8fd8\u53ef\u4ee5\u5728\u7b49\u5f85\u4e8b\u4ef6\u65f6\u6307\u5b9a\u751f\u6548\u65e5\u671f\uff0c\u8fd9\u5141\u8bb8\u4f60\u54cd\u5e94\u8fc7\u53bb\u53ef\u80fd\u5df2\u53d1\u751f\u7684\u4e8b\u4ef6\uff0c\u6216\u4ec5\u54cd\u5e94\u751f\u6548\u65e5\u671f\u4e4b\u540e\u53d1\u751f\u7684\u4e8b\u4ef6\u3002","title":"\u751f\u6548\u65e5\u671f"},{"location":"external-events/#jsonyaml-api","text":".WaitFor \u53ef\u4ee5\u4f7f\u7528\u4ee5\u4e0b\u8f93\u5165\u6765\u5b9e\u73b0 Field \u63cf\u8ff0 CancelCondition \u7528\u4e8e\u6307\u5b9a\u53d6\u6d88\u6761\u4ef6\u7684\u53ef\u9009\u8868\u8fbe\u5f0f Inputs.EventName \u8868\u8fbe\u5f0f\u6307\u5b9a\u4e8b\u4ef6\u540d\u79f0\u3002 Inputs.EventKey \u8868\u8fbe\u5f0f\u6307\u5b9a\u4e8b\u4ef6\u952e\u3002 Inputs.EffectiveDate \u7528\u4e8e\u6307\u5b9a\u751f\u6548\u65e5\u671f\u7684\u53ef\u9009\u8868\u8fbe\u5f0f { \"Id\": \"MyWaitStep\", \"StepType\": \"WorkflowCore.Primitives.WaitFor, WorkflowCore\", \"NextStepId\": \"...\", \"CancelCondition\": \"...\", \"Inputs\": { \"EventName\": \"\\\"Event1\\\"\", \"EventKey\": \"\\\"Key1\\\"\", \"EffectiveDate\": \"DateTime.Now\" } } Id: MyWaitStep StepType: WorkflowCore.Primitives.WaitFor, WorkflowCore NextStepId: \"...\" CancelCondition: \"...\" Inputs: EventName: '\"Event1\"' EventKey: '\"Key1\"' EffectiveDate: DateTime.Now","title":"JSON/YAML API"},{"location":"getting-started/","text":"\u57fa\u672c\u6982\u5ff5 \u53f0\u9636 \u5de5\u4f5c\u6d41\u7531\u4e00\u7cfb\u5217\u76f8\u4e92\u8fde\u63a5\u7684\u6b65\u9aa4\u7ec4\u6210\u3002\u6bcf\u4e2a\u6b65\u9aa4\u90fd\u53ef\u4ee5\u5177\u6709\u8f93\u5165\u5e76\u4ea7\u751f\u8f93\u51fa\uff0c\u8fd9\u4e9b\u8f93\u51fa\u53ef\u4ee5\u4f20\u9012\u56de\u5176\u6240\u5728\u7684\u5de5\u4f5c\u6d41\u3002 \u901a\u8fc7\u521b\u5efa\u4ece\u6216 StepBodyAsync \u62bd\u8c61\u7c7b\u7ee7\u627f\u7684 StepBody \u7c7b\u5e76\u5b9e\u73b0 Run/RunAsync \u65b9\u6cd5\u6765\u5b9a\u4e49\u6b65\u9aa4\u3002\u5b83\u4eec\u4e5f\u53ef\u4ee5\u5728\u5b9a\u4e49\u5de5\u4f5c\u6d41\u7ed3\u6784\u65f6\u4ee5\u5185\u8054\u65b9\u5f0f\u521b\u5efa\u3002 \u9996\u5148\uff0c\u6211\u4eec\u5b9a\u4e49\u4e00\u4e9b\u6b65\u9aa4\u3002 public class HelloWorld : StepBody { public override ExecutionResult Run(IStepExecutionContext context) { Console.WriteLine(\"Hello world\"); return ExecutionResult.Next(); } } StepBody \u548c StepBodyAsync \u7c7b\u5b9e\u73b0\u662f\u7531\u5de5\u4f5c\u6d41\u4e3b\u673a\u6784\u9020\u7684\uff0c\u5b83\u9996\u5148\u5c1d\u8bd5\u4f7f\u7528 IServiceProvider \u8fdb\u884c\u4f9d\u8d56\u6ce8\u5165\uff0c\u5982\u679c\u5b83\u4e0d\u80fd\u4f7f\u7528\u6b64\u65b9\u6cd5\u6784\u9020\u5b83\uff0c\u5b83\u5c06\u641c\u7d22\u65e0\u53c2\u6570\u6784\u9020\u51fd\u6570 * \u7136\u540e\uff0c\u6211\u4eec\u901a\u8fc7\u7ec4\u5408\u4e00\u7cfb\u5217\u6b65\u9aa4\u6765\u5b9a\u4e49\u5de5\u4f5c\u6d41\u7ed3\u6784\u3002\u8fd9\u662f\u901a\u8fc7\u5b9e\u73b0 IWorkflow \u63a5\u53e3\u6765\u5b8c\u6210\u7684\u3002 public class HelloWorldWorkflow : IWorkflow { public string Id => \"HelloWorld\"; public int Version => 1; public void Build(IWorkflowBuilder<object> builder) { builder .StartWith<HelloWorld>() .Then<GoodbyeWorld>(); } } \u8be5 iWorkflow \u63a5\u53e3\u8fd8\u5177\u6709\u53ea\u8bfb ID \u5c5e\u6027\u548c\u53ea\u8bfb\u7248\u672c\u5c5e\u6027\u3002\u5de5\u4f5c\u6d41\u4e3b\u673a\u4f7f\u7528\u5b83\u4eec\u6765\u6807\u8bc6\u5de5\u4f5c\u6d41\u5b9a\u4e49\u3002 \u5728 JSON \u4e2d\u5b9e\u73b0\u7684\u5de5\u4f5c\u6d41\u5982\u4e0b\u6240\u793a { \"Id\": \"HelloWorld\", \"Version\": 1, \"Steps\": [ { \"Id\": \"Hello\", \"StepType\": \"MyApp.HelloWorld, MyApp\", \"NextStepId\": \"Bye\" }, { \"Id\": \"Bye\", \"StepType\": \"MyApp.GoodbyeWorld, MyApp\" } ] } \u4f60\u8fd8\u53ef\u4ee5\u5185\u8054\u5b9a\u4e49\u6b65\u9aa4\u3002 public class HelloWorldWorkflow : IWorkflow { public string Id => \"HelloWorld\"; public int Version => 1; public void Build(IWorkflowBuilder<object> builder) { builder .StartWith(context => { Console.WriteLine(\"Hello world\"); return ExecutionResult.Next(); }) .Then(context => { Console.WriteLine(\"Goodbye world\"); return ExecutionResult.Next(); }); } } \u5728\u6bcf\u4e2a\u6b65\u9aa4\u4e4b\u95f4\uff0c\u6bcf\u4e2a\u6b63\u5728\u8fd0\u884c\u7684\u5de5\u4f5c\u6d41\u90fd\u4f1a\u4fdd\u5b58\u5230\u9009\u5b9a\u7684\u6301\u4e45\u6027\u63d0\u4f9b\u7a0b\u5e8f\u4e2d\uff0c\u53ef\u4ee5\u5728\u4ee5\u540e\u7684\u67d0\u4e2a\u65f6\u95f4\u70b9\u62fe\u53d6\u5b83\u4ee5\u7ee7\u7eed\u6267\u884c\u3002\u6b65\u9aa4\u7684\u7ed3\u679c\u53ef\u4ee5\u6307\u793a\u5de5\u4f5c\u6d41\u4e3b\u673a\u5c06\u5de5\u4f5c\u6d41\u7684\u8fdb\u4e00\u6b65\u6267\u884c\u63a8\u8fdf\u5230\u5c06\u6765\u7684\u67d0\u4e2a\u65f6\u95f4\u70b9\u6216\u54cd\u5e94\u5916\u90e8\u4e8b\u4ef6\u3002 \u4e3b\u6301\u4eba \u5de5\u4f5c\u6d41\u4e3b\u673a\u662f\u8d1f\u8d23\u6267\u884c\u5de5\u4f5c\u6d41\u7684\u670d\u52a1\u3002\u5b83\u901a\u8fc7\u5728\u6301\u4e45\u6027\u63d0\u4f9b\u8005\u4e2d\u8f6e\u8be2\u51c6\u5907\u8fd0\u884c\u7684\u5de5\u4f5c\u6d41\u5b9e\u4f8b\uff0c\u6267\u884c\u5b83\u4eec\uff0c\u7136\u540e\u5c06\u5b83\u4eec\u4f20\u9012\u56de\u6301\u4e45\u6027\u63d0\u4f9b\u8005\u5e76\u5b58\u50a8\u8d77\u6765\uff0c\u4ee5\u5907\u4e0b\u6b21\u8fd0\u884c\u3002\u5b83\u8fd8\u8d1f\u8d23\u5c06\u4e8b\u4ef6\u53d1\u5e03\u5230\u53ef\u80fd\u6b63\u5728\u7b49\u5f85\u7684\u4efb\u4f55\u5de5\u4f5c\u6d41\u3002 \u8bbe\u7f6e \u4f7f\u7528\u7684 \u6dfb\u52a0\u5de5\u4f5c\u6d41 \u6269\u5c55\u65b9\u6cd5 IServiceCollection \u53ef\u4ee5\u5728\u542f\u52a8\u5e94\u7528\u7a0b\u5e8f\u65f6\u914d\u7f6e\u5de5\u4f5c\u6d41\u4e3b\u673a\u3002\u9ed8\u8ba4\u60c5\u51b5\u4e0b\uff0c\u4f7f\u7528 \u5185\u5b58\u6301\u4e45\u6027\u63d0\u4f9b\u7a0b\u5e8f \u548c SingleNodeConcurrencyProvider \u914d\u7f6e\u5b83\u4ee5\u8fdb\u884c\u6d4b\u8bd5\u3002\u4f60\u8fd8\u53ef\u4ee5\u5728\u6b64\u65f6\u914d\u7f6e\u6570\u636e\u5e93\u6301\u4e45\u6027\u63d0\u4f9b\u7a0b\u5e8f\u3002 services.AddWorkflow(); \u7528\u6cd5 \u5f53\u4f60\u7684\u5e94\u7528\u7a0b\u5e8f\u542f\u52a8\u65f6\uff0c\u4ece\u5185\u7f6e\u7684\u4f9d\u8d56\u6ce8\u5165\u6846\u67b6 IServiceProvider \u4e2d\u83b7\u53d6\u5de5\u4f5c\u6d41\u4e3b\u673a\u3002\u8bf7\u786e\u4fdd\u8c03\u7528 \u6ce8\u518c\u5de5\u4f5c\u6d41 \uff0c\u4ee5\u4fbf\u5de5\u4f5c\u6d41\u4e3b\u673a\u4e86\u89e3\u4f60\u7684\u6240\u6709\u5de5\u4f5c\u6d41\uff0c\u7136\u540e\u8c03\u7528 \u5f00\u59cb\uff08\uff09 \u4ee5\u542f\u52a8\u6267\u884c\u5de5\u4f5c\u6d41\u7684\u7ebf\u7a0b\u6c60\u3002\u4f7f\u7528\u8be5 \u5f00\u59cb\u5de5\u4f5c\u6d41 \u65b9\u6cd5\u53ef\u4ee5\u542f\u52a8\u7279\u5b9a\u5de5\u4f5c\u6d41\u7684\u65b0\u5b9e\u4f8b\u3002 var host = serviceProvider.GetService<IWorkflowHost>(); host.RegisterWorkflow<HelloWorldWorkflow>(); host.Start(); host.StartWorkflow(\"HelloWorld\", 1, null); Console.ReadLine(); host.Stop(); \u5728\u6b65\u9aa4\u4e4b\u95f4\u4f20\u9012\u6570\u636e \u6bcf\u4e2a\u6b65\u9aa4\u90fd\u662f\u4e00\u4e2a\u9ed1\u7bb1\uff0c\u56e0\u6b64\u5b83\u4eec\u652f\u6301\u8f93\u5165\u548c\u8f93\u51fa\u3002\u8fd9\u4e9b\u8f93\u5165\u548c\u8f93\u51fa\u53ef\u4ee5\u6620\u5c04\u5230\u5b9a\u4e49\u4e0e\u6bcf\u4e2a\u5de5\u4f5c\u6d41\u5b9e\u4f8b\u76f8\u5173\u7684\u81ea\u5b9a\u4e49\u6570\u636e\u7684\u6570\u636e\u7c7b\u3002 \u4ee5\u4e0b\u793a\u4f8b\u8bf4\u660e\u5982\u4f55\u5728\u6b65\u9aa4\u4e0a\u5b9a\u4e49\u8f93\u5165\u548c\u8f93\u51fa\uff0c\u7136\u540e\u8bf4\u660e\u5982\u4f55\u4f7f\u7528\u5185\u90e8\u6570\u636e\u7684\u7c7b\u578b\u5316\u7c7b\u5b9a\u4e49\u5de5\u4f5c\u6d41\uff0c\u4ee5\u53ca\u5982\u4f55\u5c06\u8f93\u5165\u548c\u8f93\u51fa\u6620\u5c04\u5230\u81ea\u5b9a\u4e49\u6570\u636e\u7c7b\u4e0a\u7684\u5c5e\u6027\u3002 //Our workflow step with inputs and outputs public class AddNumbers : StepBody { public int Input1 { get; set; } public int Input2 { get; set; } public int Output { get; set; } public override ExecutionResult Run(IStepExecutionContext context) { Output = (Input1 + Input2); return ExecutionResult.Next(); } } //Our class to define the internal data of our workflow public class MyDataClass { public int Value1 { get; set; } public int Value2 { get; set; } public int Answer { get; set; } } //Our workflow definition with strongly typed internal data and mapped inputs & outputs public class PassingDataWorkflow : IWorkflow<MyDataClass> { public void Build(IWorkflowBuilder<MyDataClass> builder) { builder .StartWith<AddNumbers>() .Input(step => step.Input1, data => data.Value1) .Input(step => step.Input2, data => data.Value2) .Output(data => data.Answer, step => step.Output) .Then<CustomMessage>() .Input(step => step.Message, data => \"The answer is \" + data.Answer.ToString()); } ... } \u6216 JSON \u683c\u5f0f { \"Id\": \"AddWorkflow\", \"Version\": 1, \"DataType\": \"MyApp.MyDataClass, MyApp\", \"Steps\": [ { \"Id\": \"Add\", \"StepType\": \"MyApp.AddNumbers, MyApp\", \"NextStepId\": \"ShowResult\", \"Inputs\": { \"Input1\": \"data.Value1\", \"Input2\": \"data.Value2\" }, \"Outputs\": { \"Answer\": \"step.Output\" } }, { \"Id\": \"ShowResult\", \"StepType\": \"MyApp.CustomMessage, MyApp\", \"Inputs\": { \"Message\": \"\\\"The answer is \\\" + data.Answer\" } } ] } \u6216 YAML \u683c\u5f0f Id: AddWorkflow Version: 1 DataType: MyApp.MyDataClass, MyApp Steps: - Id: Add StepType: MyApp.AddNumbers, MyApp NextStepId: ShowResult Inputs: Input1: data.Value1 Input2: data.Value2 Outputs: Answer: step.Output - Id: ShowResult StepType: MyApp.CustomMessage, MyApp Inputs: Message: '\"The answer is \" + data.Answer' \u5c06\u4f9d\u8d56\u9879\u6ce8\u5165\u6b65\u9aa4 \u5982\u679c\u4f60\u5411 IOC \u5bb9\u5668\u6ce8\u518c\u6b65\u9aa4\u7c7b\uff0c\u5219\u5de5\u4f5c\u6d41\u5bbf\u4e3b\u5c06\u4f7f\u7528 IOC \u5bb9\u5668\u6765\u6784\u9020\u5b83\u4eec\uff0c\u5e76\u56e0\u6b64\u6ce8\u5165\u4efb\u4f55\u6240\u9700\u7684\u4f9d\u8d56\u9879\u3002\u6b64\u793a\u4f8b\u8bf4\u660e\u4e86\u5bf9\u5de5\u4f5c\u6d41\u6b65\u9aa4\u4f7f\u7528\u4f9d\u8d56\u9879\u6ce8\u5165\u3002 \u8003\u8651\u4ee5\u4e0b\u670d\u52a1 public interface IMyService { void DoTheThings(); } ... public class MyService : IMyService { public void DoTheThings() { Console.WriteLine(\"Doing stuff...\"); } } \u7531\u5de5\u4f5c\u6d41\u6b65\u9aa4\u4f7f\u7528\uff0c\u5982\u4e0b\u6240\u793a public class DoSomething : StepBody { private IMyService _myService; public DoSomething(IMyService myService) { _myService = myService; } public override ExecutionResult Run(IStepExecutionContext context) { _myService.DoTheThings(); return ExecutionResult.Next(); } } \u5728\u8bbe\u7f6e IOC \u5bb9\u5668\u65f6\uff0c\u53ea\u9700\u5c06\u670d\u52a1\u548c\u5de5\u4f5c\u6d41\u6b65\u9aa4\u4f5c\u4e3a\u77ac\u6001\u6dfb\u52a0\u5230\u670d\u52a1\u96c6\u5408\u4e2d\u3002\uff08\u907f\u514d\u5c06\u6b65\u9aa4\u6ce8\u518c\u4e3a\u5355\u4f8b\uff0c\u56e0\u4e3a\u591a\u4e2a\u5e76\u53d1\u5de5\u4f5c\u6d41\u53ef\u80fd\u9700\u8981\u540c\u65f6\u4f7f\u7528\u5b83\u4eec\u3002\uff09 IServiceCollection services = new ServiceCollection(); services.AddLogging(); services.AddWorkflow(); services.AddTransient<DoSomething>(); services.AddTransient<IMyService, MyService>();","title":"Getting started"},{"location":"getting-started/#_1","text":"","title":"\u57fa\u672c\u6982\u5ff5"},{"location":"getting-started/#_2","text":"\u5de5\u4f5c\u6d41\u7531\u4e00\u7cfb\u5217\u76f8\u4e92\u8fde\u63a5\u7684\u6b65\u9aa4\u7ec4\u6210\u3002\u6bcf\u4e2a\u6b65\u9aa4\u90fd\u53ef\u4ee5\u5177\u6709\u8f93\u5165\u5e76\u4ea7\u751f\u8f93\u51fa\uff0c\u8fd9\u4e9b\u8f93\u51fa\u53ef\u4ee5\u4f20\u9012\u56de\u5176\u6240\u5728\u7684\u5de5\u4f5c\u6d41\u3002 \u901a\u8fc7\u521b\u5efa\u4ece\u6216 StepBodyAsync \u62bd\u8c61\u7c7b\u7ee7\u627f\u7684 StepBody \u7c7b\u5e76\u5b9e\u73b0 Run/RunAsync \u65b9\u6cd5\u6765\u5b9a\u4e49\u6b65\u9aa4\u3002\u5b83\u4eec\u4e5f\u53ef\u4ee5\u5728\u5b9a\u4e49\u5de5\u4f5c\u6d41\u7ed3\u6784\u65f6\u4ee5\u5185\u8054\u65b9\u5f0f\u521b\u5efa\u3002","title":"\u53f0\u9636"},{"location":"getting-started/#_3","text":"public class HelloWorld : StepBody { public override ExecutionResult Run(IStepExecutionContext context) { Console.WriteLine(\"Hello world\"); return ExecutionResult.Next(); } } StepBody \u548c StepBodyAsync \u7c7b\u5b9e\u73b0\u662f\u7531\u5de5\u4f5c\u6d41\u4e3b\u673a\u6784\u9020\u7684\uff0c\u5b83\u9996\u5148\u5c1d\u8bd5\u4f7f\u7528 IServiceProvider \u8fdb\u884c\u4f9d\u8d56\u6ce8\u5165\uff0c\u5982\u679c\u5b83\u4e0d\u80fd\u4f7f\u7528\u6b64\u65b9\u6cd5\u6784\u9020\u5b83\uff0c\u5b83\u5c06\u641c\u7d22\u65e0\u53c2\u6570\u6784\u9020\u51fd\u6570 *","title":"\u9996\u5148\uff0c\u6211\u4eec\u5b9a\u4e49\u4e00\u4e9b\u6b65\u9aa4\u3002"},{"location":"getting-started/#iworkflow","text":"public class HelloWorldWorkflow : IWorkflow { public string Id => \"HelloWorld\"; public int Version => 1; public void Build(IWorkflowBuilder<object> builder) { builder .StartWith<HelloWorld>() .Then<GoodbyeWorld>(); } } \u8be5 iWorkflow \u63a5\u53e3\u8fd8\u5177\u6709\u53ea\u8bfb ID \u5c5e\u6027\u548c\u53ea\u8bfb\u7248\u672c\u5c5e\u6027\u3002\u5de5\u4f5c\u6d41\u4e3b\u673a\u4f7f\u7528\u5b83\u4eec\u6765\u6807\u8bc6\u5de5\u4f5c\u6d41\u5b9a\u4e49\u3002 \u5728 JSON \u4e2d\u5b9e\u73b0\u7684\u5de5\u4f5c\u6d41\u5982\u4e0b\u6240\u793a { \"Id\": \"HelloWorld\", \"Version\": 1, \"Steps\": [ { \"Id\": \"Hello\", \"StepType\": \"MyApp.HelloWorld, MyApp\", \"NextStepId\": \"Bye\" }, { \"Id\": \"Bye\", \"StepType\": \"MyApp.GoodbyeWorld, MyApp\" } ] }","title":"\u7136\u540e\uff0c\u6211\u4eec\u901a\u8fc7\u7ec4\u5408\u4e00\u7cfb\u5217\u6b65\u9aa4\u6765\u5b9a\u4e49\u5de5\u4f5c\u6d41\u7ed3\u6784\u3002\u8fd9\u662f\u901a\u8fc7\u5b9e\u73b0 IWorkflow \u63a5\u53e3\u6765\u5b8c\u6210\u7684\u3002"},{"location":"getting-started/#_4","text":"public class HelloWorldWorkflow : IWorkflow { public string Id => \"HelloWorld\"; public int Version => 1; public void Build(IWorkflowBuilder<object> builder) { builder .StartWith(context => { Console.WriteLine(\"Hello world\"); return ExecutionResult.Next(); }) .Then(context => { Console.WriteLine(\"Goodbye world\"); return ExecutionResult.Next(); }); } } \u5728\u6bcf\u4e2a\u6b65\u9aa4\u4e4b\u95f4\uff0c\u6bcf\u4e2a\u6b63\u5728\u8fd0\u884c\u7684\u5de5\u4f5c\u6d41\u90fd\u4f1a\u4fdd\u5b58\u5230\u9009\u5b9a\u7684\u6301\u4e45\u6027\u63d0\u4f9b\u7a0b\u5e8f\u4e2d\uff0c\u53ef\u4ee5\u5728\u4ee5\u540e\u7684\u67d0\u4e2a\u65f6\u95f4\u70b9\u62fe\u53d6\u5b83\u4ee5\u7ee7\u7eed\u6267\u884c\u3002\u6b65\u9aa4\u7684\u7ed3\u679c\u53ef\u4ee5\u6307\u793a\u5de5\u4f5c\u6d41\u4e3b\u673a\u5c06\u5de5\u4f5c\u6d41\u7684\u8fdb\u4e00\u6b65\u6267\u884c\u63a8\u8fdf\u5230\u5c06\u6765\u7684\u67d0\u4e2a\u65f6\u95f4\u70b9\u6216\u54cd\u5e94\u5916\u90e8\u4e8b\u4ef6\u3002","title":"\u4f60\u8fd8\u53ef\u4ee5\u5185\u8054\u5b9a\u4e49\u6b65\u9aa4\u3002"},{"location":"getting-started/#_5","text":"\u5de5\u4f5c\u6d41\u4e3b\u673a\u662f\u8d1f\u8d23\u6267\u884c\u5de5\u4f5c\u6d41\u7684\u670d\u52a1\u3002\u5b83\u901a\u8fc7\u5728\u6301\u4e45\u6027\u63d0\u4f9b\u8005\u4e2d\u8f6e\u8be2\u51c6\u5907\u8fd0\u884c\u7684\u5de5\u4f5c\u6d41\u5b9e\u4f8b\uff0c\u6267\u884c\u5b83\u4eec\uff0c\u7136\u540e\u5c06\u5b83\u4eec\u4f20\u9012\u56de\u6301\u4e45\u6027\u63d0\u4f9b\u8005\u5e76\u5b58\u50a8\u8d77\u6765\uff0c\u4ee5\u5907\u4e0b\u6b21\u8fd0\u884c\u3002\u5b83\u8fd8\u8d1f\u8d23\u5c06\u4e8b\u4ef6\u53d1\u5e03\u5230\u53ef\u80fd\u6b63\u5728\u7b49\u5f85\u7684\u4efb\u4f55\u5de5\u4f5c\u6d41\u3002","title":"\u4e3b\u6301\u4eba"},{"location":"getting-started/#_6","text":"\u4f7f\u7528\u7684 \u6dfb\u52a0\u5de5\u4f5c\u6d41 \u6269\u5c55\u65b9\u6cd5 IServiceCollection \u53ef\u4ee5\u5728\u542f\u52a8\u5e94\u7528\u7a0b\u5e8f\u65f6\u914d\u7f6e\u5de5\u4f5c\u6d41\u4e3b\u673a\u3002\u9ed8\u8ba4\u60c5\u51b5\u4e0b\uff0c\u4f7f\u7528 \u5185\u5b58\u6301\u4e45\u6027\u63d0\u4f9b\u7a0b\u5e8f \u548c SingleNodeConcurrencyProvider \u914d\u7f6e\u5b83\u4ee5\u8fdb\u884c\u6d4b\u8bd5\u3002\u4f60\u8fd8\u53ef\u4ee5\u5728\u6b64\u65f6\u914d\u7f6e\u6570\u636e\u5e93\u6301\u4e45\u6027\u63d0\u4f9b\u7a0b\u5e8f\u3002 services.AddWorkflow();","title":"\u8bbe\u7f6e"},{"location":"getting-started/#_7","text":"\u5f53\u4f60\u7684\u5e94\u7528\u7a0b\u5e8f\u542f\u52a8\u65f6\uff0c\u4ece\u5185\u7f6e\u7684\u4f9d\u8d56\u6ce8\u5165\u6846\u67b6 IServiceProvider \u4e2d\u83b7\u53d6\u5de5\u4f5c\u6d41\u4e3b\u673a\u3002\u8bf7\u786e\u4fdd\u8c03\u7528 \u6ce8\u518c\u5de5\u4f5c\u6d41 \uff0c\u4ee5\u4fbf\u5de5\u4f5c\u6d41\u4e3b\u673a\u4e86\u89e3\u4f60\u7684\u6240\u6709\u5de5\u4f5c\u6d41\uff0c\u7136\u540e\u8c03\u7528 \u5f00\u59cb\uff08\uff09 \u4ee5\u542f\u52a8\u6267\u884c\u5de5\u4f5c\u6d41\u7684\u7ebf\u7a0b\u6c60\u3002\u4f7f\u7528\u8be5 \u5f00\u59cb\u5de5\u4f5c\u6d41 \u65b9\u6cd5\u53ef\u4ee5\u542f\u52a8\u7279\u5b9a\u5de5\u4f5c\u6d41\u7684\u65b0\u5b9e\u4f8b\u3002 var host = serviceProvider.GetService<IWorkflowHost>(); host.RegisterWorkflow<HelloWorldWorkflow>(); host.Start(); host.StartWorkflow(\"HelloWorld\", 1, null); Console.ReadLine(); host.Stop();","title":"\u7528\u6cd5"},{"location":"getting-started/#_8","text":"\u6bcf\u4e2a\u6b65\u9aa4\u90fd\u662f\u4e00\u4e2a\u9ed1\u7bb1\uff0c\u56e0\u6b64\u5b83\u4eec\u652f\u6301\u8f93\u5165\u548c\u8f93\u51fa\u3002\u8fd9\u4e9b\u8f93\u5165\u548c\u8f93\u51fa\u53ef\u4ee5\u6620\u5c04\u5230\u5b9a\u4e49\u4e0e\u6bcf\u4e2a\u5de5\u4f5c\u6d41\u5b9e\u4f8b\u76f8\u5173\u7684\u81ea\u5b9a\u4e49\u6570\u636e\u7684\u6570\u636e\u7c7b\u3002 \u4ee5\u4e0b\u793a\u4f8b\u8bf4\u660e\u5982\u4f55\u5728\u6b65\u9aa4\u4e0a\u5b9a\u4e49\u8f93\u5165\u548c\u8f93\u51fa\uff0c\u7136\u540e\u8bf4\u660e\u5982\u4f55\u4f7f\u7528\u5185\u90e8\u6570\u636e\u7684\u7c7b\u578b\u5316\u7c7b\u5b9a\u4e49\u5de5\u4f5c\u6d41\uff0c\u4ee5\u53ca\u5982\u4f55\u5c06\u8f93\u5165\u548c\u8f93\u51fa\u6620\u5c04\u5230\u81ea\u5b9a\u4e49\u6570\u636e\u7c7b\u4e0a\u7684\u5c5e\u6027\u3002 //Our workflow step with inputs and outputs public class AddNumbers : StepBody { public int Input1 { get; set; } public int Input2 { get; set; } public int Output { get; set; } public override ExecutionResult Run(IStepExecutionContext context) { Output = (Input1 + Input2); return ExecutionResult.Next(); } } //Our class to define the internal data of our workflow public class MyDataClass { public int Value1 { get; set; } public int Value2 { get; set; } public int Answer { get; set; } } //Our workflow definition with strongly typed internal data and mapped inputs & outputs public class PassingDataWorkflow : IWorkflow<MyDataClass> { public void Build(IWorkflowBuilder<MyDataClass> builder) { builder .StartWith<AddNumbers>() .Input(step => step.Input1, data => data.Value1) .Input(step => step.Input2, data => data.Value2) .Output(data => data.Answer, step => step.Output) .Then<CustomMessage>() .Input(step => step.Message, data => \"The answer is \" + data.Answer.ToString()); } ... } \u6216 JSON \u683c\u5f0f { \"Id\": \"AddWorkflow\", \"Version\": 1, \"DataType\": \"MyApp.MyDataClass, MyApp\", \"Steps\": [ { \"Id\": \"Add\", \"StepType\": \"MyApp.AddNumbers, MyApp\", \"NextStepId\": \"ShowResult\", \"Inputs\": { \"Input1\": \"data.Value1\", \"Input2\": \"data.Value2\" }, \"Outputs\": { \"Answer\": \"step.Output\" } }, { \"Id\": \"ShowResult\", \"StepType\": \"MyApp.CustomMessage, MyApp\", \"Inputs\": { \"Message\": \"\\\"The answer is \\\" + data.Answer\" } } ] } \u6216 YAML \u683c\u5f0f Id: AddWorkflow Version: 1 DataType: MyApp.MyDataClass, MyApp Steps: - Id: Add StepType: MyApp.AddNumbers, MyApp NextStepId: ShowResult Inputs: Input1: data.Value1 Input2: data.Value2 Outputs: Answer: step.Output - Id: ShowResult StepType: MyApp.CustomMessage, MyApp Inputs: Message: '\"The answer is \" + data.Answer'","title":"\u5728\u6b65\u9aa4\u4e4b\u95f4\u4f20\u9012\u6570\u636e"},{"location":"getting-started/#_9","text":"\u5982\u679c\u4f60\u5411 IOC \u5bb9\u5668\u6ce8\u518c\u6b65\u9aa4\u7c7b\uff0c\u5219\u5de5\u4f5c\u6d41\u5bbf\u4e3b\u5c06\u4f7f\u7528 IOC \u5bb9\u5668\u6765\u6784\u9020\u5b83\u4eec\uff0c\u5e76\u56e0\u6b64\u6ce8\u5165\u4efb\u4f55\u6240\u9700\u7684\u4f9d\u8d56\u9879\u3002\u6b64\u793a\u4f8b\u8bf4\u660e\u4e86\u5bf9\u5de5\u4f5c\u6d41\u6b65\u9aa4\u4f7f\u7528\u4f9d\u8d56\u9879\u6ce8\u5165\u3002 \u8003\u8651\u4ee5\u4e0b\u670d\u52a1 public interface IMyService { void DoTheThings(); } ... public class MyService : IMyService { public void DoTheThings() { Console.WriteLine(\"Doing stuff...\"); } } \u7531\u5de5\u4f5c\u6d41\u6b65\u9aa4\u4f7f\u7528\uff0c\u5982\u4e0b\u6240\u793a public class DoSomething : StepBody { private IMyService _myService; public DoSomething(IMyService myService) { _myService = myService; } public override ExecutionResult Run(IStepExecutionContext context) { _myService.DoTheThings(); return ExecutionResult.Next(); } } \u5728\u8bbe\u7f6e IOC \u5bb9\u5668\u65f6\uff0c\u53ea\u9700\u5c06\u670d\u52a1\u548c\u5de5\u4f5c\u6d41\u6b65\u9aa4\u4f5c\u4e3a\u77ac\u6001\u6dfb\u52a0\u5230\u670d\u52a1\u96c6\u5408\u4e2d\u3002\uff08\u907f\u514d\u5c06\u6b65\u9aa4\u6ce8\u518c\u4e3a\u5355\u4f8b\uff0c\u56e0\u4e3a\u591a\u4e2a\u5e76\u53d1\u5de5\u4f5c\u6d41\u53ef\u80fd\u9700\u8981\u540c\u65f6\u4f7f\u7528\u5b83\u4eec\u3002\uff09 IServiceCollection services = new ServiceCollection(); services.AddLogging(); services.AddWorkflow(); services.AddTransient<DoSomething>(); services.AddTransient<IMyService, MyService>();","title":"\u5c06\u4f9d\u8d56\u9879\u6ce8\u5165\u6b65\u9aa4"},{"location":"json-yaml/","text":"\u4ece JSON \u6216 YAML \u52a0\u8f7d\u5de5\u4f5c\u6d41\u5b9a\u4e49 \u4ece NuGet \u5b89\u88c5 WorkflowCore.DSL \u8f6f\u4ef6\u5305\u5e76\u8c03\u7528 AddWorkflowDSL \u4f60\u7684\u670d\u52a1\u96c6\u5408\u3002\u7136\u540e\u4ece IOC \u5bb9\u5668\u4e2d\u83b7\u53d6 DefinitionLoader \u5e76\u8c03\u7528\u8be5 .LoadDefinition \u65b9\u6cd5 using WorkflowCore.Interface; ... var loader = serviceProvider.GetService<IDefinitionLoader>(); loader.LoadDefinition(\"<<json or yaml string here>>\", Deserializers.Json); \u516c\u5171 DSL JSON \u548c YAML \u683c\u5f0f\u90fd\u9075\u5faa\u901a\u7528\u7684 DSL\uff0c\u5176\u4e2d\u5de5\u4f5c\u6d41\u4e2d\u7684\u6b65\u9aa4\u7c7b\u578b\u7531\u5b8c\u5168\u9650\u5b9a\u7684\u7c7b\u540d\u5f15\u7528\u3002\u5185\u7f6e\u6b65\u9aa4\u7c7b\u578b\u901a\u5e38\u4f4d\u4e8e WorklfowCore.Primitives \u547d\u540d\u7a7a\u95f4\u4e2d\u3002 Field \u63cf\u8ff0 Id \u5de5\u4f5c\u6d41\u5b9a\u4e49 ID Version \u5de5\u4f5c\u6d41\u5b9a\u4e49\u7248\u672c DataType \u81ea\u5b9a\u4e49\u6570\u636e\u5bf9\u8c61\u7684\u5b8c\u5168\u9650\u5b9a\u7a0b\u5e8f\u96c6\u7c7b\u540d Steps[].Id \u6b65\u9aa4 ID\uff08\u6bcf\u4e2a\u6b65\u9aa4\u6240\u9700\u7684\u552f\u4e00\u952e\uff09 Steps[].StepType \u6b65\u9aa4\u7684\u5b8c\u5168\u9650\u5b9a\u7a0b\u5e8f\u96c6\u7c7b\u540d\u79f0 Steps[].NextStepId \u6b64\u6b65\u9aa4\u5b8c\u6210\u540e\u7684\u4e0b\u4e00\u6b65\u9aa4\u7684\u6b65\u9aa4 ID Steps[].Inputs \u6b65\u9aa4\u8f93\u5165\u7684\u53ef\u9009\u952e/\u503c\u5bf9 Steps[].Outputs \u9636\u8dc3\u8f93\u51fa\u7684\u53ef\u9009\u952e/\u503c\u5bf9 Steps[].CancelCondition \u53ef\u9009\u53d6\u6d88\u6761\u4ef6 { \"Id\": \"HelloWorld\", \"Version\": 1, \"Steps\": [ { \"Id\": \"Hello\", \"StepType\": \"MyApp.HelloWorld, MyApp\", \"NextStepId\": \"Bye\" }, { \"Id\": \"Bye\", \"StepType\": \"MyApp.GoodbyeWorld, MyApp\" } ] } Id: HelloWorld Version: 1 Steps: - Id: Hello StepType: MyApp.HelloWorld, MyApp NextStepId: Bye - Id: Bye StepType: MyApp.GoodbyeWorld, MyApp \u8f93\u5165\u548c\u8f93\u51fa \u8f93\u5165\u548c\u8f93\u51fa\u53ef\u4ee5\u4f5c\u4e3a\u952e/\u503c\u5bf9\u5bf9\u8c61\u7ed1\u5b9a\u5230\u6b65\u9aa4\uff0c * \u5728 Inputs \u96c6\u5408\u4e2d\uff0c\u952e\u5c06\u5339\u914d\u7c7b\u4e0a\u7684 Step \u4e00\u4e2a\u5c5e\u6027\uff0c\u503c\u5c06\u662f\u4e00\u4e2a\u5e26\u6709 data \u548c context \u53c2\u6570\u7684\u8868\u8fbe\u5f0f\uff0c\u53ef\u4f9b\u4f60\u4f7f\u7528\u3002 * \u5728 Outputs \u96c6\u5408\u4e2d\uff0c\u952e\u5c06\u4e0e\u7c7b\u4e0a\u7684 Data \u5c5e\u6027\u5339\u914d\uff0c\u800c\u503c\u5c06\u662f\u4e00\u4e2a\u8868\u8fbe\u5f0f\uff0c\u5176\u4e2d\u4e24\u4e2a\u90fd step \u4f5c\u4e3a\u53c2\u6570\u4f9b\u4f60\u4f7f\u7528\u3002 \u53ef\u4ee5\u627e\u5230 here \u8868\u8fbe\u5f0f\u8bed\u8a00\u529f\u80fd\u7684\u5168\u90e8\u7ec6\u8282\u3002 { \"Id\": \"AddWorkflow\", \"Version\": 1, \"DataType\": \"MyApp.MyDataClass, MyApp\", \"Steps\": [ { \"Id\": \"Hello\", \"StepType\": \"MyApp.HelloWorld, MyApp\", \"NextStepId\": \"Add\" }, { \"Id\": \"Add\", \"StepType\": \"MyApp.AddNumbers, MyApp\", \"NextStepId\": \"Bye\", \"Inputs\": { \"Value1\": \"data.Value1\", \"Value2\": \"data.Value2\" }, \"Outputs\": { \"Answer\": \"step.Result\" } }, { \"Id\": \"Bye\", \"StepType\": \"MyApp.GoodbyeWorld, MyApp\" } ] } Id: AddWorkflow Version: 1 DataType: MyApp.MyDataClass, MyApp Steps: - Id: Hello StepType: MyApp.HelloWorld, MyApp NextStepId: Add - Id: Add StepType: MyApp.AddNumbers, MyApp NextStepId: Bye Inputs: Value1: data.Value1 Value2: data.Value2 Outputs: Answer: step.Result - Id: Bye StepType: MyApp.GoodbyeWorld, MyApp { \"Id\": \"AddWorkflow\", \"Version\": 1, \"DataType\": \"MyApp.MyDataClass, MyApp\", \"Steps\": [ { \"Id\": \"Hello\", \"StepType\": \"MyApp.HelloWorld, MyApp\", \"NextStepId\": \"Print\" }, { \"Id\": \"Print\", \"StepType\": \"MyApp.PrintMessage, MyApp\", \"Inputs\": { \"Message\": \"\\\"Hi there!\\\"\" } } ] } Id: AddWorkflow Version: 1 DataType: MyApp.MyDataClass, MyApp Steps: - Id: Hello StepType: MyApp.HelloWorld, MyApp NextStepId: Print - Id: Print StepType: MyApp.PrintMessage, MyApp Inputs: Message: '\"Hi there!\"' \u4f60\u8fd8\u53ef\u4ee5\u5c06\u5bf9\u8c61\u56fe\u4f20\u9012\u7ed9\u6b65\u9aa4\u8f93\u5165\uff0c\u800c\u4e0d\u4ec5\u4ec5\u662f\u6807\u91cf\u503c\u3002 \"inputs\": { \"Body\": { \"Value1\": 1, \"Value2\": 2 }, \"Headers\": { \"Content-Type\": \"application/json\" } }, \u5982\u679c\u8981\u8ba1\u7b97\u5bf9\u8c61\u7684\u7ed9\u5b9a\u5c5e\u6027\u7684\u8868\u8fbe\u5f0f\uff0c\u53ea\u9700\u5728\u524d\u9762\u52a0\u4e0a @ \u5e76\u4f20\u9012\u4e00\u4e2a\u8868\u8fbe\u5f0f\u5b57\u7b26\u4e32 \"inputs\": { \"Body\": { \"@Value1\": \"data.MyValue * 2\", \"Value2\": 5 }, \"Headers\": { \"Content-Type\": \"application/json\" } }, \u679a\u4e3e \u5982\u679c\u4f60\u7684\u6b65\u9aa4\u5177\u6709\u679a\u4e3e\u5c5e\u6027\uff0c\u5219\u53ea\u9700\u4f20\u9012\u679a\u4e3e\u503c\u7684\u5b57\u7b26\u4e32\u8868\u793a\u5f62\u5f0f\uff0c\u5b83\u5c31\u4f1a\u81ea\u52a8\u8f6c\u6362\u3002 \u8f93\u5165\u8868\u8fbe\u5f0f\u4e2d\u53ef\u7528\u7684\u73af\u5883\u53d8\u91cf \u4f60\u53ef\u4ee5\u4ece\u8f93\u5165\u8868\u8fbe\u5f0f\u4e2d\u8bbf\u95ee\u73af\u5883\u53d8\u91cf\u3002\u4f7f\u7528\uff1a environment[\"VARIABLE_NAME\"]","title":"JSON / YAML Definitions"},{"location":"json-yaml/#json-yaml","text":"\u4ece NuGet \u5b89\u88c5 WorkflowCore.DSL \u8f6f\u4ef6\u5305\u5e76\u8c03\u7528 AddWorkflowDSL \u4f60\u7684\u670d\u52a1\u96c6\u5408\u3002\u7136\u540e\u4ece IOC \u5bb9\u5668\u4e2d\u83b7\u53d6 DefinitionLoader \u5e76\u8c03\u7528\u8be5 .LoadDefinition \u65b9\u6cd5 using WorkflowCore.Interface; ... var loader = serviceProvider.GetService<IDefinitionLoader>(); loader.LoadDefinition(\"<<json or yaml string here>>\", Deserializers.Json);","title":"\u4ece JSON \u6216 YAML \u52a0\u8f7d\u5de5\u4f5c\u6d41\u5b9a\u4e49"},{"location":"json-yaml/#dsl","text":"JSON \u548c YAML \u683c\u5f0f\u90fd\u9075\u5faa\u901a\u7528\u7684 DSL\uff0c\u5176\u4e2d\u5de5\u4f5c\u6d41\u4e2d\u7684\u6b65\u9aa4\u7c7b\u578b\u7531\u5b8c\u5168\u9650\u5b9a\u7684\u7c7b\u540d\u5f15\u7528\u3002\u5185\u7f6e\u6b65\u9aa4\u7c7b\u578b\u901a\u5e38\u4f4d\u4e8e WorklfowCore.Primitives \u547d\u540d\u7a7a\u95f4\u4e2d\u3002 Field \u63cf\u8ff0 Id \u5de5\u4f5c\u6d41\u5b9a\u4e49 ID Version \u5de5\u4f5c\u6d41\u5b9a\u4e49\u7248\u672c DataType \u81ea\u5b9a\u4e49\u6570\u636e\u5bf9\u8c61\u7684\u5b8c\u5168\u9650\u5b9a\u7a0b\u5e8f\u96c6\u7c7b\u540d Steps[].Id \u6b65\u9aa4 ID\uff08\u6bcf\u4e2a\u6b65\u9aa4\u6240\u9700\u7684\u552f\u4e00\u952e\uff09 Steps[].StepType \u6b65\u9aa4\u7684\u5b8c\u5168\u9650\u5b9a\u7a0b\u5e8f\u96c6\u7c7b\u540d\u79f0 Steps[].NextStepId \u6b64\u6b65\u9aa4\u5b8c\u6210\u540e\u7684\u4e0b\u4e00\u6b65\u9aa4\u7684\u6b65\u9aa4 ID Steps[].Inputs \u6b65\u9aa4\u8f93\u5165\u7684\u53ef\u9009\u952e/\u503c\u5bf9 Steps[].Outputs \u9636\u8dc3\u8f93\u51fa\u7684\u53ef\u9009\u952e/\u503c\u5bf9 Steps[].CancelCondition \u53ef\u9009\u53d6\u6d88\u6761\u4ef6 { \"Id\": \"HelloWorld\", \"Version\": 1, \"Steps\": [ { \"Id\": \"Hello\", \"StepType\": \"MyApp.HelloWorld, MyApp\", \"NextStepId\": \"Bye\" }, { \"Id\": \"Bye\", \"StepType\": \"MyApp.GoodbyeWorld, MyApp\" } ] } Id: HelloWorld Version: 1 Steps: - Id: Hello StepType: MyApp.HelloWorld, MyApp NextStepId: Bye - Id: Bye StepType: MyApp.GoodbyeWorld, MyApp","title":"\u516c\u5171 DSL"},{"location":"json-yaml/#_1","text":"\u8f93\u5165\u548c\u8f93\u51fa\u53ef\u4ee5\u4f5c\u4e3a\u952e/\u503c\u5bf9\u5bf9\u8c61\u7ed1\u5b9a\u5230\u6b65\u9aa4\uff0c * \u5728 Inputs \u96c6\u5408\u4e2d\uff0c\u952e\u5c06\u5339\u914d\u7c7b\u4e0a\u7684 Step \u4e00\u4e2a\u5c5e\u6027\uff0c\u503c\u5c06\u662f\u4e00\u4e2a\u5e26\u6709 data \u548c context \u53c2\u6570\u7684\u8868\u8fbe\u5f0f\uff0c\u53ef\u4f9b\u4f60\u4f7f\u7528\u3002 * \u5728 Outputs \u96c6\u5408\u4e2d\uff0c\u952e\u5c06\u4e0e\u7c7b\u4e0a\u7684 Data \u5c5e\u6027\u5339\u914d\uff0c\u800c\u503c\u5c06\u662f\u4e00\u4e2a\u8868\u8fbe\u5f0f\uff0c\u5176\u4e2d\u4e24\u4e2a\u90fd step \u4f5c\u4e3a\u53c2\u6570\u4f9b\u4f60\u4f7f\u7528\u3002 \u53ef\u4ee5\u627e\u5230 here \u8868\u8fbe\u5f0f\u8bed\u8a00\u529f\u80fd\u7684\u5168\u90e8\u7ec6\u8282\u3002 { \"Id\": \"AddWorkflow\", \"Version\": 1, \"DataType\": \"MyApp.MyDataClass, MyApp\", \"Steps\": [ { \"Id\": \"Hello\", \"StepType\": \"MyApp.HelloWorld, MyApp\", \"NextStepId\": \"Add\" }, { \"Id\": \"Add\", \"StepType\": \"MyApp.AddNumbers, MyApp\", \"NextStepId\": \"Bye\", \"Inputs\": { \"Value1\": \"data.Value1\", \"Value2\": \"data.Value2\" }, \"Outputs\": { \"Answer\": \"step.Result\" } }, { \"Id\": \"Bye\", \"StepType\": \"MyApp.GoodbyeWorld, MyApp\" } ] } Id: AddWorkflow Version: 1 DataType: MyApp.MyDataClass, MyApp Steps: - Id: Hello StepType: MyApp.HelloWorld, MyApp NextStepId: Add - Id: Add StepType: MyApp.AddNumbers, MyApp NextStepId: Bye Inputs: Value1: data.Value1 Value2: data.Value2 Outputs: Answer: step.Result - Id: Bye StepType: MyApp.GoodbyeWorld, MyApp { \"Id\": \"AddWorkflow\", \"Version\": 1, \"DataType\": \"MyApp.MyDataClass, MyApp\", \"Steps\": [ { \"Id\": \"Hello\", \"StepType\": \"MyApp.HelloWorld, MyApp\", \"NextStepId\": \"Print\" }, { \"Id\": \"Print\", \"StepType\": \"MyApp.PrintMessage, MyApp\", \"Inputs\": { \"Message\": \"\\\"Hi there!\\\"\" } } ] } Id: AddWorkflow Version: 1 DataType: MyApp.MyDataClass, MyApp Steps: - Id: Hello StepType: MyApp.HelloWorld, MyApp NextStepId: Print - Id: Print StepType: MyApp.PrintMessage, MyApp Inputs: Message: '\"Hi there!\"' \u4f60\u8fd8\u53ef\u4ee5\u5c06\u5bf9\u8c61\u56fe\u4f20\u9012\u7ed9\u6b65\u9aa4\u8f93\u5165\uff0c\u800c\u4e0d\u4ec5\u4ec5\u662f\u6807\u91cf\u503c\u3002 \"inputs\": { \"Body\": { \"Value1\": 1, \"Value2\": 2 }, \"Headers\": { \"Content-Type\": \"application/json\" } }, \u5982\u679c\u8981\u8ba1\u7b97\u5bf9\u8c61\u7684\u7ed9\u5b9a\u5c5e\u6027\u7684\u8868\u8fbe\u5f0f\uff0c\u53ea\u9700\u5728\u524d\u9762\u52a0\u4e0a @ \u5e76\u4f20\u9012\u4e00\u4e2a\u8868\u8fbe\u5f0f\u5b57\u7b26\u4e32 \"inputs\": { \"Body\": { \"@Value1\": \"data.MyValue * 2\", \"Value2\": 5 }, \"Headers\": { \"Content-Type\": \"application/json\" } },","title":"\u8f93\u5165\u548c\u8f93\u51fa"},{"location":"json-yaml/#_2","text":"\u5982\u679c\u4f60\u7684\u6b65\u9aa4\u5177\u6709\u679a\u4e3e\u5c5e\u6027\uff0c\u5219\u53ea\u9700\u4f20\u9012\u679a\u4e3e\u503c\u7684\u5b57\u7b26\u4e32\u8868\u793a\u5f62\u5f0f\uff0c\u5b83\u5c31\u4f1a\u81ea\u52a8\u8f6c\u6362\u3002","title":"\u679a\u4e3e"},{"location":"json-yaml/#_3","text":"\u4f60\u53ef\u4ee5\u4ece\u8f93\u5165\u8868\u8fbe\u5f0f\u4e2d\u8bbf\u95ee\u73af\u5883\u53d8\u91cf\u3002\u4f7f\u7528\uff1a environment[\"VARIABLE_NAME\"]","title":"\u8f93\u5165\u8868\u8fbe\u5f0f\u4e2d\u53ef\u7528\u7684\u73af\u5883\u53d8\u91cf"},{"location":"multi-node-clusters/","text":"\u591a\u8282\u70b9\u96c6\u7fa4 \u9ed8\u8ba4\u60c5\u51b5\u4e0b\uff0cWorkflowHost \u670d\u52a1\u5c06\u4f7f\u7528\u5355\u8282\u70b9\u914d\u7f6e\u7684\u5185\u7f6e\u961f\u5217\u548c\u9501\u5b9a\u63d0\u4f9b\u7a0b\u5e8f\u4f5c\u4e3a\u5355\u8282\u70b9\u8fd0\u884c\u3002\u5982\u679c\u4f60\u5e0c\u671b\u8fd0\u884c\u591a\u8282\u70b9\u96c6\u7fa4\uff0c\u5219\u9700\u8981\u914d\u7f6e\u5916\u90e8\u6392\u961f\u673a\u5236\u548c\u5206\u5e03\u5f0f\u9501\u5b9a\u7ba1\u7406\u5668\u6765\u534f\u8c03\u96c6\u7fa4\u3002\u8fd9\u4e9b\u662f\u5f53\u524d\u53ef\u7528\u7684\u63d0\u4f9b\u7a0b\u5e8f\u3002 \u961f\u5217\u63d0\u4f9b\u7a0b\u5e8f \u5355\u8282\u70b9\u961f\u5217\u63d0\u4f9b\u7a0b\u5e8f \uff08\u9ed8\u8ba4\u5185\u7f6e\u63d0\u4f9b\u7a0b\u5e8f\uff09 Azure \u5b58\u50a8\u961f\u5217 Redis RabbitMQ AWS \u7b80\u5355\u961f\u5217\u670d\u52a1 \u5206\u5e03\u5f0f\u9501\u7ba1\u7406\u5668 SingleNodeLockProvider \uff08\u9ed8\u8ba4\u5185\u7f6e\u63d0\u4f9b\u7a0b\u5e8f\uff09 Azure \u5b58\u50a8\u79df\u8d41 Redis AWS DynamoDB","title":"Multi-node clusters"},{"location":"multi-node-clusters/#_1","text":"\u9ed8\u8ba4\u60c5\u51b5\u4e0b\uff0cWorkflowHost \u670d\u52a1\u5c06\u4f7f\u7528\u5355\u8282\u70b9\u914d\u7f6e\u7684\u5185\u7f6e\u961f\u5217\u548c\u9501\u5b9a\u63d0\u4f9b\u7a0b\u5e8f\u4f5c\u4e3a\u5355\u8282\u70b9\u8fd0\u884c\u3002\u5982\u679c\u4f60\u5e0c\u671b\u8fd0\u884c\u591a\u8282\u70b9\u96c6\u7fa4\uff0c\u5219\u9700\u8981\u914d\u7f6e\u5916\u90e8\u6392\u961f\u673a\u5236\u548c\u5206\u5e03\u5f0f\u9501\u5b9a\u7ba1\u7406\u5668\u6765\u534f\u8c03\u96c6\u7fa4\u3002\u8fd9\u4e9b\u662f\u5f53\u524d\u53ef\u7528\u7684\u63d0\u4f9b\u7a0b\u5e8f\u3002","title":"\u591a\u8282\u70b9\u96c6\u7fa4"},{"location":"multi-node-clusters/#_2","text":"\u5355\u8282\u70b9\u961f\u5217\u63d0\u4f9b\u7a0b\u5e8f \uff08\u9ed8\u8ba4\u5185\u7f6e\u63d0\u4f9b\u7a0b\u5e8f\uff09 Azure \u5b58\u50a8\u961f\u5217 Redis RabbitMQ AWS \u7b80\u5355\u961f\u5217\u670d\u52a1","title":"\u961f\u5217\u63d0\u4f9b\u7a0b\u5e8f"},{"location":"multi-node-clusters/#_3","text":"SingleNodeLockProvider \uff08\u9ed8\u8ba4\u5185\u7f6e\u63d0\u4f9b\u7a0b\u5e8f\uff09 Azure \u5b58\u50a8\u79df\u8d41 Redis AWS DynamoDB","title":"\u5206\u5e03\u5f0f\u9501\u7ba1\u7406\u5668"},{"location":"performance/","text":"\u6027\u80fd\u6d4b\u8bd5 \u5bf9 Workflow-Core \u7248\u672c 3.7.0 \u8fdb\u884c\u4e86\u6d4b\u8bd5\uff0c\u4ee5\u8bc4\u4f30\u5176\u6027\u80fd\u3002\u4f7f\u7528\u7684\u8bbe\u7f6e\u662f\u5177\u6709\u9ed8\u8ba4 MemoryPersistenceProvider \u6301\u4e45\u6027\u63d0\u4f9b\u7a0b\u5e8f\u7684\u5355\u8282\u70b9\u3002 \u65b9\u6cd5\u8bba \u6d4b\u8bd5\u73af\u5883-\u5728\u4ee5\u4e0b\u4e24\u4e2a\u73af\u5883\u4e2d\u4f9d\u6b21\u8fd0\u884c\u6d4b\u8bd5\uff0c\u4ee5\u4e86\u89e3\u8f83\u4f4e\u4e0e\u8f83\u9ad8\u786c\u4ef6\u914d\u7f6e\u4e0b\u7684\u5de5\u4f5c\u6d41\u6838\u5fc3\u6027\u80fd\u3002 \u8f83\u4f4e\u7684\u914d\u7f6e \u6838\u5fc3\u6570\uff1a8 \u4e2a\u865a\u62df CPU\uff08 \u6807\u51c6 _D8S_V3 \uff09 \u5185\u5b58\uff1a32 GB \u64cd\u4f5c\u7cfb\u7edf\uff1aLinux Ubuntu 20.04 \u7f51\u7edc 6 \u66f4\u9ad8\u7684\u914d\u7f6e \u6838\u5fc3\u6570\uff1a32 \u4e2a\u865a\u62df CPU\uff08 \u6807\u51c6 _D32AS_V4 \uff09 \u5185\u5b58\uff1a128 GB \u64cd\u4f5c\u7cfb\u7edf\uff1aLinux Ubuntu 20.04 \u7f51\u7edc 6 \u6d4b\u8bd5\u5de5\u4f5c\u6d41\u7a0b\uff1a\u5de5\u4f5c\u6d41\u7a0b\u7531 3 \u4e2a\u57fa\u672c\u6b65\u9aa4\u7ec4\u6210\u3002\u9009\u62e9\u8fd9 3 \u4e2a\u7b80\u5355\u7684\u6b65\u9aa4\u662f\u4e3a\u4e86\u4ee5\u6700\u5c0f\u4f46\u8db3\u591f\u7684\u590d\u6742\u6027\u6d4b\u8bd5\u5de5\u4f5c\u6d41\u5f15\u64ce\u7684\u6027\u80fd\uff0c\u5e76\u907f\u514d\u4efb\u4f55\u5916\u90e8\u4f9d\u8d56\u6027\u3002 \u6b65\u9aa4 1\uff1a\u751f\u6210 \u968f\u673a\u6570 \u4e00\u4e2a\u4ecb\u4e8e 1 \u5230 10 \u4e4b\u95f4\u7684\u503c\uff0c\u5e76\u5728\u6807\u51c6\u8f93\u51fa\u4e0a\u6253\u5370\u5b83\u3002 \u7b2c\u4e8c\u6b65\uff1a \u6761\u4ef6\u6b65\u9aa4 \u6b65\u9aa4 2.1\uff1a\u5982\u679c\u6b65\u9aa4 1 \u4e2d\u751f\u6210\u7684\u503c>5\uff0c\u5219\u5728\u6807\u51c6\u8f93\u51fa\u4e0a\u6253\u5370\u5b83\u3002 \u6b65\u9aa4 2.2\uff1a\u5982\u679c\u6b65\u9aa4 1 \u4e2d\u751f\u6210\u7684\u503c <=5\uff0c\u5219\u5728\u6807\u51c6\u8f93\u51fa\u4e0a\u6253\u5370\u5b83\u3002 \u6b65\u9aa4 3\uff1a\u5728\u6807\u51c6\u8f93\u51fa\u4e0a\u6253\u5370\u518d\u89c1\u6d88\u606f\u3002 \u6d4b\u8bd5\u5de5\u5177\uff1a NBomber \u4f5c\u4e3a\u6027\u80fd\u6d4b\u8bd5\u6846\u67b6\uff0c\u4ee5 C# \u63a7\u5236\u53f0\u5e94\u7528\u7a0b\u5e8f\u4e3a\u57fa\u7840\u3002 \u6d4b\u8bd5\u573a\u666f\uff1a \u6bcf\u79cd\u7c7b\u578b\u7684\u6d4b\u8bd5\u8fd0\u884c\u6267\u884c 20 \u5206\u949f\u3002 \u4f7f\u7528\u4e86\u578b\u53f7 \u4fdd\u6301\u4e0d\u53d8 \u526f\u672c\u7684\u8f70\u70b8\u673a\u8f7d\u8377\u6a21\u62df\u3002\u8fd9\u79cd\u7c7b\u578b\u7684\u6a21\u62df\u5728\u7279\u5b9a\u65f6\u671f\u5185\u4fdd\u6301\u6052\u5b9a\u6570\u91cf\u7684\u573a\u666f\u526f\u672c\uff08\u5b9e\u4f8b\uff09\u3002 \u6d4b\u8bd5\u5e76\u884c\u526f\u672c [1\uff0c2\uff0c3\uff0c4\uff0c5\uff0c6\uff0c7\uff0c8\uff0c10\uff0c12\uff0c14\uff0c16\uff0c32\uff0c64\uff0c128\uff0c256\uff0c512\uff0c1024]\u3002 \u4f8b\u5982\uff0c\u5982\u679c\u6211\u4eec\u91c7\u7528\u5e76\u53d1\u526f\u672c =4\uff0c\u6301\u7eed\u65f6\u95f4 =20 \u5206\u949f\uff0c\u8fd9\u610f\u5473\u7740 nBomber \u5c06\u786e\u4fdd\u6211\u4eec\u6709 4 \u4e2a\u6d4b\u8bd5\u5de5\u4f5c\u6d41\u5b9e\u4f8b\u5e76\u884c\u8fd0\u884c 20 \u5206\u949f\u3002 \u7ed3\u679c \u6bcf\u79d2\u5de5\u4f5c\u6d41\u6570-\u4e0b\u8868\u663e\u793a\u4e86\u5728\u5e76\u53d1\u526f\u672c\u6570\u91cf\u4e0d\u65ad\u589e\u52a0\u7684\u4e24\u4e2a\u4e0d\u540c\u73af\u5883\u4e2d\uff0c\u6211\u4eec\u6bcf\u79d2\u80fd\u591f\u6267\u884c\u7684\u5de5\u4f5c\u6d41\u6570\u3002 \u5e76\u53d1\u62f7\u8d1d 8 vCPU 32 vCPU 1 300.6 504.7 2 310.3 513.1 3 309.6 519.3 4 314.7 521.3 5 312.4 519.0 6 314.7 517.7 7 318.9 516.7 8 318.4 517.5 10 322.6 517.1 12 319.7 517.6 14 322.4 518.1 16 327.0 515.5 32 327.7 515.8 64 330.7 523.7 128 332.8 526.9 256 332.8 529.1 512 332.8 529.1 1024 341.3 529.1 \u5ef6\u8fdf-\u663e\u793a\u4e24\u4e2a\u4e0d\u540c\u73af\u5883\u4e2d\u7684\u5e73\u5747 P99 \u548c P50 \u5ef6\u8fdf\uff08\u4ee5\u6beb\u79d2\u4e3a\u5355\u4f4d\uff09\uff0c\u5176\u4e2d\u5e76\u53d1\u526f\u672c\u7684\u6570\u91cf\u4e0d\u65ad\u589e\u52a0\u3002 \u5e76\u53d1\u62f7\u8d1d Mean 8 vCPU Mean 32 vCPU P.99 8 vCPU P.99 32 vCPU P.50 8 vCPU P.50 32 vCPU 1 3.32 1.98 12.67 2.49 3.13 1.85 2 6.43 3.89 19.96 5.67 6.17 3.65 3 9.67 5.77 24.96 8.2 9.14 5.46 4 12.7 7.76 27.44 13.57 12.02 7.22 5 15.99 9.63 34.59 41.89 15.14 9.08 6 19.05 11.58 38.69 45.92 18.02 10.93 7 21.94 13.54 42.18 48.9 20.72 12.66 8 25.11 15.45 44.35 51.04 23.92 14.54 10 30.98 19.33 52.29 56.64 29.31 18.21 12 37.52 23.18 59.2 63.33 35.42 21.82 14 43.44 27.01 67.33 67.58 41.28 25.55 16 48.93 31.03 72.06 72.77 46.11 28.93 32 97.65 62.03 130.05 104.96 94.91 58.02 64 193.53 122.24 235.14 168.45 191.49 115.26 128 384.63 243.74 449.79 294.65 379.65 236.67 256 769.13 486.82 834.07 561.66 766.46 498.22 512 1538.29 968.02 1725.44 1052.67 1542.14 962.05 1024 2999.36 1935.32 3219.46 2072.57 3086.34 1935.36 \u53c2\u8003\u6587\u732e NBomber","title":"\u6027\u80fd\u6d4b\u8bd5"},{"location":"performance/#_1","text":"\u5bf9 Workflow-Core \u7248\u672c 3.7.0 \u8fdb\u884c\u4e86\u6d4b\u8bd5\uff0c\u4ee5\u8bc4\u4f30\u5176\u6027\u80fd\u3002\u4f7f\u7528\u7684\u8bbe\u7f6e\u662f\u5177\u6709\u9ed8\u8ba4 MemoryPersistenceProvider \u6301\u4e45\u6027\u63d0\u4f9b\u7a0b\u5e8f\u7684\u5355\u8282\u70b9\u3002","title":"\u6027\u80fd\u6d4b\u8bd5"},{"location":"performance/#_2","text":"\u6d4b\u8bd5\u73af\u5883-\u5728\u4ee5\u4e0b\u4e24\u4e2a\u73af\u5883\u4e2d\u4f9d\u6b21\u8fd0\u884c\u6d4b\u8bd5\uff0c\u4ee5\u4e86\u89e3\u8f83\u4f4e\u4e0e\u8f83\u9ad8\u786c\u4ef6\u914d\u7f6e\u4e0b\u7684\u5de5\u4f5c\u6d41\u6838\u5fc3\u6027\u80fd\u3002 \u8f83\u4f4e\u7684\u914d\u7f6e \u6838\u5fc3\u6570\uff1a8 \u4e2a\u865a\u62df CPU\uff08 \u6807\u51c6 _D8S_V3 \uff09 \u5185\u5b58\uff1a32 GB \u64cd\u4f5c\u7cfb\u7edf\uff1aLinux Ubuntu 20.04 \u7f51\u7edc 6 \u66f4\u9ad8\u7684\u914d\u7f6e \u6838\u5fc3\u6570\uff1a32 \u4e2a\u865a\u62df CPU\uff08 \u6807\u51c6 _D32AS_V4 \uff09 \u5185\u5b58\uff1a128 GB \u64cd\u4f5c\u7cfb\u7edf\uff1aLinux Ubuntu 20.04 \u7f51\u7edc 6 \u6d4b\u8bd5\u5de5\u4f5c\u6d41\u7a0b\uff1a\u5de5\u4f5c\u6d41\u7a0b\u7531 3 \u4e2a\u57fa\u672c\u6b65\u9aa4\u7ec4\u6210\u3002\u9009\u62e9\u8fd9 3 \u4e2a\u7b80\u5355\u7684\u6b65\u9aa4\u662f\u4e3a\u4e86\u4ee5\u6700\u5c0f\u4f46\u8db3\u591f\u7684\u590d\u6742\u6027\u6d4b\u8bd5\u5de5\u4f5c\u6d41\u5f15\u64ce\u7684\u6027\u80fd\uff0c\u5e76\u907f\u514d\u4efb\u4f55\u5916\u90e8\u4f9d\u8d56\u6027\u3002 \u6b65\u9aa4 1\uff1a\u751f\u6210 \u968f\u673a\u6570 \u4e00\u4e2a\u4ecb\u4e8e 1 \u5230 10 \u4e4b\u95f4\u7684\u503c\uff0c\u5e76\u5728\u6807\u51c6\u8f93\u51fa\u4e0a\u6253\u5370\u5b83\u3002 \u7b2c\u4e8c\u6b65\uff1a \u6761\u4ef6\u6b65\u9aa4 \u6b65\u9aa4 2.1\uff1a\u5982\u679c\u6b65\u9aa4 1 \u4e2d\u751f\u6210\u7684\u503c>5\uff0c\u5219\u5728\u6807\u51c6\u8f93\u51fa\u4e0a\u6253\u5370\u5b83\u3002 \u6b65\u9aa4 2.2\uff1a\u5982\u679c\u6b65\u9aa4 1 \u4e2d\u751f\u6210\u7684\u503c <=5\uff0c\u5219\u5728\u6807\u51c6\u8f93\u51fa\u4e0a\u6253\u5370\u5b83\u3002 \u6b65\u9aa4 3\uff1a\u5728\u6807\u51c6\u8f93\u51fa\u4e0a\u6253\u5370\u518d\u89c1\u6d88\u606f\u3002 \u6d4b\u8bd5\u5de5\u5177\uff1a NBomber \u4f5c\u4e3a\u6027\u80fd\u6d4b\u8bd5\u6846\u67b6\uff0c\u4ee5 C# \u63a7\u5236\u53f0\u5e94\u7528\u7a0b\u5e8f\u4e3a\u57fa\u7840\u3002 \u6d4b\u8bd5\u573a\u666f\uff1a \u6bcf\u79cd\u7c7b\u578b\u7684\u6d4b\u8bd5\u8fd0\u884c\u6267\u884c 20 \u5206\u949f\u3002 \u4f7f\u7528\u4e86\u578b\u53f7 \u4fdd\u6301\u4e0d\u53d8 \u526f\u672c\u7684\u8f70\u70b8\u673a\u8f7d\u8377\u6a21\u62df\u3002\u8fd9\u79cd\u7c7b\u578b\u7684\u6a21\u62df\u5728\u7279\u5b9a\u65f6\u671f\u5185\u4fdd\u6301\u6052\u5b9a\u6570\u91cf\u7684\u573a\u666f\u526f\u672c\uff08\u5b9e\u4f8b\uff09\u3002 \u6d4b\u8bd5\u5e76\u884c\u526f\u672c [1\uff0c2\uff0c3\uff0c4\uff0c5\uff0c6\uff0c7\uff0c8\uff0c10\uff0c12\uff0c14\uff0c16\uff0c32\uff0c64\uff0c128\uff0c256\uff0c512\uff0c1024]\u3002 \u4f8b\u5982\uff0c\u5982\u679c\u6211\u4eec\u91c7\u7528\u5e76\u53d1\u526f\u672c =4\uff0c\u6301\u7eed\u65f6\u95f4 =20 \u5206\u949f\uff0c\u8fd9\u610f\u5473\u7740 nBomber \u5c06\u786e\u4fdd\u6211\u4eec\u6709 4 \u4e2a\u6d4b\u8bd5\u5de5\u4f5c\u6d41\u5b9e\u4f8b\u5e76\u884c\u8fd0\u884c 20 \u5206\u949f\u3002","title":"\u65b9\u6cd5\u8bba"},{"location":"performance/#_3","text":"\u6bcf\u79d2\u5de5\u4f5c\u6d41\u6570-\u4e0b\u8868\u663e\u793a\u4e86\u5728\u5e76\u53d1\u526f\u672c\u6570\u91cf\u4e0d\u65ad\u589e\u52a0\u7684\u4e24\u4e2a\u4e0d\u540c\u73af\u5883\u4e2d\uff0c\u6211\u4eec\u6bcf\u79d2\u80fd\u591f\u6267\u884c\u7684\u5de5\u4f5c\u6d41\u6570\u3002 \u5e76\u53d1\u62f7\u8d1d 8 vCPU 32 vCPU 1 300.6 504.7 2 310.3 513.1 3 309.6 519.3 4 314.7 521.3 5 312.4 519.0 6 314.7 517.7 7 318.9 516.7 8 318.4 517.5 10 322.6 517.1 12 319.7 517.6 14 322.4 518.1 16 327.0 515.5 32 327.7 515.8 64 330.7 523.7 128 332.8 526.9 256 332.8 529.1 512 332.8 529.1 1024 341.3 529.1 \u5ef6\u8fdf-\u663e\u793a\u4e24\u4e2a\u4e0d\u540c\u73af\u5883\u4e2d\u7684\u5e73\u5747 P99 \u548c P50 \u5ef6\u8fdf\uff08\u4ee5\u6beb\u79d2\u4e3a\u5355\u4f4d\uff09\uff0c\u5176\u4e2d\u5e76\u53d1\u526f\u672c\u7684\u6570\u91cf\u4e0d\u65ad\u589e\u52a0\u3002 \u5e76\u53d1\u62f7\u8d1d Mean 8 vCPU Mean 32 vCPU P.99 8 vCPU P.99 32 vCPU P.50 8 vCPU P.50 32 vCPU 1 3.32 1.98 12.67 2.49 3.13 1.85 2 6.43 3.89 19.96 5.67 6.17 3.65 3 9.67 5.77 24.96 8.2 9.14 5.46 4 12.7 7.76 27.44 13.57 12.02 7.22 5 15.99 9.63 34.59 41.89 15.14 9.08 6 19.05 11.58 38.69 45.92 18.02 10.93 7 21.94 13.54 42.18 48.9 20.72 12.66 8 25.11 15.45 44.35 51.04 23.92 14.54 10 30.98 19.33 52.29 56.64 29.31 18.21 12 37.52 23.18 59.2 63.33 35.42 21.82 14 43.44 27.01 67.33 67.58 41.28 25.55 16 48.93 31.03 72.06 72.77 46.11 28.93 32 97.65 62.03 130.05 104.96 94.91 58.02 64 193.53 122.24 235.14 168.45 191.49 115.26 128 384.63 243.74 449.79 294.65 379.65 236.67 256 769.13 486.82 834.07 561.66 766.46 498.22 512 1538.29 968.02 1725.44 1052.67 1542.14 962.05 1024 2999.36 1935.32 3219.46 2072.57 3086.34 1935.36","title":"\u7ed3\u679c"},{"location":"performance/#_4","text":"NBomber","title":"\u53c2\u8003\u6587\u732e"},{"location":"persistence/","text":"\u575a\u6301 \u7531\u4e8e\u5de5\u4f5c\u6d41\u901a\u5e38\u662f\u957f\u65f6\u95f4\u8fd0\u884c\u7684\u6d41\u7a0b\uff0c\u56e0\u6b64\u9700\u8981\u5728\u6b65\u9aa4\u4e4b\u95f4\u5c06\u5176\u4fdd\u5b58\u5230\u5b58\u50a8\u4e2d\u3002\u6709\u51e0\u4e2a\u6301\u4e45\u6027\u63d0\u4f9b\u7a0b\u5e8f\u4f5c\u4e3a\u5355\u72ec\u7684 NuGet \u5305\u63d0\u4f9b\u3002 \u5185\u5b58\u6301\u4e45\u6027\u63d0\u4f9b\u7a0b\u5e8f \uff08\u9ed8\u8ba4\u63d0\u4f9b\u7a0b\u5e8f\uff0c\u7528\u4e8e\u6f14\u793a\u548c\u6d4b\u8bd5\u76ee\u7684\uff09 MongoDB SQL Server PostgreSQL Sqlite \u4e9a\u9a6c\u900a DynamoDB Cosmos DB Redis","title":"Persistence"},{"location":"persistence/#_1","text":"\u7531\u4e8e\u5de5\u4f5c\u6d41\u901a\u5e38\u662f\u957f\u65f6\u95f4\u8fd0\u884c\u7684\u6d41\u7a0b\uff0c\u56e0\u6b64\u9700\u8981\u5728\u6b65\u9aa4\u4e4b\u95f4\u5c06\u5176\u4fdd\u5b58\u5230\u5b58\u50a8\u4e2d\u3002\u6709\u51e0\u4e2a\u6301\u4e45\u6027\u63d0\u4f9b\u7a0b\u5e8f\u4f5c\u4e3a\u5355\u72ec\u7684 NuGet \u5305\u63d0\u4f9b\u3002 \u5185\u5b58\u6301\u4e45\u6027\u63d0\u4f9b\u7a0b\u5e8f \uff08\u9ed8\u8ba4\u63d0\u4f9b\u7a0b\u5e8f\uff0c\u7528\u4e8e\u6f14\u793a\u548c\u6d4b\u8bd5\u76ee\u7684\uff09 MongoDB SQL Server PostgreSQL Sqlite \u4e9a\u9a6c\u900a DynamoDB Cosmos DB Redis","title":"\u575a\u6301"},{"location":"sagas/","text":"\u6709\u8865\u507f\u7684 Saga \u4ea4\u6613 SAGA \u5141\u8bb8\u4f60\u5728 SAGA \u4e8b\u52a1\u4e2d\u5c01\u88c5\u4e00\u7cfb\u5217\u6b65\u9aa4\uff0c\u5e76\u4e3a\u6bcf\u4e2a\u6b65\u9aa4\u6307\u5b9a\u8865\u507f\u6b65\u9aa4\u3002 \u5728\u793a\u4f8b\u4e2d\uff0c Task2 \u5c06\u5f15\u53d1\u5f02\u5e38\uff0c\u7136\u540e UndoTask2 \u5c06\u89e6\u53d1\u548c UndoTask1 \u3002 builder .StartWith(context => Console.WriteLine(\"Begin\")) .Saga(saga => saga .StartWith<Task1>() .CompensateWith<UndoTask1>() .Then<Task2>() .CompensateWith<UndoTask2>() .Then<Task3>() .CompensateWith<UndoTask3>() ) .CompensateWith<CleanUp>() .Then(context => Console.WriteLine(\"End\")); \u5931\u8d25\u7684 Saga \u4e8b\u52a1\u7684\u91cd\u8bd5\u7b56\u7565 \u6b64\u7279\u5b9a\u793a\u4f8b\u5c06\u6bcf 5 \u79d2\u91cd\u8bd5\u4e00\u6b21 Saga\uff0c\u4f46\u4f60\u4e5f\u53ef\u4ee5\u5b8c\u5168\u5931\u8d25\uff0c\u5e76\u5904\u7406\u6574\u4e2a Saga \u7684\u4e3b\u8865\u507f\u4efb\u52a1\u3002 builder .StartWith(context => Console.WriteLine(\"Begin\")) .Saga(saga => saga .StartWith<Task1>() .CompensateWith<UndoTask1>() .Then<Task2>() .CompensateWith<UndoTask2>() .Then<Task3>() .CompensateWith<UndoTask3>() ) .OnError(Models.WorkflowErrorHandling.Retry, TimeSpan.FromSeconds(5)) .Then(context => Console.WriteLine(\"End\")); \u8865\u507f\u6574\u4e2a Saga \u4ea4\u6613 \u4f60\u4e5f\u53ef\u4ee5\u53ea\u6307\u5b9a\u4e3b\u8865\u507f\u6b65\u9aa4\uff0c\u5982\u4e0b\u6240\u793a builder .StartWith(context => Console.WriteLine(\"Begin\")) .Saga(saga => saga .StartWith<Task1>() .Then<Task2>() .Then<Task3>() ) .CompensateWith<UndoEverything>() .Then(context => Console.WriteLine(\"End\")); \u5c06\u53c2\u6570\u4f20\u9012\u7ed9\u8865\u507f\u6b65\u9aa4 \u53ef\u4ee5\u5c06\u53c2\u6570\u4f20\u9012\u7ed9\u8865\u507f\u6b65\u9aa4\uff0c\u5982\u4e0b\u6240\u793a builder .StartWith<SayHello>() .CompensateWith<PrintMessage>(compensate => { compensate.Input(step => step.Message, data => \"undoing...\"); }) \u5728 JSON \u6216 YAML \u4e2d\u8868\u793a Saga \u901a\u8fc7\u4f7f\u7528 WorkflowCore.Primitives.Sequence \u6b65\u9aa4\u5e76\u5c06 Saga \u53c2\u6570\u8bbe\u7f6e\u4e3a true \uff0c\u53ef\u4ee5\u5728 JSON \u6216 YAML \u4e2d\u8868\u793a SAGA \u4e8b\u52a1\u3002 \u8865\u507f\u6b65\u9aa4\u53ef\u4ee5\u901a\u8fc7\u6307\u5b9a CompensateWith \u53c2\u6570\u6765\u5b9a\u4e49\u3002 { \"Id\": \"Saga-Sample\", \"Version\": 1, \"DataType\": \"MyApp.MyDataClass, MyApp\", \"Steps\": [ { \"Id\": \"Hello\", \"StepType\": \"MyApp.HelloWorld, MyApp\", \"NextStepId\": \"MySaga\" }, { \"Id\": \"MySaga\", \"StepType\": \"WorkflowCore.Primitives.Sequence, WorkflowCore\", \"NextStepId\": \"Bye\", \"Saga\": true, \"Do\": [ [ { \"Id\": \"do1\", \"StepType\": \"MyApp.Task1, MyApp\", \"NextStepId\": \"do2\", \"CompensateWith\": [ { \"Id\": \"undo1\", \"StepType\": \"MyApp.UndoTask1, MyApp\" } ] }, { \"Id\": \"do2\", \"StepType\": \"MyApp.Task2, MyApp\", \"CompensateWith\": [ { \"Id\": \"undo2-1\", \"NextStepId\": \"undo2-2\", \"StepType\": \"MyApp.UndoTask2, MyApp\" }, { \"Id\": \"undo2-2\", \"StepType\": \"MyApp.DoSomethingElse, MyApp\" } ] } ] ] }, { \"Id\": \"Bye\", \"StepType\": \"MyApp.GoodbyeWorld, MyApp\" } ] } Id: Saga-Sample Version: 1 DataType: MyApp.MyDataClass, MyApp Steps: - Id: Hello StepType: MyApp.HelloWorld, MyApp NextStepId: MySaga - Id: MySaga StepType: WorkflowCore.Primitives.Sequence, WorkflowCore NextStepId: Bye Saga: true Do: - - Id: do1 StepType: MyApp.Task1, MyApp NextStepId: do2 CompensateWith: - Id: undo1 StepType: MyApp.UndoTask1, MyApp - Id: do2 StepType: MyApp.Task2, MyApp CompensateWith: - Id: undo2-1 NextStepId: undo2-2 StepType: MyApp.UndoTask2, MyApp - Id: undo2-2 StepType: MyApp.DoSomethingElse, MyApp - Id: Bye StepType: MyApp.GoodbyeWorld, MyApp","title":"Saga transactions"},{"location":"sagas/#saga","text":"SAGA \u5141\u8bb8\u4f60\u5728 SAGA \u4e8b\u52a1\u4e2d\u5c01\u88c5\u4e00\u7cfb\u5217\u6b65\u9aa4\uff0c\u5e76\u4e3a\u6bcf\u4e2a\u6b65\u9aa4\u6307\u5b9a\u8865\u507f\u6b65\u9aa4\u3002 \u5728\u793a\u4f8b\u4e2d\uff0c Task2 \u5c06\u5f15\u53d1\u5f02\u5e38\uff0c\u7136\u540e UndoTask2 \u5c06\u89e6\u53d1\u548c UndoTask1 \u3002 builder .StartWith(context => Console.WriteLine(\"Begin\")) .Saga(saga => saga .StartWith<Task1>() .CompensateWith<UndoTask1>() .Then<Task2>() .CompensateWith<UndoTask2>() .Then<Task3>() .CompensateWith<UndoTask3>() ) .CompensateWith<CleanUp>() .Then(context => Console.WriteLine(\"End\"));","title":"\u6709\u8865\u507f\u7684 Saga \u4ea4\u6613"},{"location":"sagas/#saga_1","text":"\u6b64\u7279\u5b9a\u793a\u4f8b\u5c06\u6bcf 5 \u79d2\u91cd\u8bd5\u4e00\u6b21 Saga\uff0c\u4f46\u4f60\u4e5f\u53ef\u4ee5\u5b8c\u5168\u5931\u8d25\uff0c\u5e76\u5904\u7406\u6574\u4e2a Saga \u7684\u4e3b\u8865\u507f\u4efb\u52a1\u3002 builder .StartWith(context => Console.WriteLine(\"Begin\")) .Saga(saga => saga .StartWith<Task1>() .CompensateWith<UndoTask1>() .Then<Task2>() .CompensateWith<UndoTask2>() .Then<Task3>() .CompensateWith<UndoTask3>() ) .OnError(Models.WorkflowErrorHandling.Retry, TimeSpan.FromSeconds(5)) .Then(context => Console.WriteLine(\"End\"));","title":"\u5931\u8d25\u7684 Saga \u4e8b\u52a1\u7684\u91cd\u8bd5\u7b56\u7565"},{"location":"sagas/#saga_2","text":"\u4f60\u4e5f\u53ef\u4ee5\u53ea\u6307\u5b9a\u4e3b\u8865\u507f\u6b65\u9aa4\uff0c\u5982\u4e0b\u6240\u793a builder .StartWith(context => Console.WriteLine(\"Begin\")) .Saga(saga => saga .StartWith<Task1>() .Then<Task2>() .Then<Task3>() ) .CompensateWith<UndoEverything>() .Then(context => Console.WriteLine(\"End\"));","title":"\u8865\u507f\u6574\u4e2a Saga \u4ea4\u6613"},{"location":"sagas/#_1","text":"\u53ef\u4ee5\u5c06\u53c2\u6570\u4f20\u9012\u7ed9\u8865\u507f\u6b65\u9aa4\uff0c\u5982\u4e0b\u6240\u793a builder .StartWith<SayHello>() .CompensateWith<PrintMessage>(compensate => { compensate.Input(step => step.Message, data => \"undoing...\"); })","title":"\u5c06\u53c2\u6570\u4f20\u9012\u7ed9\u8865\u507f\u6b65\u9aa4"},{"location":"sagas/#json-yaml-saga","text":"\u901a\u8fc7\u4f7f\u7528 WorkflowCore.Primitives.Sequence \u6b65\u9aa4\u5e76\u5c06 Saga \u53c2\u6570\u8bbe\u7f6e\u4e3a true \uff0c\u53ef\u4ee5\u5728 JSON \u6216 YAML \u4e2d\u8868\u793a SAGA \u4e8b\u52a1\u3002 \u8865\u507f\u6b65\u9aa4\u53ef\u4ee5\u901a\u8fc7\u6307\u5b9a CompensateWith \u53c2\u6570\u6765\u5b9a\u4e49\u3002 { \"Id\": \"Saga-Sample\", \"Version\": 1, \"DataType\": \"MyApp.MyDataClass, MyApp\", \"Steps\": [ { \"Id\": \"Hello\", \"StepType\": \"MyApp.HelloWorld, MyApp\", \"NextStepId\": \"MySaga\" }, { \"Id\": \"MySaga\", \"StepType\": \"WorkflowCore.Primitives.Sequence, WorkflowCore\", \"NextStepId\": \"Bye\", \"Saga\": true, \"Do\": [ [ { \"Id\": \"do1\", \"StepType\": \"MyApp.Task1, MyApp\", \"NextStepId\": \"do2\", \"CompensateWith\": [ { \"Id\": \"undo1\", \"StepType\": \"MyApp.UndoTask1, MyApp\" } ] }, { \"Id\": \"do2\", \"StepType\": \"MyApp.Task2, MyApp\", \"CompensateWith\": [ { \"Id\": \"undo2-1\", \"NextStepId\": \"undo2-2\", \"StepType\": \"MyApp.UndoTask2, MyApp\" }, { \"Id\": \"undo2-2\", \"StepType\": \"MyApp.DoSomethingElse, MyApp\" } ] } ] ] }, { \"Id\": \"Bye\", \"StepType\": \"MyApp.GoodbyeWorld, MyApp\" } ] } Id: Saga-Sample Version: 1 DataType: MyApp.MyDataClass, MyApp Steps: - Id: Hello StepType: MyApp.HelloWorld, MyApp NextStepId: MySaga - Id: MySaga StepType: WorkflowCore.Primitives.Sequence, WorkflowCore NextStepId: Bye Saga: true Do: - - Id: do1 StepType: MyApp.Task1, MyApp NextStepId: do2 CompensateWith: - Id: undo1 StepType: MyApp.UndoTask1, MyApp - Id: do2 StepType: MyApp.Task2, MyApp CompensateWith: - Id: undo2-1 NextStepId: undo2-2 StepType: MyApp.UndoTask2, MyApp - Id: undo2-2 StepType: MyApp.DoSomethingElse, MyApp - Id: Bye StepType: MyApp.GoodbyeWorld, MyApp","title":"\u5728 JSON \u6216 YAML \u4e2d\u8868\u793a Saga"},{"location":"samples/","text":"\u6837\u672c \u4f60\u597d\uff0c\u4e16\u754c \u4f20\u9012\u6570\u636e Events \u6d3b\u52a8\u5de5\u4eba \u4f9d\u8d56\u6ce8\u5165 \u5e76\u884c Foreach While loop If \u5e76\u884c\u4efb\u52a1 \u4f50\u8d3a\u4ea4\u6613 \u8ba1\u5212\u7684\u540e\u53f0\u4efb\u52a1 \u91cd\u590d\u540e\u53f0\u4efb\u52a1 \u591a\u91cd\u7ed3\u679c \u5ef6\u8fdf\u6267\u884c\u548c\u53ef\u91cd\u5165\u6b65\u9aa4 Looping \u516c\u5f00 REST API \u4eba\u5de5\uff08\u7528\u6237\uff09\u5de5\u4f5c\u6d41 \u5de5\u4f5c\u6d41\u4e2d\u95f4\u4ef6","title":"Samples"},{"location":"samples/#_1","text":"\u4f60\u597d\uff0c\u4e16\u754c \u4f20\u9012\u6570\u636e Events \u6d3b\u52a8\u5de5\u4eba \u4f9d\u8d56\u6ce8\u5165 \u5e76\u884c Foreach While loop If \u5e76\u884c\u4efb\u52a1 \u4f50\u8d3a\u4ea4\u6613 \u8ba1\u5212\u7684\u540e\u53f0\u4efb\u52a1 \u91cd\u590d\u540e\u53f0\u4efb\u52a1 \u591a\u91cd\u7ed3\u679c \u5ef6\u8fdf\u6267\u884c\u548c\u53ef\u91cd\u5165\u6b65\u9aa4 Looping \u516c\u5f00 REST API \u4eba\u5de5\uff08\u7528\u6237\uff09\u5de5\u4f5c\u6d41 \u5de5\u4f5c\u6d41\u4e2d\u95f4\u4ef6","title":"\u6837\u672c"},{"location":"test-helpers/","text":"\u5de5\u4f5c\u6d41\u6838\u5fc3\u7684\u6d4b\u8bd5\u52a9\u624b \u4e3a\u57fa\u4e8e WorkflowCore \u6784\u5efa\u7684\u5de5\u4f5c\u6d41\u7f16\u5199\u6d4b\u8bd5\u63d0\u4f9b\u652f\u6301 \u6b63\u5728\u5b89\u88c5 \u5b89\u88c5 NuGet \u5305\u201cWorkflowCore.testing \u201d PM> Install-Package WorkflowCore.Testing \u7528\u6cd5 \u4f7f\u7528 xUnit \u521b\u5efa\u4ece WorkflowTest \u7ee7\u627f\u7684\u7c7b \u5728\u6784\u9020\u51fd\u6570\u4e2d\u8c03\u7528 setup\uff08\uff09\u65b9\u6cd5 \u4f7f\u7528\u5e2e\u52a9\u5668\u65b9\u6cd5\u5b9e\u73b0\u6d4b\u8bd5 StartWorkflow\uff08\uff09 \u7b49\u5f85\u5de5\u4f5c\u6d41\u5b8c\u6210\uff08\uff09 WaitForEventSubscription\uff08\uff09 GetStatus\uff08\uff09 GetData\uff08\uff09 \u672a\u5904\u7406\u7684 Steperrors public class xUnitTest : WorkflowTest<MyWorkflow, MyDataClass> { public xUnitTest() { Setup(); } [Fact] public void MyWorkflow() { var workflowId = StartWorkflow(new MyDataClass() { Value1 = 2, Value2 = 3 }); WaitForWorkflowToComplete(workflowId, TimeSpan.FromSeconds(30)); GetStatus(workflowId).Should().Be(WorkflowStatus.Complete); UnhandledStepErrors.Count.Should().Be(0); GetData(workflowId).Value3.Should().Be(5); } } \u4f7f\u7528 NUnit \u521b\u5efa\u4e00\u4e2a\u7ee7\u627f\u81ea WorkflowTest \u7684\u7c7b\uff0c\u5e76\u7528 \u6d4b\u8bd5\u6cbb\u5177 \u5c5e\u6027\u4fee\u9970\u5b83 \u91cd\u5199 setup \u65b9\u6cd5\u5e76\u7528 \u8bbe\u7f6e \u5c5e\u6027\u4fee\u9970\u5b83\u3002 \u4f7f\u7528\u5e2e\u52a9\u5668\u65b9\u6cd5\u5b9e\u73b0\u6d4b\u8bd5 StartWorkflow\uff08\uff09 \u7b49\u5f85\u5de5\u4f5c\u6d41\u5b8c\u6210\uff08\uff09 WaitForEventSubscription\uff08\uff09 GetStatus\uff08\uff09 GetData\uff08\uff09 \u672a\u5904\u7406\u7684 Steperrors [TestFixture] public class NUnitTest : WorkflowTest<MyWorkflow, MyDataClass> { [SetUp] protected override void Setup() { base.Setup(); } [Test] public void NUnit_workflow_test_sample() { var workflowId = StartWorkflow(new MyDataClass() { Value1 = 2, Value2 = 3 }); WaitForWorkflowToComplete(workflowId, TimeSpan.FromSeconds(30)); GetStatus(workflowId).Should().Be(WorkflowStatus.Complete); UnhandledStepErrors.Count.Should().Be(0); GetData(workflowId).Value3.Should().Be(5); } }","title":"Test helpers"},{"location":"test-helpers/#_1","text":"\u4e3a\u57fa\u4e8e WorkflowCore \u6784\u5efa\u7684\u5de5\u4f5c\u6d41\u7f16\u5199\u6d4b\u8bd5\u63d0\u4f9b\u652f\u6301","title":"\u5de5\u4f5c\u6d41\u6838\u5fc3\u7684\u6d4b\u8bd5\u52a9\u624b"},{"location":"test-helpers/#_2","text":"\u5b89\u88c5 NuGet \u5305\u201cWorkflowCore.testing \u201d PM> Install-Package WorkflowCore.Testing","title":"\u6b63\u5728\u5b89\u88c5"},{"location":"test-helpers/#_3","text":"","title":"\u7528\u6cd5"},{"location":"test-helpers/#xunit","text":"\u521b\u5efa\u4ece WorkflowTest \u7ee7\u627f\u7684\u7c7b \u5728\u6784\u9020\u51fd\u6570\u4e2d\u8c03\u7528 setup\uff08\uff09\u65b9\u6cd5 \u4f7f\u7528\u5e2e\u52a9\u5668\u65b9\u6cd5\u5b9e\u73b0\u6d4b\u8bd5 StartWorkflow\uff08\uff09 \u7b49\u5f85\u5de5\u4f5c\u6d41\u5b8c\u6210\uff08\uff09 WaitForEventSubscription\uff08\uff09 GetStatus\uff08\uff09 GetData\uff08\uff09 \u672a\u5904\u7406\u7684 Steperrors public class xUnitTest : WorkflowTest<MyWorkflow, MyDataClass> { public xUnitTest() { Setup(); } [Fact] public void MyWorkflow() { var workflowId = StartWorkflow(new MyDataClass() { Value1 = 2, Value2 = 3 }); WaitForWorkflowToComplete(workflowId, TimeSpan.FromSeconds(30)); GetStatus(workflowId).Should().Be(WorkflowStatus.Complete); UnhandledStepErrors.Count.Should().Be(0); GetData(workflowId).Value3.Should().Be(5); } }","title":"\u4f7f\u7528 xUnit"},{"location":"test-helpers/#nunit","text":"\u521b\u5efa\u4e00\u4e2a\u7ee7\u627f\u81ea WorkflowTest \u7684\u7c7b\uff0c\u5e76\u7528 \u6d4b\u8bd5\u6cbb\u5177 \u5c5e\u6027\u4fee\u9970\u5b83 \u91cd\u5199 setup \u65b9\u6cd5\u5e76\u7528 \u8bbe\u7f6e \u5c5e\u6027\u4fee\u9970\u5b83\u3002 \u4f7f\u7528\u5e2e\u52a9\u5668\u65b9\u6cd5\u5b9e\u73b0\u6d4b\u8bd5 StartWorkflow\uff08\uff09 \u7b49\u5f85\u5de5\u4f5c\u6d41\u5b8c\u6210\uff08\uff09 WaitForEventSubscription\uff08\uff09 GetStatus\uff08\uff09 GetData\uff08\uff09 \u672a\u5904\u7406\u7684 Steperrors [TestFixture] public class NUnitTest : WorkflowTest<MyWorkflow, MyDataClass> { [SetUp] protected override void Setup() { base.Setup(); } [Test] public void NUnit_workflow_test_sample() { var workflowId = StartWorkflow(new MyDataClass() { Value1 = 2, Value2 = 3 }); WaitForWorkflowToComplete(workflowId, TimeSpan.FromSeconds(30)); GetStatus(workflowId).Should().Be(WorkflowStatus.Complete); UnhandledStepErrors.Count.Should().Be(0); GetData(workflowId).Value3.Should().Be(5); } }","title":"\u4f7f\u7528 NUnit"},{"location":"using-with-aspnet-core/","text":"\u4e0e ASP.NET \u6838\u5fc3\u4e00\u8d77\u4f7f\u7528 \u5982\u4f55\u5728 ASP.NET \u6838\u5fc3\u5e94\u7528\u7a0b\u5e8f\u4e2d\u8fdb\u884c\u914d\u7f6e \u5728\u542f\u52a8\u7c7b\u4e2d\uff0c\u4f7f\u7528 AddWorkflow \u6269\u5c55\u65b9\u6cd5\u914d\u7f6e\u5de5\u4f5c\u6d41\u6838\u5fc3\u670d\u52a1\uff0c\u7136\u540e\u5728\u914d\u7f6e\u5e94\u7528\u7a0b\u5e8f\u65f6\u6ce8\u518c\u5de5\u4f5c\u6d41\u5e76\u542f\u52a8\u4e3b\u673a\u3002 public class Startup { public Startup(IConfiguration configuration) { Configuration = configuration; } public IConfiguration Configuration { get; } public void ConfigureServices(IServiceCollection services) { services.AddMvc(); services.AddWorkflow(cfg => { cfg.UseMongoDB(@\"mongodb://mongo:27017\", \"workflow\"); cfg.UseElasticsearch(new ConnectionSettings(new Uri(\"http://elastic:9200\")), \"workflows\"); }); } public void Configure(IApplicationBuilder app, IHostingEnvironment env) { if (env.IsDevelopment()) { app.UseDeveloperExceptionPage(); } app.UseMvc(); var host = app.ApplicationServices.GetService<IWorkflowHost>(); host.RegisterWorkflow<TestWorkflow, MyDataClass>(); host.Start(); } } \u7528\u6cd5 \u73b0\u5728\uff0c\u53ea\u9700\u5c06\u6240\u9700\u7684\u670d\u52a1\u6ce8\u5165\u5230\u63a7\u5236\u5668\u4e2d\u5373\u53ef\u3002 * IWorkflowController * IWorkFlowHost * ISearchindex * IPersistenceProvider","title":"ASP.NET Core"},{"location":"using-with-aspnet-core/#aspnet","text":"","title":"\u4e0e ASP.NET \u6838\u5fc3\u4e00\u8d77\u4f7f\u7528"},{"location":"using-with-aspnet-core/#aspnet_1","text":"\u5728\u542f\u52a8\u7c7b\u4e2d\uff0c\u4f7f\u7528 AddWorkflow \u6269\u5c55\u65b9\u6cd5\u914d\u7f6e\u5de5\u4f5c\u6d41\u6838\u5fc3\u670d\u52a1\uff0c\u7136\u540e\u5728\u914d\u7f6e\u5e94\u7528\u7a0b\u5e8f\u65f6\u6ce8\u518c\u5de5\u4f5c\u6d41\u5e76\u542f\u52a8\u4e3b\u673a\u3002 public class Startup { public Startup(IConfiguration configuration) { Configuration = configuration; } public IConfiguration Configuration { get; } public void ConfigureServices(IServiceCollection services) { services.AddMvc(); services.AddWorkflow(cfg => { cfg.UseMongoDB(@\"mongodb://mongo:27017\", \"workflow\"); cfg.UseElasticsearch(new ConnectionSettings(new Uri(\"http://elastic:9200\")), \"workflows\"); }); } public void Configure(IApplicationBuilder app, IHostingEnvironment env) { if (env.IsDevelopment()) { app.UseDeveloperExceptionPage(); } app.UseMvc(); var host = app.ApplicationServices.GetService<IWorkflowHost>(); host.RegisterWorkflow<TestWorkflow, MyDataClass>(); host.Start(); } }","title":"\u5982\u4f55\u5728 ASP.NET \u6838\u5fc3\u5e94\u7528\u7a0b\u5e8f\u4e2d\u8fdb\u884c\u914d\u7f6e"},{"location":"using-with-aspnet-core/#_1","text":"\u73b0\u5728\uff0c\u53ea\u9700\u5c06\u6240\u9700\u7684\u670d\u52a1\u6ce8\u5165\u5230\u63a7\u5236\u5668\u4e2d\u5373\u53ef\u3002 * IWorkflowController * IWorkFlowHost * ISearchindex * IPersistenceProvider","title":"\u7528\u6cd5"},{"location":"workflow-middleware/","text":"\u5de5\u4f5c\u6d41\u4e2d\u95f4\u4ef6 \u53ef\u4ee5\u4f7f\u7528\u5728\u5de5\u4f5c\u6d41\u5f00\u59cb/\u5b8c\u6210\u4e4b\u524d/\u4e4b\u540e\u8fd0\u884c\u7684\u4e2d\u95f4\u4ef6\u4ee5\u53ca\u56f4\u7ed5\u5de5\u4f5c\u6d41\u6b65\u9aa4\u8fd0\u884c\u7684\u4e2d\u95f4\u4ef6\u6765\u6269\u5c55\u5de5\u4f5c\u6d41\uff0c\u4ee5\u4fbf\u5728\u5b9e\u73b0\u6a2a\u5207\u5173\u6ce8\u70b9\uff08\u5982 \u5bf9\u6570\u76f8\u5173 \u3001 retries \u548c\u5176\u4ed6\u7528\u4f8b\uff09\u65f6\u63d0\u4f9b\u7075\u6d3b\u6027\u3002 \u8fd9\u662f\u901a\u8fc7\u5b9e\u73b0\u548c\u6ce8\u518c IWorkflowMiddleware \u5de5\u4f5c\u6d41\u6216 IWorkflowStepMiddleware \u6b65\u9aa4\u6765\u5b8c\u6210\u7684\u3002 STEP \u4e2d\u95f4\u4ef6 STEP \u4e2d\u95f4\u4ef6\u5141\u8bb8\u4f60\u56f4\u7ed5\u7ed9\u5b9a\u6b65\u9aa4\u7684\u6267\u884c\u8fd0\u884c\u5176\u4ed6\u4ee3\u7801\uff0c\u5e76\u66f4\u6539\u5176\u884c\u4e3a\u3002\u4efb\u4f55\u719f\u6089 ASP.NET \u6838\u5fc3\u7684\u4e2d\u95f4\u4ef6\u7ba1\u9053 Or[ HttpClient s DelegatingHandler \u4e2d\u95f4\u4ef6]\uff08https\uff1a//docs.microsoft.com/en-us/aspnet/core/fundamentals/http-requests\uff1fview=aspnetcore-3.1#outgoing-request-middleware\uff09\u7684\u4eba\u90fd\u5e94\u8be5\u719f\u6089 STEP \u4e2d\u95f4\u4ef6\u7684\u5b9e\u73b0\u3002 \u7528\u6cd5 \u9996\u5148\uff0c\u521b\u5efa\u4f60\u81ea\u5df1\u7684\u4e2d\u95f4\u4ef6\u7c7b\u6765\u5b9e\u73b0 IWorkflowStepMiddleware \u3002\u4e0b\u9762\u662f\u4e00\u4e2a\u4e2d\u95f4\u4ef6\u7684\u793a\u4f8b\uff0c\u5b83\u5c06\u5de5\u4f5c\u6d41 ID \u548c\u6b65\u9aa4 ID \u6dfb\u52a0\u5230\u5e94\u7528\u7a0b\u5e8f\u4e2d\u6bcf\u4e2a\u5de5\u4f5c\u6d41\u6b65\u9aa4\u7684\u65e5\u5fd7\u5173\u8054\u4e0a\u4e0b\u6587\u4e2d\u3002 \u91cd\u8981\uff1a \u4f60\u5fc5\u987b\u786e\u4fdd\u5c06\u8c03\u7528 next() \u4f5c\u4e3a\u4e2d\u95f4\u4ef6\u7684\u4e00\u90e8\u5206\u3002\u5982\u679c\u4f60\u4e0d\u8fd9\u6837\u505a\uff0c\u4f60\u7684\u6b65\u4f10\u5c06\u6c38\u8fdc\u4e0d\u4f1a\u8fd0\u884c\u3002 public class LogCorrelationStepMiddleware : IWorkflowStepMiddleware { private readonly ILogger<LogCorrelationStepMiddleware> _log; public LogCorrelationStepMiddleware( ILogger<LogCorrelationStepMiddleware> log) { _log = log; } public async Task<ExecutionResult> HandleAsync( IStepExecutionContext context, IStepBody body, WorkflowStepDelegate next) { var workflowId = context.Workflow.Id; var stepId = context.Step.Id; // Uses log scope to add a few attributes to the scope using (_log.BeginScope(\"{@WorkflowId}\", workflowId)) using (_log.BeginScope(\"{@StepId}\", stepId)) { // Calling next ensures step gets executed return await next(); } } } \u4e0b\u9762\u662f\u53e6\u4e00\u4e2a\u4e2d\u95f4\u4ef6\u793a\u4f8b\uff0c\u5b83\u4f7f\u7528 Polly DotNet Resiliency Library \u6839\u636e\u81ea\u5b9a\u4e49\u91cd\u8bd5\u7b56\u7565\u5728\u5de5\u4f5c\u6d41\u6b65\u9aa4\u4e0a\u5b9e\u73b0\u91cd\u8bd5\u3002 public class PollyRetryStepMiddleware : IWorkflowStepMiddleware { private const string StepContextKey = \"WorkflowStepContext\"; private const int MaxRetries = 3; private readonly ILogger<PollyRetryStepMiddleware> _log; public PollyRetryMiddleware(ILogger<PollyRetryStepMiddleware> log) { _log = log; } // Consult Polly's docs for more information on how to build // retry policies: // https://github.com/App-vNext/Polly public IAsyncPolicy<ExecutionResult> GetRetryPolicy() => Policy<ExecutionResult> .Handle<TimeoutException>() .RetryAsync( MaxRetries, (result, retryCount, context) => UpdateRetryCount( result.Exception, retryCount, context[StepContextKey] as IStepExecutionContext) ); public async Task<ExecutionResult> HandleAsync( IStepExecutionContext context, IStepBody body, WorkflowStepDelegate next ) { return await GetRetryPolicy().ExecuteAsync( ctx => next(), // The step execution context gets passed down so that // the step is accessible within the retry policy new Dictionary<string, object> { { StepContextKey, context } }); } private Task UpdateRetryCount( Exception exception, int retryCount, IStepExecutionContext stepContext) { var stepInstance = stepContext.ExecutionPointer; stepInstance.RetryCount = retryCount; return Task.CompletedTask; } } \u524d/\u540e\u5de5\u4f5c\u6d41\u4e2d\u95f4\u4ef6 \u5de5\u4f5c\u6d41\u4e2d\u95f4\u4ef6\u5728\u5de5\u4f5c\u6d41\u5f00\u59cb\u4e4b\u524d\u6216\u5b8c\u6210\u4e4b\u540e\u8fd0\u884c\uff0c\u53ef\u7528\u4e8e\u6302\u63a5\u5230\u5de5\u4f5c\u6d41\u751f\u547d\u5468\u671f\u6216\u5728\u5de5\u4f5c\u6d41\u5f00\u59cb\u4e4b\u524d\u66f4\u6539\u5de5\u4f5c\u6d41\u672c\u8eab\u3002 \u9884\u5de5\u4f5c\u6d41\u4e2d\u95f4\u4ef6 \u8fd9\u4e9b\u4e2d\u95f4\u4ef6\u5728\u5de5\u4f5c\u6d41\u542f\u52a8\u4e4b\u524d\u8fd0\u884c\uff0c\u5e76\u4e14\u53ef\u80fd\u4f1a\u66f4\u6539\u4e0a\u7684 WorkflowInstance \u5c5e\u6027\u3002 \u4e0b\u9762\u7684\u793a\u4f8b\u8bf4\u660e\u4e86\u5982\u4f55\u4f7f\u7528\u4e2d\u95f4\u4ef6\u8bbe\u7f6e Description \u4e0a\u7684 WorkflowInstance \u5c5e\u6027\uff0c\u8be5\u4e2d\u95f4\u4ef6\u89e3\u91ca\u4f20\u9012\u7684\u5de5\u4f5c\u6d41\u4e0a\u7684\u6570\u636e\u3002\u5f53\u4f60\u5e0c\u671b\u4ece\u4f20\u9012\u7ed9\u5de5\u4f5c\u6d41\u7684\u6570\u636e\u4e2d\u5bfc\u51fa\u5de5\u4f5c\u6d41\u7684\u63cf\u8ff0\u65f6\uff0c\u8fd9\u975e\u5e38\u6709\u7528\u3002 \u8bf7\u6ce8\u610f\uff0c\u4f7f\u7528 WorkflowMiddlewarePhase.PreWorkflow \u53ef\u6307\u5b9a\u5b83\u5728\u5de5\u4f5c\u6d41\u5f00\u59cb\u4e4b\u524d\u8fd0\u884c\u3002 \u91cd\u8981\uff1a \u4f60\u5e94\u8be5\u5c06\u8c03\u7528 next \u4f5c\u4e3a\u5de5\u4f5c\u6d41\u4e2d\u95f4\u4ef6\u7684\u4e00\u90e8\u5206\uff0c\u4ee5\u786e\u4fdd\u94fe\u4e2d\u7684\u4e0b\u4e00\u4e2a\u5de5\u4f5c\u6d41\u8fd0\u884c\u3002 // AddDescriptionWorkflowMiddleware.cs public class AddDescriptionWorkflowMiddleware : IWorkflowMiddleware { public WorkflowMiddlewarePhase Phase => WorkflowMiddlewarePhase.PreWorkflow; public Task HandleAsync( WorkflowInstance workflow, WorkflowDelegate next ) { if (workflow.Data is IDescriptiveWorkflowParams descriptiveParams) { workflow.Description = descriptiveParams.Description; } return next(); } } // IDescriptiveWorkflowParams.cs public interface IDescriptiveWorkflowParams { string Description { get; } } // MyWorkflowParams.cs public MyWorkflowParams : IDescriptiveWorkflowParams { public string Description => $\"Run task '{TaskName}'\"; public string TaskName { get; set; } } \u9884\u5de5\u4f5c\u6d41\u4e2d\u95f4\u4ef6\u4e2d\u7684\u5f02\u5e38\u5904\u7406 \u5de5\u4f5c\u6d41\u524d\u4e2d\u95f4\u4ef6\u5f02\u5e38\u5904\u7406\u7684\u5904\u7406\u65b9\u5f0f\u4e0e\u5de5\u4f5c\u6d41\u540e\u4e2d\u95f4\u4ef6\u4e0d\u540c\u3002\u7531\u4e8e\u4e2d\u95f4\u4ef6\u5728\u5de5\u4f5c\u6d41\u5f00\u59cb\u4e4b\u524d\u8fd0\u884c\uff0c\u56e0\u6b64\u524d\u5de5\u4f5c\u6d41\u4e2d\u95f4\u4ef6\u4e2d\u629b\u51fa\u7684\u4efb\u4f55\u5f02\u5e38\u90fd\u5c06\u5192\u6ce1\u5230 StartWorkflow \u65b9\u6cd5\u4e2d\uff0c\u5e76\u7531\u7684\u8c03\u7528\u65b9 StartWorkflow \u6765\u5904\u7406\u5f02\u5e38\u5e76\u91c7\u53d6\u76f8\u5e94\u7684\u884c\u52a8\u3002 public async Task MyMethodThatStartsAWorkflow() { try { await host.StartWorkflow(\"HelloWorld\", 1, null); } catch(Exception ex) { // Handle the exception appropriately } } \u53d1\u5e03\u5de5\u4f5c\u6d41\u4e2d\u95f4\u4ef6 \u8fd9\u4e9b\u4e2d\u95f4\u4ef6\u5728\u5de5\u4f5c\u6d41\u5b8c\u6210\u540e\u8fd0\u884c\uff0c\u53ef\u7528\u4e8e\u4e3a\u5e94\u7528\u7a0b\u5e8f\u4e2d\u7684\u6240\u6709\u5de5\u4f5c\u6d41\u6267\u884c\u5176\u4ed6\u64cd\u4f5c\u3002 \u4ee5\u4e0b\u793a\u4f8b\u8bf4\u660e\u4e86\u5982\u4f55\u4f7f\u7528\u53d1\u5e03\u5de5\u4f5c\u6d41\u4e2d\u95f4\u4ef6\u5c06\u5de5\u4f5c\u6d41\u7684\u6458\u8981\u6253\u5370\u5230\u63a7\u5236\u53f0\u3002 \u8bf7\u6ce8\u610f\uff0c\u4f7f\u7528 WorkflowMiddlewarePhase.PostWorkflow \u53ef\u6307\u5b9a\u5b83\u5728\u5de5\u4f5c\u6d41\u5b8c\u6210\u540e\u8fd0\u884c\u3002 \u91cd\u8981\uff1a \u4f60\u5e94\u8be5\u5c06\u8c03\u7528 next \u4f5c\u4e3a\u5de5\u4f5c\u6d41\u4e2d\u95f4\u4ef6\u7684\u4e00\u90e8\u5206\uff0c\u4ee5\u786e\u4fdd\u94fe\u4e2d\u7684\u4e0b\u4e00\u4e2a\u5de5\u4f5c\u6d41\u8fd0\u884c\u3002 public class PrintWorkflowSummaryMiddleware : IWorkflowMiddleware { private readonly ILogger<PrintWorkflowSummaryMiddleware> _log; public PrintWorkflowSummaryMiddleware( ILogger<PrintWorkflowSummaryMiddleware> log ) { _log = log; } public WorkflowMiddlewarePhase Phase => WorkflowMiddlewarePhase.PostWorkflow; public Task HandleAsync( WorkflowInstance workflow, WorkflowDelegate next ) { if (!workflow.CompleteTime.HasValue) { return next(); } var duration = workflow.CompleteTime.Value - workflow.CreateTime; _log.LogInformation($@\"Workflow {workflow.Description} completed in {duration:g}\"); foreach (var step in workflow.ExecutionPointers) { var stepName = step.StepName; var stepDuration = (step.EndTime - step.StartTime) ?? TimeSpan.Zero; _log.LogInformation($\" - Step {stepName} completed in {stepDuration:g}\"); } return next(); } } \u540e\u5de5\u4f5c\u6d41\u4e2d\u95f4\u4ef6\u4e2d\u7684\u5f02\u5e38\u5904\u7406 \u5de5\u4f5c\u6d41\u540e\u4e2d\u95f4\u4ef6\u5f02\u5e38\u5904\u7406\u7684\u5904\u7406\u65b9\u5f0f\u4e0e\u5de5\u4f5c\u6d41\u524d\u4e2d\u95f4\u4ef6\u4e0d\u540c\u3002\u5728\u5de5\u4f5c\u6d41\u5b8c\u6210\u65f6\uff0c\u4f60\u7684\u5de5\u4f5c\u6d41\u5df2\u7ecf\u8fd0\u884c\uff0c\u56e0\u6b64\u5f88\u96be\u5904\u7406\u672a\u6355\u83b7\u7684\u5f02\u5e38\u3002 \u9ed8\u8ba4\u60c5\u51b5\u4e0b\uff0c\u5982\u679c\u5de5\u4f5c\u6d41\u4e2d\u95f4\u4ef6\u629b\u51fa\u5f02\u5e38\uff0c\u5219\u5c06\u8bb0\u5f55\u8be5\u5f02\u5e38\uff0c\u5e76\u4e14\u5de5\u4f5c\u6d41\u5c06\u6b63\u5e38\u5b8c\u6210\u3002\u4f46\u662f\uff0c\u8fd9\u79cd\u884c\u4e3a\u662f\u53ef\u4ee5\u6539\u53d8\u7684\u3002 \u8981\u8986\u76d6\u5e94\u7528\u7a0b\u5e8f\u4e2d\u6240\u6709\u5de5\u4f5c\u6d41\u7684\u9ed8\u8ba4\u540e\u5de5\u4f5c\u6d41\u9519\u8bef\u5904\u7406\uff0c\u53ea\u9700\u5728\u4f9d\u8d56\u6ce8\u5165\u6846\u67b6\u4e2d\u6ce8\u518c\u4e00\u4e2a\u65b0 IWorkflowMiddlewareErrorHandler \u7684\u81ea\u5b9a\u4e49\u884c\u4e3a\uff0c\u5982\u4e0b\u6240\u793a\u3002 // CustomMiddlewareErrorHandler.cs public class CustomHandler : IWorkflowMiddlewareErrorHandler { public Task HandleAsync(Exception ex) { // Handle your error asynchronously } } // Startup.cs public void ConfigureServices(IServiceCollection services) { // Other workflow configuration services.AddWorkflow(); // Should go after .AddWorkflow() services.AddTransient<IWorkflowMiddlewareErrorHandler, CustomHandler>(); } \u6ce8\u518c\u4e2d\u95f4\u4ef6 \u4e3a\u4e86\u4f7f\u4e2d\u95f4\u4ef6\u751f\u6548\uff0c\u5fc5\u987b\u4f7f\u7528\u4fbf\u5229\u52a9\u624b\u5411\u5185\u7f6e\u7684\u4f9d\u8d56\u6ce8\u5165\u6846\u67b6\u6ce8\u518c\u5b83\u4eec\u3002 \u6ce8\u610f\uff1a \u4e2d\u95f4\u4ef6\u5c06\u6309\u7167\u5176\u6ce8\u518c\u7684\u987a\u5e8f\u8fd0\u884c\uff0c\u8fd9\u4e9b\u6ce8\u518c\u8f83\u65e9\u7684\u4e2d\u95f4\u4ef6\u5728\u94fe\u4e2d\u8f83\u65e9\u8fd0\u884c\uff0c\u5e76\u5728\u94fe\u4e2d\u8f83\u665a\u7ed3\u675f\u3002\u5bf9\u4e8e\u524d\u7f6e/\u540e\u7f6e\u5de5\u4f5c\u6d41\u4e2d\u95f4\u4ef6\uff0c\u6240\u6709\u524d\u7f6e\u4e2d\u95f4\u4ef6\u5c06\u5728\u5de5\u4f5c\u6d41\u5f00\u59cb\u524d\u8fd0\u884c\uff0c\u6240\u6709\u540e\u7f6e\u4e2d\u95f4\u4ef6\u5c06\u5728\u5de5\u4f5c\u6d41\u5b8c\u6210\u540e\u8fd0\u884c\u3002 public class Startup { public void ConfigureServices(IServiceCollection services) { ... // Add workflow middleware services.AddWorkflowMiddleware<AddDescriptionWorkflowMiddleware>(); services.AddWorkflowMiddleware<PrintWorkflowSummaryMiddleware>(); // Add step middleware services.AddWorkflowStepMiddleware<LogCorrelationStepMiddleware>(); services.AddWorkflowStepMiddleware<PollyRetryMiddleware>(); ... } } \u66f4\u591a\u4fe1\u606f \u6709\u5173\u5de5\u4f5c\u6d41\u4e2d\u95f4\u4ef6\u7684\u5b8c\u6574\u793a\u4f8b\uff0c\u8bf7\u53c2\u89c1 \u5de5\u4f5c\u6d41\u4e2d\u95f4\u4ef6 \u793a\u4f8b\u3002","title":"Middleware"},{"location":"workflow-middleware/#_1","text":"\u53ef\u4ee5\u4f7f\u7528\u5728\u5de5\u4f5c\u6d41\u5f00\u59cb/\u5b8c\u6210\u4e4b\u524d/\u4e4b\u540e\u8fd0\u884c\u7684\u4e2d\u95f4\u4ef6\u4ee5\u53ca\u56f4\u7ed5\u5de5\u4f5c\u6d41\u6b65\u9aa4\u8fd0\u884c\u7684\u4e2d\u95f4\u4ef6\u6765\u6269\u5c55\u5de5\u4f5c\u6d41\uff0c\u4ee5\u4fbf\u5728\u5b9e\u73b0\u6a2a\u5207\u5173\u6ce8\u70b9\uff08\u5982 \u5bf9\u6570\u76f8\u5173 \u3001 retries \u548c\u5176\u4ed6\u7528\u4f8b\uff09\u65f6\u63d0\u4f9b\u7075\u6d3b\u6027\u3002 \u8fd9\u662f\u901a\u8fc7\u5b9e\u73b0\u548c\u6ce8\u518c IWorkflowMiddleware \u5de5\u4f5c\u6d41\u6216 IWorkflowStepMiddleware \u6b65\u9aa4\u6765\u5b8c\u6210\u7684\u3002","title":"\u5de5\u4f5c\u6d41\u4e2d\u95f4\u4ef6"},{"location":"workflow-middleware/#step","text":"STEP \u4e2d\u95f4\u4ef6\u5141\u8bb8\u4f60\u56f4\u7ed5\u7ed9\u5b9a\u6b65\u9aa4\u7684\u6267\u884c\u8fd0\u884c\u5176\u4ed6\u4ee3\u7801\uff0c\u5e76\u66f4\u6539\u5176\u884c\u4e3a\u3002\u4efb\u4f55\u719f\u6089 ASP.NET \u6838\u5fc3\u7684\u4e2d\u95f4\u4ef6\u7ba1\u9053 Or[ HttpClient s DelegatingHandler \u4e2d\u95f4\u4ef6]\uff08https\uff1a//docs.microsoft.com/en-us/aspnet/core/fundamentals/http-requests\uff1fview=aspnetcore-3.1#outgoing-request-middleware\uff09\u7684\u4eba\u90fd\u5e94\u8be5\u719f\u6089 STEP \u4e2d\u95f4\u4ef6\u7684\u5b9e\u73b0\u3002","title":"STEP \u4e2d\u95f4\u4ef6"},{"location":"workflow-middleware/#_2","text":"\u9996\u5148\uff0c\u521b\u5efa\u4f60\u81ea\u5df1\u7684\u4e2d\u95f4\u4ef6\u7c7b\u6765\u5b9e\u73b0 IWorkflowStepMiddleware \u3002\u4e0b\u9762\u662f\u4e00\u4e2a\u4e2d\u95f4\u4ef6\u7684\u793a\u4f8b\uff0c\u5b83\u5c06\u5de5\u4f5c\u6d41 ID \u548c\u6b65\u9aa4 ID \u6dfb\u52a0\u5230\u5e94\u7528\u7a0b\u5e8f\u4e2d\u6bcf\u4e2a\u5de5\u4f5c\u6d41\u6b65\u9aa4\u7684\u65e5\u5fd7\u5173\u8054\u4e0a\u4e0b\u6587\u4e2d\u3002 \u91cd\u8981\uff1a \u4f60\u5fc5\u987b\u786e\u4fdd\u5c06\u8c03\u7528 next() \u4f5c\u4e3a\u4e2d\u95f4\u4ef6\u7684\u4e00\u90e8\u5206\u3002\u5982\u679c\u4f60\u4e0d\u8fd9\u6837\u505a\uff0c\u4f60\u7684\u6b65\u4f10\u5c06\u6c38\u8fdc\u4e0d\u4f1a\u8fd0\u884c\u3002 public class LogCorrelationStepMiddleware : IWorkflowStepMiddleware { private readonly ILogger<LogCorrelationStepMiddleware> _log; public LogCorrelationStepMiddleware( ILogger<LogCorrelationStepMiddleware> log) { _log = log; } public async Task<ExecutionResult> HandleAsync( IStepExecutionContext context, IStepBody body, WorkflowStepDelegate next) { var workflowId = context.Workflow.Id; var stepId = context.Step.Id; // Uses log scope to add a few attributes to the scope using (_log.BeginScope(\"{@WorkflowId}\", workflowId)) using (_log.BeginScope(\"{@StepId}\", stepId)) { // Calling next ensures step gets executed return await next(); } } } \u4e0b\u9762\u662f\u53e6\u4e00\u4e2a\u4e2d\u95f4\u4ef6\u793a\u4f8b\uff0c\u5b83\u4f7f\u7528 Polly DotNet Resiliency Library \u6839\u636e\u81ea\u5b9a\u4e49\u91cd\u8bd5\u7b56\u7565\u5728\u5de5\u4f5c\u6d41\u6b65\u9aa4\u4e0a\u5b9e\u73b0\u91cd\u8bd5\u3002 public class PollyRetryStepMiddleware : IWorkflowStepMiddleware { private const string StepContextKey = \"WorkflowStepContext\"; private const int MaxRetries = 3; private readonly ILogger<PollyRetryStepMiddleware> _log; public PollyRetryMiddleware(ILogger<PollyRetryStepMiddleware> log) { _log = log; } // Consult Polly's docs for more information on how to build // retry policies: // https://github.com/App-vNext/Polly public IAsyncPolicy<ExecutionResult> GetRetryPolicy() => Policy<ExecutionResult> .Handle<TimeoutException>() .RetryAsync( MaxRetries, (result, retryCount, context) => UpdateRetryCount( result.Exception, retryCount, context[StepContextKey] as IStepExecutionContext) ); public async Task<ExecutionResult> HandleAsync( IStepExecutionContext context, IStepBody body, WorkflowStepDelegate next ) { return await GetRetryPolicy().ExecuteAsync( ctx => next(), // The step execution context gets passed down so that // the step is accessible within the retry policy new Dictionary<string, object> { { StepContextKey, context } }); } private Task UpdateRetryCount( Exception exception, int retryCount, IStepExecutionContext stepContext) { var stepInstance = stepContext.ExecutionPointer; stepInstance.RetryCount = retryCount; return Task.CompletedTask; } }","title":"\u7528\u6cd5"},{"location":"workflow-middleware/#_3","text":"\u5de5\u4f5c\u6d41\u4e2d\u95f4\u4ef6\u5728\u5de5\u4f5c\u6d41\u5f00\u59cb\u4e4b\u524d\u6216\u5b8c\u6210\u4e4b\u540e\u8fd0\u884c\uff0c\u53ef\u7528\u4e8e\u6302\u63a5\u5230\u5de5\u4f5c\u6d41\u751f\u547d\u5468\u671f\u6216\u5728\u5de5\u4f5c\u6d41\u5f00\u59cb\u4e4b\u524d\u66f4\u6539\u5de5\u4f5c\u6d41\u672c\u8eab\u3002","title":"\u524d/\u540e\u5de5\u4f5c\u6d41\u4e2d\u95f4\u4ef6"},{"location":"workflow-middleware/#_4","text":"\u8fd9\u4e9b\u4e2d\u95f4\u4ef6\u5728\u5de5\u4f5c\u6d41\u542f\u52a8\u4e4b\u524d\u8fd0\u884c\uff0c\u5e76\u4e14\u53ef\u80fd\u4f1a\u66f4\u6539\u4e0a\u7684 WorkflowInstance \u5c5e\u6027\u3002 \u4e0b\u9762\u7684\u793a\u4f8b\u8bf4\u660e\u4e86\u5982\u4f55\u4f7f\u7528\u4e2d\u95f4\u4ef6\u8bbe\u7f6e Description \u4e0a\u7684 WorkflowInstance \u5c5e\u6027\uff0c\u8be5\u4e2d\u95f4\u4ef6\u89e3\u91ca\u4f20\u9012\u7684\u5de5\u4f5c\u6d41\u4e0a\u7684\u6570\u636e\u3002\u5f53\u4f60\u5e0c\u671b\u4ece\u4f20\u9012\u7ed9\u5de5\u4f5c\u6d41\u7684\u6570\u636e\u4e2d\u5bfc\u51fa\u5de5\u4f5c\u6d41\u7684\u63cf\u8ff0\u65f6\uff0c\u8fd9\u975e\u5e38\u6709\u7528\u3002 \u8bf7\u6ce8\u610f\uff0c\u4f7f\u7528 WorkflowMiddlewarePhase.PreWorkflow \u53ef\u6307\u5b9a\u5b83\u5728\u5de5\u4f5c\u6d41\u5f00\u59cb\u4e4b\u524d\u8fd0\u884c\u3002 \u91cd\u8981\uff1a \u4f60\u5e94\u8be5\u5c06\u8c03\u7528 next \u4f5c\u4e3a\u5de5\u4f5c\u6d41\u4e2d\u95f4\u4ef6\u7684\u4e00\u90e8\u5206\uff0c\u4ee5\u786e\u4fdd\u94fe\u4e2d\u7684\u4e0b\u4e00\u4e2a\u5de5\u4f5c\u6d41\u8fd0\u884c\u3002 // AddDescriptionWorkflowMiddleware.cs public class AddDescriptionWorkflowMiddleware : IWorkflowMiddleware { public WorkflowMiddlewarePhase Phase => WorkflowMiddlewarePhase.PreWorkflow; public Task HandleAsync( WorkflowInstance workflow, WorkflowDelegate next ) { if (workflow.Data is IDescriptiveWorkflowParams descriptiveParams) { workflow.Description = descriptiveParams.Description; } return next(); } } // IDescriptiveWorkflowParams.cs public interface IDescriptiveWorkflowParams { string Description { get; } } // MyWorkflowParams.cs public MyWorkflowParams : IDescriptiveWorkflowParams { public string Description => $\"Run task '{TaskName}'\"; public string TaskName { get; set; } }","title":"\u9884\u5de5\u4f5c\u6d41\u4e2d\u95f4\u4ef6"},{"location":"workflow-middleware/#_5","text":"\u5de5\u4f5c\u6d41\u524d\u4e2d\u95f4\u4ef6\u5f02\u5e38\u5904\u7406\u7684\u5904\u7406\u65b9\u5f0f\u4e0e\u5de5\u4f5c\u6d41\u540e\u4e2d\u95f4\u4ef6\u4e0d\u540c\u3002\u7531\u4e8e\u4e2d\u95f4\u4ef6\u5728\u5de5\u4f5c\u6d41\u5f00\u59cb\u4e4b\u524d\u8fd0\u884c\uff0c\u56e0\u6b64\u524d\u5de5\u4f5c\u6d41\u4e2d\u95f4\u4ef6\u4e2d\u629b\u51fa\u7684\u4efb\u4f55\u5f02\u5e38\u90fd\u5c06\u5192\u6ce1\u5230 StartWorkflow \u65b9\u6cd5\u4e2d\uff0c\u5e76\u7531\u7684\u8c03\u7528\u65b9 StartWorkflow \u6765\u5904\u7406\u5f02\u5e38\u5e76\u91c7\u53d6\u76f8\u5e94\u7684\u884c\u52a8\u3002 public async Task MyMethodThatStartsAWorkflow() { try { await host.StartWorkflow(\"HelloWorld\", 1, null); } catch(Exception ex) { // Handle the exception appropriately } }","title":"\u9884\u5de5\u4f5c\u6d41\u4e2d\u95f4\u4ef6\u4e2d\u7684\u5f02\u5e38\u5904\u7406"},{"location":"workflow-middleware/#_6","text":"\u8fd9\u4e9b\u4e2d\u95f4\u4ef6\u5728\u5de5\u4f5c\u6d41\u5b8c\u6210\u540e\u8fd0\u884c\uff0c\u53ef\u7528\u4e8e\u4e3a\u5e94\u7528\u7a0b\u5e8f\u4e2d\u7684\u6240\u6709\u5de5\u4f5c\u6d41\u6267\u884c\u5176\u4ed6\u64cd\u4f5c\u3002 \u4ee5\u4e0b\u793a\u4f8b\u8bf4\u660e\u4e86\u5982\u4f55\u4f7f\u7528\u53d1\u5e03\u5de5\u4f5c\u6d41\u4e2d\u95f4\u4ef6\u5c06\u5de5\u4f5c\u6d41\u7684\u6458\u8981\u6253\u5370\u5230\u63a7\u5236\u53f0\u3002 \u8bf7\u6ce8\u610f\uff0c\u4f7f\u7528 WorkflowMiddlewarePhase.PostWorkflow \u53ef\u6307\u5b9a\u5b83\u5728\u5de5\u4f5c\u6d41\u5b8c\u6210\u540e\u8fd0\u884c\u3002 \u91cd\u8981\uff1a \u4f60\u5e94\u8be5\u5c06\u8c03\u7528 next \u4f5c\u4e3a\u5de5\u4f5c\u6d41\u4e2d\u95f4\u4ef6\u7684\u4e00\u90e8\u5206\uff0c\u4ee5\u786e\u4fdd\u94fe\u4e2d\u7684\u4e0b\u4e00\u4e2a\u5de5\u4f5c\u6d41\u8fd0\u884c\u3002 public class PrintWorkflowSummaryMiddleware : IWorkflowMiddleware { private readonly ILogger<PrintWorkflowSummaryMiddleware> _log; public PrintWorkflowSummaryMiddleware( ILogger<PrintWorkflowSummaryMiddleware> log ) { _log = log; } public WorkflowMiddlewarePhase Phase => WorkflowMiddlewarePhase.PostWorkflow; public Task HandleAsync( WorkflowInstance workflow, WorkflowDelegate next ) { if (!workflow.CompleteTime.HasValue) { return next(); } var duration = workflow.CompleteTime.Value - workflow.CreateTime; _log.LogInformation($@\"Workflow {workflow.Description} completed in {duration:g}\"); foreach (var step in workflow.ExecutionPointers) { var stepName = step.StepName; var stepDuration = (step.EndTime - step.StartTime) ?? TimeSpan.Zero; _log.LogInformation($\" - Step {stepName} completed in {stepDuration:g}\"); } return next(); } }","title":"\u53d1\u5e03\u5de5\u4f5c\u6d41\u4e2d\u95f4\u4ef6"},{"location":"workflow-middleware/#_7","text":"\u5de5\u4f5c\u6d41\u540e\u4e2d\u95f4\u4ef6\u5f02\u5e38\u5904\u7406\u7684\u5904\u7406\u65b9\u5f0f\u4e0e\u5de5\u4f5c\u6d41\u524d\u4e2d\u95f4\u4ef6\u4e0d\u540c\u3002\u5728\u5de5\u4f5c\u6d41\u5b8c\u6210\u65f6\uff0c\u4f60\u7684\u5de5\u4f5c\u6d41\u5df2\u7ecf\u8fd0\u884c\uff0c\u56e0\u6b64\u5f88\u96be\u5904\u7406\u672a\u6355\u83b7\u7684\u5f02\u5e38\u3002 \u9ed8\u8ba4\u60c5\u51b5\u4e0b\uff0c\u5982\u679c\u5de5\u4f5c\u6d41\u4e2d\u95f4\u4ef6\u629b\u51fa\u5f02\u5e38\uff0c\u5219\u5c06\u8bb0\u5f55\u8be5\u5f02\u5e38\uff0c\u5e76\u4e14\u5de5\u4f5c\u6d41\u5c06\u6b63\u5e38\u5b8c\u6210\u3002\u4f46\u662f\uff0c\u8fd9\u79cd\u884c\u4e3a\u662f\u53ef\u4ee5\u6539\u53d8\u7684\u3002 \u8981\u8986\u76d6\u5e94\u7528\u7a0b\u5e8f\u4e2d\u6240\u6709\u5de5\u4f5c\u6d41\u7684\u9ed8\u8ba4\u540e\u5de5\u4f5c\u6d41\u9519\u8bef\u5904\u7406\uff0c\u53ea\u9700\u5728\u4f9d\u8d56\u6ce8\u5165\u6846\u67b6\u4e2d\u6ce8\u518c\u4e00\u4e2a\u65b0 IWorkflowMiddlewareErrorHandler \u7684\u81ea\u5b9a\u4e49\u884c\u4e3a\uff0c\u5982\u4e0b\u6240\u793a\u3002 // CustomMiddlewareErrorHandler.cs public class CustomHandler : IWorkflowMiddlewareErrorHandler { public Task HandleAsync(Exception ex) { // Handle your error asynchronously } } // Startup.cs public void ConfigureServices(IServiceCollection services) { // Other workflow configuration services.AddWorkflow(); // Should go after .AddWorkflow() services.AddTransient<IWorkflowMiddlewareErrorHandler, CustomHandler>(); }","title":"\u540e\u5de5\u4f5c\u6d41\u4e2d\u95f4\u4ef6\u4e2d\u7684\u5f02\u5e38\u5904\u7406"},{"location":"workflow-middleware/#_8","text":"\u4e3a\u4e86\u4f7f\u4e2d\u95f4\u4ef6\u751f\u6548\uff0c\u5fc5\u987b\u4f7f\u7528\u4fbf\u5229\u52a9\u624b\u5411\u5185\u7f6e\u7684\u4f9d\u8d56\u6ce8\u5165\u6846\u67b6\u6ce8\u518c\u5b83\u4eec\u3002 \u6ce8\u610f\uff1a \u4e2d\u95f4\u4ef6\u5c06\u6309\u7167\u5176\u6ce8\u518c\u7684\u987a\u5e8f\u8fd0\u884c\uff0c\u8fd9\u4e9b\u6ce8\u518c\u8f83\u65e9\u7684\u4e2d\u95f4\u4ef6\u5728\u94fe\u4e2d\u8f83\u65e9\u8fd0\u884c\uff0c\u5e76\u5728\u94fe\u4e2d\u8f83\u665a\u7ed3\u675f\u3002\u5bf9\u4e8e\u524d\u7f6e/\u540e\u7f6e\u5de5\u4f5c\u6d41\u4e2d\u95f4\u4ef6\uff0c\u6240\u6709\u524d\u7f6e\u4e2d\u95f4\u4ef6\u5c06\u5728\u5de5\u4f5c\u6d41\u5f00\u59cb\u524d\u8fd0\u884c\uff0c\u6240\u6709\u540e\u7f6e\u4e2d\u95f4\u4ef6\u5c06\u5728\u5de5\u4f5c\u6d41\u5b8c\u6210\u540e\u8fd0\u884c\u3002 public class Startup { public void ConfigureServices(IServiceCollection services) { ... // Add workflow middleware services.AddWorkflowMiddleware<AddDescriptionWorkflowMiddleware>(); services.AddWorkflowMiddleware<PrintWorkflowSummaryMiddleware>(); // Add step middleware services.AddWorkflowStepMiddleware<LogCorrelationStepMiddleware>(); services.AddWorkflowStepMiddleware<PollyRetryMiddleware>(); ... } }","title":"\u6ce8\u518c\u4e2d\u95f4\u4ef6"},{"location":"workflow-middleware/#_9","text":"\u6709\u5173\u5de5\u4f5c\u6d41\u4e2d\u95f4\u4ef6\u7684\u5b8c\u6574\u793a\u4f8b\uff0c\u8bf7\u53c2\u89c1 \u5de5\u4f5c\u6d41\u4e2d\u95f4\u4ef6 \u793a\u4f8b\u3002","title":"\u66f4\u591a\u4fe1\u606f"},{"location":"GT4T_%E6%9C%AA%E7%BF%BB%E8%AF%91/","text":"Workflow Core Workflow Core is a light weight workflow engine targeting .NET Standard. Think: long running processes with multiple tasks that need to track state. It supports pluggable persistence and concurrency providers to allow for multi-node clusters. Installing Install the NuGet package \"WorkflowCore\" Using nuget PM> Install-Package WorkflowCore Using .net cli dotnet add package WorkflowCore Fluent API Define workflows with the fluent API. public class MyWorkflow : IWorkflow { public void Build(IWorkflowBuilder<MyData> builder) { builder .StartWith<Task1>() .Then<Task2>() .Then<Task3>; } }","title":"Workflow Core"},{"location":"GT4T_%E6%9C%AA%E7%BF%BB%E8%AF%91/#workflow-core","text":"Workflow Core is a light weight workflow engine targeting .NET Standard. Think: long running processes with multiple tasks that need to track state. It supports pluggable persistence and concurrency providers to allow for multi-node clusters.","title":"Workflow Core"},{"location":"GT4T_%E6%9C%AA%E7%BF%BB%E8%AF%91/#installing","text":"Install the NuGet package \"WorkflowCore\" Using nuget PM> Install-Package WorkflowCore Using .net cli dotnet add package WorkflowCore","title":"Installing"},{"location":"GT4T_%E6%9C%AA%E7%BF%BB%E8%AF%91/#fluent-api","text":"Define workflows with the fluent API. public class MyWorkflow : IWorkflow { public void Build(IWorkflowBuilder<MyData> builder) { builder .StartWith<Task1>() .Then<Task2>() .Then<Task3>; } }","title":"Fluent API"},{"location":"GT4T_%E6%9C%AA%E7%BF%BB%E8%AF%91/activities/","text":"Activities An activity is defined as an item on an external queue of work, that a workflow can wait for. In this example the workflow will wait for activity-1 , before proceeding. It also passes the value of data.Value1 to the activity, it then maps the result of the activity to data.Value2 . Then we create a worker to process the queue of activity items. It uses the GetPendingActivity method to get an activity and the data that a workflow is waiting for. public class ActivityWorkflow : IWorkflow<MyData> { public void Build(IWorkflowBuilder<MyData> builder) { builder .StartWith<HelloWorld>() .Activity(\"activity-1\", (data) => data.Value1) .Output(data => data.Value2, step => step.Result) .Then<PrintMessage>() .Input(step => step.Message, data => data.Value2); } } ... var activity = host.GetPendingActivity(\"activity-1\", \"worker1\", TimeSpan.FromMinutes(1)).Result; if (activity != null) { Console.WriteLine(activity.Parameters); host.SubmitActivitySuccess(activity.Token, \"Some response data\"); } The JSON representation of this step would look like this { \"Id\": \"activity-step\", \"StepType\": \"WorkflowCore.Primitives.Activity, WorkflowCore\", \"Inputs\": { \"ActivityName\": \"\\\"activity-1\\\"\", \"Parameters\": \"data.Value1\" }, \"Outputs\": { \"Value2\": \"step.Result\" } } JSON / YAML API The Activity step can be configured using inputs as follows Field Description CancelCondition Optional expression to specify a cancel condition Inputs.ActivityName Expression to specify the activity name Inputs.Parameters Expression to specify the parameters to pass the activity worker Inputs.EffectiveDate Optional expression to specify the effective date { \"Id\": \"MyActivityStep\", \"StepType\": \"WorkflowCore.Primitives.Activity, WorkflowCore\", \"NextStepId\": \"...\", \"CancelCondition\": \"...\", \"Inputs\": { \"ActivityName\": \"\\\"my-activity\\\"\", \"Parameters\": \"data.SomeValue\" } } Id: MyActivityStep StepType: WorkflowCore.Primitives.Activity, WorkflowCore NextStepId: \"...\" CancelCondition: \"...\" Inputs: ActivityName: '\"my-activity\"' EventKey: '\"Key1\"' Parameters: data.SomeValue","title":"Activities"},{"location":"GT4T_%E6%9C%AA%E7%BF%BB%E8%AF%91/activities/#activities","text":"An activity is defined as an item on an external queue of work, that a workflow can wait for. In this example the workflow will wait for activity-1 , before proceeding. It also passes the value of data.Value1 to the activity, it then maps the result of the activity to data.Value2 . Then we create a worker to process the queue of activity items. It uses the GetPendingActivity method to get an activity and the data that a workflow is waiting for. public class ActivityWorkflow : IWorkflow<MyData> { public void Build(IWorkflowBuilder<MyData> builder) { builder .StartWith<HelloWorld>() .Activity(\"activity-1\", (data) => data.Value1) .Output(data => data.Value2, step => step.Result) .Then<PrintMessage>() .Input(step => step.Message, data => data.Value2); } } ... var activity = host.GetPendingActivity(\"activity-1\", \"worker1\", TimeSpan.FromMinutes(1)).Result; if (activity != null) { Console.WriteLine(activity.Parameters); host.SubmitActivitySuccess(activity.Token, \"Some response data\"); } The JSON representation of this step would look like this { \"Id\": \"activity-step\", \"StepType\": \"WorkflowCore.Primitives.Activity, WorkflowCore\", \"Inputs\": { \"ActivityName\": \"\\\"activity-1\\\"\", \"Parameters\": \"data.Value1\" }, \"Outputs\": { \"Value2\": \"step.Result\" } }","title":"Activities"},{"location":"GT4T_%E6%9C%AA%E7%BF%BB%E8%AF%91/activities/#json-yaml-api","text":"The Activity step can be configured using inputs as follows Field Description CancelCondition Optional expression to specify a cancel condition Inputs.ActivityName Expression to specify the activity name Inputs.Parameters Expression to specify the parameters to pass the activity worker Inputs.EffectiveDate Optional expression to specify the effective date { \"Id\": \"MyActivityStep\", \"StepType\": \"WorkflowCore.Primitives.Activity, WorkflowCore\", \"NextStepId\": \"...\", \"CancelCondition\": \"...\", \"Inputs\": { \"ActivityName\": \"\\\"my-activity\\\"\", \"Parameters\": \"data.SomeValue\" } } Id: MyActivityStep StepType: WorkflowCore.Primitives.Activity, WorkflowCore NextStepId: \"...\" CancelCondition: \"...\" Inputs: ActivityName: '\"my-activity\"' EventKey: '\"Key1\"' Parameters: data.SomeValue","title":"JSON / YAML API"},{"location":"GT4T_%E6%9C%AA%E7%BF%BB%E8%AF%91/control-structures/","text":"Control Structures Decision Branches You can define multiple independent branches within your workflow and select one based on an expression value. Fluent API For the fluent API, we define our branches with the CreateBranch() method on the workflow builder. We can then select a branch using the Branch method. The select expressions will be matched to the branch listed via the Branch method, and the matching next step(s) will be scheduled to execute next. Matching multiple next steps will result in parallel branches running. This workflow will select branch1 if the value of data.Value1 is one , and branch2 if it is two . var branch1 = builder.CreateBranch() .StartWith<PrintMessage>() .Input(step => step.Message, data => \"hi from 1\") .Then<PrintMessage>() .Input(step => step.Message, data => \"bye from 1\"); var branch2 = builder.CreateBranch() .StartWith<PrintMessage>() .Input(step => step.Message, data => \"hi from 2\") .Then<PrintMessage>() .Input(step => step.Message, data => \"bye from 2\"); builder .StartWith<HelloWorld>() .Decide(data => data.Value1) .Branch((data, outcome) => data.Value1 == \"one\", branch1) .Branch((data, outcome) => data.Value1 == \"two\", branch2); JSON / YAML API Hook up your branches via the SelectNextStep property, instead of a NextStepId . The expressions will be matched to the step Ids listed in SelectNextStep , and the matching next step(s) will be scheduled to execute next. { \"Id\": \"DecisionWorkflow\", \"Version\": 1, \"DataType\": \"MyApp.MyData, MyApp\", \"Steps\": [ { \"Id\": \"decide\", \"StepType\": \"...\", \"SelectNextStep\": { \"Branch1\": \"<<result expression to match for branch 1>>\", \"Branch2\": \"<<result expression to match for branch 2>>\" } }, { \"Id\": \"Branch1\", \"StepType\": \"MyApp.PrintMessage, MyApp\", \"Inputs\": { \"Message\": \"\\\"Hello from 1\\\"\" } }, { \"Id\": \"Branch2\", \"StepType\": \"MyApp.PrintMessage, MyApp\", \"Inputs\": { \"Message\": \"\\\"Hello from 2\\\"\" } } ] } Id: DecisionWorkflow Version: 1 DataType: MyApp.MyData, MyApp Steps: - Id: decide StepType: WorkflowCore.Primitives.Decide, WorkflowCore Inputs: Expression: <<input expression to evaluate>> OutcomeSteps: Branch1: '<<result expression to match for branch 1>>' Branch2: '<<result expression to match for branch 2>>' - Id: Branch1 StepType: MyApp.PrintMessage, MyApp Inputs: Message: '\"Hello from 1\"' - Id: Branch2 StepType: MyApp.PrintMessage, MyApp Inputs: Message: '\"Hello from 2\"' Parallel ForEach Use the .ForEach method to start a parallel for loop Fluent API public class ForEachWorkflow : IWorkflow { public string Id => \"Foreach\"; public int Version => 1; public void Build(IWorkflowBuilder<object> builder) { builder .StartWith<SayHello>() .ForEach(data => new List<int>() { 1, 2, 3, 4 }) .Do(x => x .StartWith<DisplayContext>() .Input(step => step.Message, (data, context) => context.Item) .Then<DoSomething>()) .Then<SayGoodbye>(); } } JSON / YAML API { \"Id\": \"MyForEachStep\", \"StepType\": \"WorkflowCore.Primitives.ForEach, WorkflowCore\", \"NextStepId\": \"...\", \"Inputs\": { \"Collection\": \"<<expression to evaluate>>\" }, \"Do\": [[ { \"Id\": \"do1\", \"StepType\": \"MyApp.DoSomething1, MyApp\", \"NextStepId\": \"do2\" }, { \"Id\": \"do2\", \"StepType\": \"MyApp.DoSomething2, MyApp\" } ]] } Id: MyForEachStep StepType: WorkflowCore.Primitives.ForEach, WorkflowCore NextStepId: \"...\" Inputs: Collection: \"<<expression to evaluate>>\" Do: - - Id: do1 StepType: MyApp.DoSomething1, MyApp NextStepId: do2 - Id: do2 StepType: MyApp.DoSomething2, MyApp While Loops Use the .While method to start a while construct Fluent API public class WhileWorkflow : IWorkflow<MyData> { public string Id => \"While\"; public int Version => 1; public void Build(IWorkflowBuilder<MyData> builder) { builder .StartWith<SayHello>() .While(data => data.Counter < 3) .Do(x => x .StartWith<DoSomething>() .Then<IncrementStep>() .Input(step => step.Value1, data => data.Counter) .Output(data => data.Counter, step => step.Value2)) .Then<SayGoodbye>(); } } JSON / YAML API { \"Id\": \"MyWhileStep\", \"StepType\": \"WorkflowCore.Primitives.While, WorkflowCore\", \"NextStepId\": \"...\", \"Inputs\": { \"Condition\": \"<<expression to evaluate>>\" }, \"Do\": [[ { \"Id\": \"do1\", \"StepType\": \"MyApp.DoSomething1, MyApp\", \"NextStepId\": \"do2\" }, { \"Id\": \"do2\", \"StepType\": \"MyApp.DoSomething2, MyApp\" } ]] } Id: MyWhileStep StepType: WorkflowCore.Primitives.While, WorkflowCore NextStepId: \"...\" Inputs: Condition: \"<<expression to evaluate>>\" Do: - - Id: do1 StepType: MyApp.DoSomething1, MyApp NextStepId: do2 - Id: do2 StepType: MyApp.DoSomething2, MyApp If Conditions Use the .If method to start an if condition Fluent API public class IfWorkflow : IWorkflow<MyData> { public void Build(IWorkflowBuilder<MyData> builder) { builder .StartWith<SayHello>() .If(data => data.Counter < 3).Do(then => then .StartWith<PrintMessage>() .Input(step => step.Message, data => \"Value is less than 3\") ) .If(data => data.Counter < 5).Do(then => then .StartWith<PrintMessage>() .Input(step => step.Message, data => \"Value is less than 5\") ) .Then<SayGoodbye>(); } } JSON / YAML API { \"Id\": \"MyIfStep\", \"StepType\": \"WorkflowCore.Primitives.If, WorkflowCore\", \"NextStepId\": \"...\", \"Inputs\": { \"Condition\": \"<<expression to evaluate>>\" }, \"Do\": [[ { \"Id\": \"do1\", \"StepType\": \"MyApp.DoSomething1, MyApp\", \"NextStepId\": \"do2\" }, { \"Id\": \"do2\", \"StepType\": \"MyApp.DoSomething2, MyApp\" } ]] } Id: MyIfStep StepType: WorkflowCore.Primitives.If, WorkflowCore NextStepId: \"...\" Inputs: Condition: \"<<expression to evaluate>>\" Do: - - Id: do1 StepType: MyApp.DoSomething1, MyApp NextStepId: do2 - Id: do2 StepType: MyApp.DoSomething2, MyApp Parallel Paths Use the .Parallel() method to branch parallel tasks Fluent API public class ParallelWorkflow : IWorkflow<MyData> { public string Id => \"parallel-sample\"; public int Version => 1; public void Build(IWorkflowBuilder<MyData> builder) { builder .StartWith<SayHello>() .Parallel() .Do(then => then.StartWith<Task1dot1>() .Then<Task1dot2>() .Do(then => then.StartWith<Task2dot1>() .Then<Task2dot2>() .Do(then => then.StartWith<Task3dot1>() .Then<Task3dot2>() .Join() .Then<SayGoodbye>(); } } JSON / YAML API { \"Id\": \"MyParallelStep\", \"StepType\": \"WorkflowCore.Primitives.Sequence, WorkflowCore\", \"NextStepId\": \"...\", \"Do\": [ [ { \"Id\": \"Branch1.Step1\", \"StepType\": \"MyApp.DoSomething1, MyApp\", \"NextStepId\": \"Branch1.Step2\" }, { \"Id\": \"Branch1.Step2\", \"StepType\": \"MyApp.DoSomething2, MyApp\" } ], [ { \"Id\": \"Branch2.Step1\", \"StepType\": \"MyApp.DoSomething1, MyApp\", \"NextStepId\": \"Branch2.Step2\" }, { \"Id\": \"Branch2.Step2\", \"StepType\": \"MyApp.DoSomething2, MyApp\" } ] ] } Id: MyParallelStep StepType: WorkflowCore.Primitives.Sequence, WorkflowCore NextStepId: \"...\" Do: - - Id: Branch1.Step1 StepType: MyApp.DoSomething1, MyApp NextStepId: Branch1.Step2 - Id: Branch1.Step2 StepType: MyApp.DoSomething2, MyApp - - Id: Branch2.Step1 StepType: MyApp.DoSomething1, MyApp NextStepId: Branch2.Step2 - Id: Branch2.Step2 StepType: MyApp.DoSomething2, MyApp Schedule Use .Schedule to register a future set of steps to run asynchronously in the background within your workflow. Fluent API builder .StartWith(context => Console.WriteLine(\"Hello\")) .Schedule(data => TimeSpan.FromSeconds(5)).Do(schedule => schedule .StartWith(context => Console.WriteLine(\"Doing scheduled tasks\")) ) .Then(context => Console.WriteLine(\"Doing normal tasks\")); JSON / YAML API { \"Id\": \"MyScheduleStep\", \"StepType\": \"WorkflowCore.Primitives.Schedule, WorkflowCore\", \"Inputs\": { \"Interval\": \"<<expression to evaluate>>\" }, \"Do\": [[ { \"Id\": \"do1\", \"StepType\": \"MyApp.DoSomething1, MyApp\", \"NextStepId\": \"do2\" }, { \"Id\": \"do2\", \"StepType\": \"MyApp.DoSomething2, MyApp\" } ]] } Id: MyScheduleStep StepType: WorkflowCore.Primitives.Schedule, WorkflowCore Inputs: Interval: \"<<expression to evaluate>>\" Do: - - Id: do1 StepType: MyApp.DoSomething1, MyApp NextStepId: do2 - Id: do2 StepType: MyApp.DoSomething2, MyApp Delay The Delay step will pause the current branch of your workflow for a specified period. JSON / YAML API { \"Id\": \"MyDelayStep\", \"StepType\": \"WorkflowCore.Primitives.Delay, WorkflowCore\", \"NextStepId\": \"...\", \"Inputs\": { \"Period\": \"<<expression to evaluate>>\" } } Id: MyDelayStep StepType: WorkflowCore.Primitives.Delay, WorkflowCore NextStepId: \"...\" Inputs: Period: \"<<expression to evaluate>>\" Recur Use .Recur to setup a set of recurring background steps within your workflow, until a certain condition is met Fluent API builder .StartWith(context => Console.WriteLine(\"Hello\")) .Recur(data => TimeSpan.FromSeconds(5), data => data.Counter > 5).Do(recur => recur .StartWith(context => Console.WriteLine(\"Doing recurring task\")) ) .Then(context => Console.WriteLine(\"Carry on\")); JSON / YAML API { \"Id\": \"MyScheduleStep\", \"StepType\": \"WorkflowCore.Primitives.Recur, WorkflowCore\", \"Inputs\": { \"Interval\": \"<<expression to evaluate>>\", \"StopCondition\": \"<<expression to evaluate>>\" }, \"Do\": [[ { \"Id\": \"do1\", \"StepType\": \"MyApp.DoSomething1, MyApp\", \"NextStepId\": \"do2\" }, { \"Id\": \"do2\", \"StepType\": \"MyApp.DoSomething2, MyApp\" } ]] } Id: MyScheduleStep StepType: WorkflowCore.Primitives.Recur, WorkflowCore Inputs: Interval: \"<<expression to evaluate>>\" StopCondition: \"<<expression to evaluate>>\" Do: - - Id: do1 StepType: MyApp.DoSomething1, MyApp NextStepId: do2 - Id: do2 StepType: MyApp.DoSomething2, MyApp","title":"Control Structures"},{"location":"GT4T_%E6%9C%AA%E7%BF%BB%E8%AF%91/control-structures/#control-structures","text":"","title":"Control Structures"},{"location":"GT4T_%E6%9C%AA%E7%BF%BB%E8%AF%91/control-structures/#decision-branches","text":"You can define multiple independent branches within your workflow and select one based on an expression value.","title":"Decision Branches"},{"location":"GT4T_%E6%9C%AA%E7%BF%BB%E8%AF%91/control-structures/#fluent-api","text":"For the fluent API, we define our branches with the CreateBranch() method on the workflow builder. We can then select a branch using the Branch method. The select expressions will be matched to the branch listed via the Branch method, and the matching next step(s) will be scheduled to execute next. Matching multiple next steps will result in parallel branches running. This workflow will select branch1 if the value of data.Value1 is one , and branch2 if it is two . var branch1 = builder.CreateBranch() .StartWith<PrintMessage>() .Input(step => step.Message, data => \"hi from 1\") .Then<PrintMessage>() .Input(step => step.Message, data => \"bye from 1\"); var branch2 = builder.CreateBranch() .StartWith<PrintMessage>() .Input(step => step.Message, data => \"hi from 2\") .Then<PrintMessage>() .Input(step => step.Message, data => \"bye from 2\"); builder .StartWith<HelloWorld>() .Decide(data => data.Value1) .Branch((data, outcome) => data.Value1 == \"one\", branch1) .Branch((data, outcome) => data.Value1 == \"two\", branch2);","title":"Fluent API"},{"location":"GT4T_%E6%9C%AA%E7%BF%BB%E8%AF%91/control-structures/#json-yaml-api","text":"Hook up your branches via the SelectNextStep property, instead of a NextStepId . The expressions will be matched to the step Ids listed in SelectNextStep , and the matching next step(s) will be scheduled to execute next. { \"Id\": \"DecisionWorkflow\", \"Version\": 1, \"DataType\": \"MyApp.MyData, MyApp\", \"Steps\": [ { \"Id\": \"decide\", \"StepType\": \"...\", \"SelectNextStep\": { \"Branch1\": \"<<result expression to match for branch 1>>\", \"Branch2\": \"<<result expression to match for branch 2>>\" } }, { \"Id\": \"Branch1\", \"StepType\": \"MyApp.PrintMessage, MyApp\", \"Inputs\": { \"Message\": \"\\\"Hello from 1\\\"\" } }, { \"Id\": \"Branch2\", \"StepType\": \"MyApp.PrintMessage, MyApp\", \"Inputs\": { \"Message\": \"\\\"Hello from 2\\\"\" } } ] } Id: DecisionWorkflow Version: 1 DataType: MyApp.MyData, MyApp Steps: - Id: decide StepType: WorkflowCore.Primitives.Decide, WorkflowCore Inputs: Expression: <<input expression to evaluate>> OutcomeSteps: Branch1: '<<result expression to match for branch 1>>' Branch2: '<<result expression to match for branch 2>>' - Id: Branch1 StepType: MyApp.PrintMessage, MyApp Inputs: Message: '\"Hello from 1\"' - Id: Branch2 StepType: MyApp.PrintMessage, MyApp Inputs: Message: '\"Hello from 2\"'","title":"JSON / YAML API"},{"location":"GT4T_%E6%9C%AA%E7%BF%BB%E8%AF%91/control-structures/#parallel-foreach","text":"Use the .ForEach method to start a parallel for loop","title":"Parallel ForEach"},{"location":"GT4T_%E6%9C%AA%E7%BF%BB%E8%AF%91/control-structures/#fluent-api_1","text":"public class ForEachWorkflow : IWorkflow { public string Id => \"Foreach\"; public int Version => 1; public void Build(IWorkflowBuilder<object> builder) { builder .StartWith<SayHello>() .ForEach(data => new List<int>() { 1, 2, 3, 4 }) .Do(x => x .StartWith<DisplayContext>() .Input(step => step.Message, (data, context) => context.Item) .Then<DoSomething>()) .Then<SayGoodbye>(); } }","title":"Fluent API"},{"location":"GT4T_%E6%9C%AA%E7%BF%BB%E8%AF%91/control-structures/#json-yaml-api_1","text":"{ \"Id\": \"MyForEachStep\", \"StepType\": \"WorkflowCore.Primitives.ForEach, WorkflowCore\", \"NextStepId\": \"...\", \"Inputs\": { \"Collection\": \"<<expression to evaluate>>\" }, \"Do\": [[ { \"Id\": \"do1\", \"StepType\": \"MyApp.DoSomething1, MyApp\", \"NextStepId\": \"do2\" }, { \"Id\": \"do2\", \"StepType\": \"MyApp.DoSomething2, MyApp\" } ]] } Id: MyForEachStep StepType: WorkflowCore.Primitives.ForEach, WorkflowCore NextStepId: \"...\" Inputs: Collection: \"<<expression to evaluate>>\" Do: - - Id: do1 StepType: MyApp.DoSomething1, MyApp NextStepId: do2 - Id: do2 StepType: MyApp.DoSomething2, MyApp","title":"JSON / YAML API"},{"location":"GT4T_%E6%9C%AA%E7%BF%BB%E8%AF%91/control-structures/#while-loops","text":"Use the .While method to start a while construct","title":"While Loops"},{"location":"GT4T_%E6%9C%AA%E7%BF%BB%E8%AF%91/control-structures/#fluent-api_2","text":"public class WhileWorkflow : IWorkflow<MyData> { public string Id => \"While\"; public int Version => 1; public void Build(IWorkflowBuilder<MyData> builder) { builder .StartWith<SayHello>() .While(data => data.Counter < 3) .Do(x => x .StartWith<DoSomething>() .Then<IncrementStep>() .Input(step => step.Value1, data => data.Counter) .Output(data => data.Counter, step => step.Value2)) .Then<SayGoodbye>(); } }","title":"Fluent API"},{"location":"GT4T_%E6%9C%AA%E7%BF%BB%E8%AF%91/control-structures/#json-yaml-api_2","text":"{ \"Id\": \"MyWhileStep\", \"StepType\": \"WorkflowCore.Primitives.While, WorkflowCore\", \"NextStepId\": \"...\", \"Inputs\": { \"Condition\": \"<<expression to evaluate>>\" }, \"Do\": [[ { \"Id\": \"do1\", \"StepType\": \"MyApp.DoSomething1, MyApp\", \"NextStepId\": \"do2\" }, { \"Id\": \"do2\", \"StepType\": \"MyApp.DoSomething2, MyApp\" } ]] } Id: MyWhileStep StepType: WorkflowCore.Primitives.While, WorkflowCore NextStepId: \"...\" Inputs: Condition: \"<<expression to evaluate>>\" Do: - - Id: do1 StepType: MyApp.DoSomething1, MyApp NextStepId: do2 - Id: do2 StepType: MyApp.DoSomething2, MyApp","title":"JSON / YAML API"},{"location":"GT4T_%E6%9C%AA%E7%BF%BB%E8%AF%91/control-structures/#if-conditions","text":"Use the .If method to start an if condition","title":"If Conditions"},{"location":"GT4T_%E6%9C%AA%E7%BF%BB%E8%AF%91/control-structures/#fluent-api_3","text":"public class IfWorkflow : IWorkflow<MyData> { public void Build(IWorkflowBuilder<MyData> builder) { builder .StartWith<SayHello>() .If(data => data.Counter < 3).Do(then => then .StartWith<PrintMessage>() .Input(step => step.Message, data => \"Value is less than 3\") ) .If(data => data.Counter < 5).Do(then => then .StartWith<PrintMessage>() .Input(step => step.Message, data => \"Value is less than 5\") ) .Then<SayGoodbye>(); } }","title":"Fluent API"},{"location":"GT4T_%E6%9C%AA%E7%BF%BB%E8%AF%91/control-structures/#json-yaml-api_3","text":"{ \"Id\": \"MyIfStep\", \"StepType\": \"WorkflowCore.Primitives.If, WorkflowCore\", \"NextStepId\": \"...\", \"Inputs\": { \"Condition\": \"<<expression to evaluate>>\" }, \"Do\": [[ { \"Id\": \"do1\", \"StepType\": \"MyApp.DoSomething1, MyApp\", \"NextStepId\": \"do2\" }, { \"Id\": \"do2\", \"StepType\": \"MyApp.DoSomething2, MyApp\" } ]] } Id: MyIfStep StepType: WorkflowCore.Primitives.If, WorkflowCore NextStepId: \"...\" Inputs: Condition: \"<<expression to evaluate>>\" Do: - - Id: do1 StepType: MyApp.DoSomething1, MyApp NextStepId: do2 - Id: do2 StepType: MyApp.DoSomething2, MyApp","title":"JSON / YAML API"},{"location":"GT4T_%E6%9C%AA%E7%BF%BB%E8%AF%91/control-structures/#parallel-paths","text":"Use the .Parallel() method to branch parallel tasks","title":"Parallel Paths"},{"location":"GT4T_%E6%9C%AA%E7%BF%BB%E8%AF%91/control-structures/#fluent-api_4","text":"public class ParallelWorkflow : IWorkflow<MyData> { public string Id => \"parallel-sample\"; public int Version => 1; public void Build(IWorkflowBuilder<MyData> builder) { builder .StartWith<SayHello>() .Parallel() .Do(then => then.StartWith<Task1dot1>() .Then<Task1dot2>() .Do(then => then.StartWith<Task2dot1>() .Then<Task2dot2>() .Do(then => then.StartWith<Task3dot1>() .Then<Task3dot2>() .Join() .Then<SayGoodbye>(); } }","title":"Fluent API"},{"location":"GT4T_%E6%9C%AA%E7%BF%BB%E8%AF%91/control-structures/#json-yaml-api_4","text":"{ \"Id\": \"MyParallelStep\", \"StepType\": \"WorkflowCore.Primitives.Sequence, WorkflowCore\", \"NextStepId\": \"...\", \"Do\": [ [ { \"Id\": \"Branch1.Step1\", \"StepType\": \"MyApp.DoSomething1, MyApp\", \"NextStepId\": \"Branch1.Step2\" }, { \"Id\": \"Branch1.Step2\", \"StepType\": \"MyApp.DoSomething2, MyApp\" } ], [ { \"Id\": \"Branch2.Step1\", \"StepType\": \"MyApp.DoSomething1, MyApp\", \"NextStepId\": \"Branch2.Step2\" }, { \"Id\": \"Branch2.Step2\", \"StepType\": \"MyApp.DoSomething2, MyApp\" } ] ] } Id: MyParallelStep StepType: WorkflowCore.Primitives.Sequence, WorkflowCore NextStepId: \"...\" Do: - - Id: Branch1.Step1 StepType: MyApp.DoSomething1, MyApp NextStepId: Branch1.Step2 - Id: Branch1.Step2 StepType: MyApp.DoSomething2, MyApp - - Id: Branch2.Step1 StepType: MyApp.DoSomething1, MyApp NextStepId: Branch2.Step2 - Id: Branch2.Step2 StepType: MyApp.DoSomething2, MyApp","title":"JSON / YAML API"},{"location":"GT4T_%E6%9C%AA%E7%BF%BB%E8%AF%91/control-structures/#schedule","text":"Use .Schedule to register a future set of steps to run asynchronously in the background within your workflow.","title":"Schedule"},{"location":"GT4T_%E6%9C%AA%E7%BF%BB%E8%AF%91/control-structures/#fluent-api_5","text":"builder .StartWith(context => Console.WriteLine(\"Hello\")) .Schedule(data => TimeSpan.FromSeconds(5)).Do(schedule => schedule .StartWith(context => Console.WriteLine(\"Doing scheduled tasks\")) ) .Then(context => Console.WriteLine(\"Doing normal tasks\"));","title":"Fluent API"},{"location":"GT4T_%E6%9C%AA%E7%BF%BB%E8%AF%91/control-structures/#json-yaml-api_5","text":"{ \"Id\": \"MyScheduleStep\", \"StepType\": \"WorkflowCore.Primitives.Schedule, WorkflowCore\", \"Inputs\": { \"Interval\": \"<<expression to evaluate>>\" }, \"Do\": [[ { \"Id\": \"do1\", \"StepType\": \"MyApp.DoSomething1, MyApp\", \"NextStepId\": \"do2\" }, { \"Id\": \"do2\", \"StepType\": \"MyApp.DoSomething2, MyApp\" } ]] } Id: MyScheduleStep StepType: WorkflowCore.Primitives.Schedule, WorkflowCore Inputs: Interval: \"<<expression to evaluate>>\" Do: - - Id: do1 StepType: MyApp.DoSomething1, MyApp NextStepId: do2 - Id: do2 StepType: MyApp.DoSomething2, MyApp","title":"JSON / YAML API"},{"location":"GT4T_%E6%9C%AA%E7%BF%BB%E8%AF%91/control-structures/#delay","text":"The Delay step will pause the current branch of your workflow for a specified period.","title":"Delay"},{"location":"GT4T_%E6%9C%AA%E7%BF%BB%E8%AF%91/control-structures/#json-yaml-api_6","text":"{ \"Id\": \"MyDelayStep\", \"StepType\": \"WorkflowCore.Primitives.Delay, WorkflowCore\", \"NextStepId\": \"...\", \"Inputs\": { \"Period\": \"<<expression to evaluate>>\" } } Id: MyDelayStep StepType: WorkflowCore.Primitives.Delay, WorkflowCore NextStepId: \"...\" Inputs: Period: \"<<expression to evaluate>>\"","title":"JSON / YAML API"},{"location":"GT4T_%E6%9C%AA%E7%BF%BB%E8%AF%91/control-structures/#recur","text":"Use .Recur to setup a set of recurring background steps within your workflow, until a certain condition is met","title":"Recur"},{"location":"GT4T_%E6%9C%AA%E7%BF%BB%E8%AF%91/control-structures/#fluent-api_6","text":"builder .StartWith(context => Console.WriteLine(\"Hello\")) .Recur(data => TimeSpan.FromSeconds(5), data => data.Counter > 5).Do(recur => recur .StartWith(context => Console.WriteLine(\"Doing recurring task\")) ) .Then(context => Console.WriteLine(\"Carry on\"));","title":"Fluent API"},{"location":"GT4T_%E6%9C%AA%E7%BF%BB%E8%AF%91/control-structures/#json-yaml-api_7","text":"{ \"Id\": \"MyScheduleStep\", \"StepType\": \"WorkflowCore.Primitives.Recur, WorkflowCore\", \"Inputs\": { \"Interval\": \"<<expression to evaluate>>\", \"StopCondition\": \"<<expression to evaluate>>\" }, \"Do\": [[ { \"Id\": \"do1\", \"StepType\": \"MyApp.DoSomething1, MyApp\", \"NextStepId\": \"do2\" }, { \"Id\": \"do2\", \"StepType\": \"MyApp.DoSomething2, MyApp\" } ]] } Id: MyScheduleStep StepType: WorkflowCore.Primitives.Recur, WorkflowCore Inputs: Interval: \"<<expression to evaluate>>\" StopCondition: \"<<expression to evaluate>>\" Do: - - Id: do1 StepType: MyApp.DoSomething1, MyApp NextStepId: do2 - Id: do2 StepType: MyApp.DoSomething2, MyApp","title":"JSON / YAML API"},{"location":"GT4T_%E6%9C%AA%E7%BF%BB%E8%AF%91/elastic-search/","text":"Elasticsearch plugin for Workflow Core A search index plugin for Workflow Core backed by Elasticsearch, enabling you to index your workflows and search against the data and state of them. Installing Install the NuGet package \"WorkflowCore.Providers.Elasticsearch\" Using Nuget package console PM> Install-Package WorkflowCore.Providers.Elasticsearch Using .NET CLI dotnet add package WorkflowCore.Providers.Elasticsearch Configuration Use the .UseElasticsearch extension method on IServiceCollection when building your service provider using Nest; ... services.AddWorkflow(cfg => { ... cfg.UseElasticsearch(new ConnectionSettings(new Uri(\"http://localhost:9200\")), \"index_name\"); }); Usage Inject the ISearchIndex service into your code and use the Search method. Search(string terms, int skip, int take, params SearchFilter[] filters) terms A whitespace separated string of search terms, an empty string will match everything. This will do a full text search on the following default fields * Reference * Description * Status * Workflow Definition In addition you can search data within your own custom data object if it implements ISearchable ``` using WorkflowCore.Interfaces; ... public class MyData : ISearchable { public string StrValue1 { get; set; } public string StrValue2 { get; set; } public IEnumerable<string> GetSearchTokens() { return new List<string>() { StrValue1, StrValue2 }; } } ``` ##### Examples Search all fields for \"puppies\" searchIndex.Search(\"puppies\", 0, 10); skip & take Use skip and take to page your search results. Where skip is the result number to start from and take is the page size. filters You can also supply a list of filters to apply to the search, these can be applied to both the standard fields as well as any field within your custom data objects. There is no need to implement ISearchable on your data object in order to use filters against it. The following filter types are available * ScalarFilter * DateRangeFilter * NumericRangeFilter * StatusFilter These exist in the WorkflowCore.Models.Search namespace. ##### Examples Filtering by reference ``` using WorkflowCore.Models.Search; ... searchIndex.Search(\"\", 0, 10, ScalarFilter.Equals(x => x.Reference, \"My Reference\")); ``` Filtering by workflows started after a date searchIndex.Search(\"\", 0, 10, DateRangeFilter.After(x => x.CreateTime, startDate)); Filtering by workflows completed within a period searchIndex.Search(\"\", 0, 10, DateRangeFilter.Between(x => x.CompleteTime, startDate, endDate)); Filtering by workflows in a state searchIndex.Search(\"\", 0, 10, StatusFilter.Equals(WorkflowStatus.Complete)); Filtering against your own custom data class ``` class MyData { public string Value1 { get; set; } public int Value2 { get; set; } } searchIndex.Search(\"\", 0, 10, ScalarFilter.Equals (x => x.Value1, \"blue moon\")); searchIndex.Search(\"\", 0, 10, NumericRangeFilter.LessThan (x => x.Value2, 5)) ```","title":"Elasticsearch plugin for Workflow Core"},{"location":"GT4T_%E6%9C%AA%E7%BF%BB%E8%AF%91/elastic-search/#elasticsearch-plugin-for-workflow-core","text":"A search index plugin for Workflow Core backed by Elasticsearch, enabling you to index your workflows and search against the data and state of them.","title":"Elasticsearch plugin for Workflow Core"},{"location":"GT4T_%E6%9C%AA%E7%BF%BB%E8%AF%91/elastic-search/#installing","text":"Install the NuGet package \"WorkflowCore.Providers.Elasticsearch\" Using Nuget package console PM> Install-Package WorkflowCore.Providers.Elasticsearch Using .NET CLI dotnet add package WorkflowCore.Providers.Elasticsearch","title":"Installing"},{"location":"GT4T_%E6%9C%AA%E7%BF%BB%E8%AF%91/elastic-search/#configuration","text":"Use the .UseElasticsearch extension method on IServiceCollection when building your service provider using Nest; ... services.AddWorkflow(cfg => { ... cfg.UseElasticsearch(new ConnectionSettings(new Uri(\"http://localhost:9200\")), \"index_name\"); });","title":"Configuration"},{"location":"GT4T_%E6%9C%AA%E7%BF%BB%E8%AF%91/elastic-search/#usage","text":"Inject the ISearchIndex service into your code and use the Search method. Search(string terms, int skip, int take, params SearchFilter[] filters)","title":"Usage"},{"location":"GT4T_%E6%9C%AA%E7%BF%BB%E8%AF%91/elastic-search/#terms","text":"A whitespace separated string of search terms, an empty string will match everything. This will do a full text search on the following default fields * Reference * Description * Status * Workflow Definition In addition you can search data within your own custom data object if it implements ISearchable ``` using WorkflowCore.Interfaces; ... public class MyData : ISearchable { public string StrValue1 { get; set; } public string StrValue2 { get; set; } public IEnumerable<string> GetSearchTokens() { return new List<string>() { StrValue1, StrValue2 }; } } ``` ##### Examples Search all fields for \"puppies\" searchIndex.Search(\"puppies\", 0, 10);","title":"terms"},{"location":"GT4T_%E6%9C%AA%E7%BF%BB%E8%AF%91/elastic-search/#skip-take","text":"Use skip and take to page your search results. Where skip is the result number to start from and take is the page size.","title":"skip &amp; take"},{"location":"GT4T_%E6%9C%AA%E7%BF%BB%E8%AF%91/elastic-search/#filters","text":"You can also supply a list of filters to apply to the search, these can be applied to both the standard fields as well as any field within your custom data objects. There is no need to implement ISearchable on your data object in order to use filters against it. The following filter types are available * ScalarFilter * DateRangeFilter * NumericRangeFilter * StatusFilter These exist in the WorkflowCore.Models.Search namespace. ##### Examples Filtering by reference ``` using WorkflowCore.Models.Search; ... searchIndex.Search(\"\", 0, 10, ScalarFilter.Equals(x => x.Reference, \"My Reference\")); ``` Filtering by workflows started after a date searchIndex.Search(\"\", 0, 10, DateRangeFilter.After(x => x.CreateTime, startDate)); Filtering by workflows completed within a period searchIndex.Search(\"\", 0, 10, DateRangeFilter.Between(x => x.CompleteTime, startDate, endDate)); Filtering by workflows in a state searchIndex.Search(\"\", 0, 10, StatusFilter.Equals(WorkflowStatus.Complete)); Filtering against your own custom data class ``` class MyData { public string Value1 { get; set; } public int Value2 { get; set; } } searchIndex.Search(\"\", 0, 10, ScalarFilter.Equals (x => x.Value1, \"blue moon\")); searchIndex.Search(\"\", 0, 10, NumericRangeFilter.LessThan (x => x.Value2, 5)) ```","title":"filters"},{"location":"GT4T_%E6%9C%AA%E7%BF%BB%E8%AF%91/error-handling/","text":"Error handling Each step can be configured with it's own error handling behavior, it can be retried at a later time, suspend the workflow or terminate the workflow. Fluent API public void Build(IWorkflowBuilder<object> builder) { builder .StartWith<HelloWorld>() .OnError(WorkflowErrorHandling.Retry, TimeSpan.FromMinutes(10)) .Then<GoodbyeWorld>(); } JSON / YAML API ErrorBehavior { \"Id\": \"...\", \"StepType\": \"...\", \"ErrorBehavior\": \"Retry / Suspend / Terminate / Compensate\", \"RetryInterval\": \"00:10:00\" } Id: \"...\" StepType: \"...\" ErrorBehavior: Retry / Suspend / Terminate / Compensate RetryInterval: '00:10:00' Global Error handling The WorkflowHost service also has a .OnStepError event which can be used to intercept exceptions from workflow steps on a more global level.","title":"Error handling"},{"location":"GT4T_%E6%9C%AA%E7%BF%BB%E8%AF%91/error-handling/#error-handling","text":"Each step can be configured with it's own error handling behavior, it can be retried at a later time, suspend the workflow or terminate the workflow.","title":"Error handling"},{"location":"GT4T_%E6%9C%AA%E7%BF%BB%E8%AF%91/error-handling/#fluent-api","text":"public void Build(IWorkflowBuilder<object> builder) { builder .StartWith<HelloWorld>() .OnError(WorkflowErrorHandling.Retry, TimeSpan.FromMinutes(10)) .Then<GoodbyeWorld>(); }","title":"Fluent API"},{"location":"GT4T_%E6%9C%AA%E7%BF%BB%E8%AF%91/error-handling/#json-yaml-api","text":"ErrorBehavior { \"Id\": \"...\", \"StepType\": \"...\", \"ErrorBehavior\": \"Retry / Suspend / Terminate / Compensate\", \"RetryInterval\": \"00:10:00\" } Id: \"...\" StepType: \"...\" ErrorBehavior: Retry / Suspend / Terminate / Compensate RetryInterval: '00:10:00'","title":"JSON / YAML API"},{"location":"GT4T_%E6%9C%AA%E7%BF%BB%E8%AF%91/error-handling/#global-error-handling","text":"The WorkflowHost service also has a .OnStepError event which can be used to intercept exceptions from workflow steps on a more global level.","title":"Global Error handling"},{"location":"GT4T_%E6%9C%AA%E7%BF%BB%E8%AF%91/extensions/","text":"Extensions User (human) workflows","title":"Extensions"},{"location":"GT4T_%E6%9C%AA%E7%BF%BB%E8%AF%91/extensions/#extensions","text":"User (human) workflows","title":"Extensions"},{"location":"GT4T_%E6%9C%AA%E7%BF%BB%E8%AF%91/external-events/","text":"Events A workflow can also wait for an external event before proceeding. In the following example, the workflow will wait for an event called \"MyEvent\" with a key of 0 . Once an external source has fired this event, the workflow will wake up and continue processing, passing the data generated by the event onto the next step. public class EventSampleWorkflow : IWorkflow<MyDataClass> { public void Build(IWorkflowBuilder<MyDataClass> builder) { builder .StartWith(context => ExecutionResult.Next()) .WaitFor(\"MyEvent\", data => \"0\") .Output(data => data.Value, step => step.EventData) .Then<CustomMessage>() .Input(step => step.Message, data => \"The data from the event is \" + data.Value); } } ... //External events are published via the host //All workflows that have subscribed to MyEvent 0, will be passed \"hello\" host.PublishEvent(\"MyEvent\", \"0\", \"hello\"); Effective Date You can also specify an effective date when waiting for events, which allows you to respond to events that may have already occurred in the past, or only ones that occur after the effective date. JSON / YAML API The .WaitFor can be implemented using inputs as follows Field Description CancelCondition Optional expression to specify a cancel condition Inputs.EventName Expression to specify the event name Inputs.EventKey Expression to specify the event key Inputs.EffectiveDate Optional expression to specify the effective date { \"Id\": \"MyWaitStep\", \"StepType\": \"WorkflowCore.Primitives.WaitFor, WorkflowCore\", \"NextStepId\": \"...\", \"CancelCondition\": \"...\", \"Inputs\": { \"EventName\": \"\\\"Event1\\\"\", \"EventKey\": \"\\\"Key1\\\"\", \"EffectiveDate\": \"DateTime.Now\" } } Id: MyWaitStep StepType: WorkflowCore.Primitives.WaitFor, WorkflowCore NextStepId: \"...\" CancelCondition: \"...\" Inputs: EventName: '\"Event1\"' EventKey: '\"Key1\"' EffectiveDate: DateTime.Now","title":"Events"},{"location":"GT4T_%E6%9C%AA%E7%BF%BB%E8%AF%91/external-events/#events","text":"A workflow can also wait for an external event before proceeding. In the following example, the workflow will wait for an event called \"MyEvent\" with a key of 0 . Once an external source has fired this event, the workflow will wake up and continue processing, passing the data generated by the event onto the next step. public class EventSampleWorkflow : IWorkflow<MyDataClass> { public void Build(IWorkflowBuilder<MyDataClass> builder) { builder .StartWith(context => ExecutionResult.Next()) .WaitFor(\"MyEvent\", data => \"0\") .Output(data => data.Value, step => step.EventData) .Then<CustomMessage>() .Input(step => step.Message, data => \"The data from the event is \" + data.Value); } } ... //External events are published via the host //All workflows that have subscribed to MyEvent 0, will be passed \"hello\" host.PublishEvent(\"MyEvent\", \"0\", \"hello\");","title":"Events"},{"location":"GT4T_%E6%9C%AA%E7%BF%BB%E8%AF%91/external-events/#effective-date","text":"You can also specify an effective date when waiting for events, which allows you to respond to events that may have already occurred in the past, or only ones that occur after the effective date.","title":"Effective Date"},{"location":"GT4T_%E6%9C%AA%E7%BF%BB%E8%AF%91/external-events/#json-yaml-api","text":"The .WaitFor can be implemented using inputs as follows Field Description CancelCondition Optional expression to specify a cancel condition Inputs.EventName Expression to specify the event name Inputs.EventKey Expression to specify the event key Inputs.EffectiveDate Optional expression to specify the effective date { \"Id\": \"MyWaitStep\", \"StepType\": \"WorkflowCore.Primitives.WaitFor, WorkflowCore\", \"NextStepId\": \"...\", \"CancelCondition\": \"...\", \"Inputs\": { \"EventName\": \"\\\"Event1\\\"\", \"EventKey\": \"\\\"Key1\\\"\", \"EffectiveDate\": \"DateTime.Now\" } } Id: MyWaitStep StepType: WorkflowCore.Primitives.WaitFor, WorkflowCore NextStepId: \"...\" CancelCondition: \"...\" Inputs: EventName: '\"Event1\"' EventKey: '\"Key1\"' EffectiveDate: DateTime.Now","title":"JSON / YAML API"},{"location":"GT4T_%E6%9C%AA%E7%BF%BB%E8%AF%91/getting-started/","text":"Basic Concepts Steps A workflow consists of a series of connected steps. Each step can have inputs and produce outputs that can be passed back to the workflow within which it exists. Steps are defined by creating a class that inherits from the StepBody or StepBodyAsync abstract classes and implementing the Run/RunAsync method. They can also be created inline while defining the workflow structure. First we define some steps public class HelloWorld : StepBody { public override ExecutionResult Run(IStepExecutionContext context) { Console.WriteLine(\"Hello world\"); return ExecutionResult.Next(); } } The StepBody and StepBodyAsync class implementations are constructed by the workflow host which first tries to use IServiceProvider for dependency injection, if it can't construct it with this method, it will search for a parameterless constructor Then we define the workflow structure by composing a chain of steps. This is done by implementing the IWorkflow interface public class HelloWorldWorkflow : IWorkflow { public string Id => \"HelloWorld\"; public int Version => 1; public void Build(IWorkflowBuilder<object> builder) { builder .StartWith<HelloWorld>() .Then<GoodbyeWorld>(); } } The IWorkflow interface also has a readonly Id property and readonly Version property. These are used by the workflow host to identify a workflow definition. This workflow implemented in JSON would look like this { \"Id\": \"HelloWorld\", \"Version\": 1, \"Steps\": [ { \"Id\": \"Hello\", \"StepType\": \"MyApp.HelloWorld, MyApp\", \"NextStepId\": \"Bye\" }, { \"Id\": \"Bye\", \"StepType\": \"MyApp.GoodbyeWorld, MyApp\" } ] } You can also define your steps inline public class HelloWorldWorkflow : IWorkflow { public string Id => \"HelloWorld\"; public int Version => 1; public void Build(IWorkflowBuilder<object> builder) { builder .StartWith(context => { Console.WriteLine(\"Hello world\"); return ExecutionResult.Next(); }) .Then(context => { Console.WriteLine(\"Goodbye world\"); return ExecutionResult.Next(); }); } } Each running workflow is persisted to the chosen persistence provider between each step, where it can be picked up at a later point in time to continue execution. The outcome result of your step can instruct the workflow host to defer further execution of the workflow until a future point in time or in response to an external event. Host The workflow host is the service responsible for executing workflows. It does this by polling the persistence provider for workflow instances that are ready to run, executes them and then passes them back to the persistence provider to by stored for the next time they are run. It is also responsible for publishing events to any workflows that may be waiting on one. Setup Use the AddWorkflow extension method for IServiceCollection to configure the workflow host upon startup of your application. By default, it is configured with MemoryPersistenceProvider and SingleNodeConcurrencyProvider for testing purposes. You can also configure a DB persistence provider at this point. services.AddWorkflow(); Usage When your application starts, grab the workflow host from the built-in dependency injection framework IServiceProvider . Make sure you call RegisterWorkflow , so that the workflow host knows about all your workflows, and then call Start() to fire up the thread pool that executes workflows. Use the StartWorkflow method to initiate a new instance of a particular workflow. var host = serviceProvider.GetService<IWorkflowHost>(); host.RegisterWorkflow<HelloWorldWorkflow>(); host.Start(); host.StartWorkflow(\"HelloWorld\", 1, null); Console.ReadLine(); host.Stop(); Passing data between steps Each step is intended to be a black-box, therefore they support inputs and outputs. These inputs and outputs can be mapped to a data class that defines the custom data relevant to each workflow instance. The following sample shows how to define inputs and outputs on a step, it then shows how define a workflow with a typed class for internal data and how to map the inputs and outputs to properties on the custom data class. //Our workflow step with inputs and outputs public class AddNumbers : StepBody { public int Input1 { get; set; } public int Input2 { get; set; } public int Output { get; set; } public override ExecutionResult Run(IStepExecutionContext context) { Output = (Input1 + Input2); return ExecutionResult.Next(); } } //Our class to define the internal data of our workflow public class MyDataClass { public int Value1 { get; set; } public int Value2 { get; set; } public int Answer { get; set; } } //Our workflow definition with strongly typed internal data and mapped inputs & outputs public class PassingDataWorkflow : IWorkflow<MyDataClass> { public void Build(IWorkflowBuilder<MyDataClass> builder) { builder .StartWith<AddNumbers>() .Input(step => step.Input1, data => data.Value1) .Input(step => step.Input2, data => data.Value2) .Output(data => data.Answer, step => step.Output) .Then<CustomMessage>() .Input(step => step.Message, data => \"The answer is \" + data.Answer.ToString()); } ... } or in jSON format { \"Id\": \"AddWorkflow\", \"Version\": 1, \"DataType\": \"MyApp.MyDataClass, MyApp\", \"Steps\": [ { \"Id\": \"Add\", \"StepType\": \"MyApp.AddNumbers, MyApp\", \"NextStepId\": \"ShowResult\", \"Inputs\": { \"Input1\": \"data.Value1\", \"Input2\": \"data.Value2\" }, \"Outputs\": { \"Answer\": \"step.Output\" } }, { \"Id\": \"ShowResult\", \"StepType\": \"MyApp.CustomMessage, MyApp\", \"Inputs\": { \"Message\": \"\\\"The answer is \\\" + data.Answer\" } } ] } or in YAML format Id: AddWorkflow Version: 1 DataType: MyApp.MyDataClass, MyApp Steps: - Id: Add StepType: MyApp.AddNumbers, MyApp NextStepId: ShowResult Inputs: Input1: data.Value1 Input2: data.Value2 Outputs: Answer: step.Output - Id: ShowResult StepType: MyApp.CustomMessage, MyApp Inputs: Message: '\"The answer is \" + data.Answer' Injecting dependencies into steps If you register your step classes with the IoC container, the workflow host will use the IoC container to construct them and therefore inject any required dependencies. This example illustrates the use of dependency injection for workflow steps. Consider the following service public interface IMyService { void DoTheThings(); } ... public class MyService : IMyService { public void DoTheThings() { Console.WriteLine(\"Doing stuff...\"); } } Which is consumed by a workflow step as follows public class DoSomething : StepBody { private IMyService _myService; public DoSomething(IMyService myService) { _myService = myService; } public override ExecutionResult Run(IStepExecutionContext context) { _myService.DoTheThings(); return ExecutionResult.Next(); } } Simply add both the service and the workflow step as transients to the service collection when setting up your IoC container. (Avoid registering steps as singletons, since multiple concurrent workflows may need to use them at once.) IServiceCollection services = new ServiceCollection(); services.AddLogging(); services.AddWorkflow(); services.AddTransient<DoSomething>(); services.AddTransient<IMyService, MyService>();","title":"Basic Concepts"},{"location":"GT4T_%E6%9C%AA%E7%BF%BB%E8%AF%91/getting-started/#basic-concepts","text":"","title":"Basic Concepts"},{"location":"GT4T_%E6%9C%AA%E7%BF%BB%E8%AF%91/getting-started/#steps","text":"A workflow consists of a series of connected steps. Each step can have inputs and produce outputs that can be passed back to the workflow within which it exists. Steps are defined by creating a class that inherits from the StepBody or StepBodyAsync abstract classes and implementing the Run/RunAsync method. They can also be created inline while defining the workflow structure.","title":"Steps"},{"location":"GT4T_%E6%9C%AA%E7%BF%BB%E8%AF%91/getting-started/#first-we-define-some-steps","text":"public class HelloWorld : StepBody { public override ExecutionResult Run(IStepExecutionContext context) { Console.WriteLine(\"Hello world\"); return ExecutionResult.Next(); } } The StepBody and StepBodyAsync class implementations are constructed by the workflow host which first tries to use IServiceProvider for dependency injection, if it can't construct it with this method, it will search for a parameterless constructor","title":"First we define some steps"},{"location":"GT4T_%E6%9C%AA%E7%BF%BB%E8%AF%91/getting-started/#then-we-define-the-workflow-structure-by-composing-a-chain-of-steps-this-is-done-by-implementing-the-iworkflow-interface","text":"public class HelloWorldWorkflow : IWorkflow { public string Id => \"HelloWorld\"; public int Version => 1; public void Build(IWorkflowBuilder<object> builder) { builder .StartWith<HelloWorld>() .Then<GoodbyeWorld>(); } } The IWorkflow interface also has a readonly Id property and readonly Version property. These are used by the workflow host to identify a workflow definition. This workflow implemented in JSON would look like this { \"Id\": \"HelloWorld\", \"Version\": 1, \"Steps\": [ { \"Id\": \"Hello\", \"StepType\": \"MyApp.HelloWorld, MyApp\", \"NextStepId\": \"Bye\" }, { \"Id\": \"Bye\", \"StepType\": \"MyApp.GoodbyeWorld, MyApp\" } ] }","title":"Then we define the workflow structure by composing a chain of steps.  This is done by implementing the IWorkflow interface"},{"location":"GT4T_%E6%9C%AA%E7%BF%BB%E8%AF%91/getting-started/#you-can-also-define-your-steps-inline","text":"public class HelloWorldWorkflow : IWorkflow { public string Id => \"HelloWorld\"; public int Version => 1; public void Build(IWorkflowBuilder<object> builder) { builder .StartWith(context => { Console.WriteLine(\"Hello world\"); return ExecutionResult.Next(); }) .Then(context => { Console.WriteLine(\"Goodbye world\"); return ExecutionResult.Next(); }); } } Each running workflow is persisted to the chosen persistence provider between each step, where it can be picked up at a later point in time to continue execution. The outcome result of your step can instruct the workflow host to defer further execution of the workflow until a future point in time or in response to an external event.","title":"You can also define your steps inline"},{"location":"GT4T_%E6%9C%AA%E7%BF%BB%E8%AF%91/getting-started/#host","text":"The workflow host is the service responsible for executing workflows. It does this by polling the persistence provider for workflow instances that are ready to run, executes them and then passes them back to the persistence provider to by stored for the next time they are run. It is also responsible for publishing events to any workflows that may be waiting on one.","title":"Host"},{"location":"GT4T_%E6%9C%AA%E7%BF%BB%E8%AF%91/getting-started/#setup","text":"Use the AddWorkflow extension method for IServiceCollection to configure the workflow host upon startup of your application. By default, it is configured with MemoryPersistenceProvider and SingleNodeConcurrencyProvider for testing purposes. You can also configure a DB persistence provider at this point. services.AddWorkflow();","title":"Setup"},{"location":"GT4T_%E6%9C%AA%E7%BF%BB%E8%AF%91/getting-started/#usage","text":"When your application starts, grab the workflow host from the built-in dependency injection framework IServiceProvider . Make sure you call RegisterWorkflow , so that the workflow host knows about all your workflows, and then call Start() to fire up the thread pool that executes workflows. Use the StartWorkflow method to initiate a new instance of a particular workflow. var host = serviceProvider.GetService<IWorkflowHost>(); host.RegisterWorkflow<HelloWorldWorkflow>(); host.Start(); host.StartWorkflow(\"HelloWorld\", 1, null); Console.ReadLine(); host.Stop();","title":"Usage"},{"location":"GT4T_%E6%9C%AA%E7%BF%BB%E8%AF%91/getting-started/#passing-data-between-steps","text":"Each step is intended to be a black-box, therefore they support inputs and outputs. These inputs and outputs can be mapped to a data class that defines the custom data relevant to each workflow instance. The following sample shows how to define inputs and outputs on a step, it then shows how define a workflow with a typed class for internal data and how to map the inputs and outputs to properties on the custom data class. //Our workflow step with inputs and outputs public class AddNumbers : StepBody { public int Input1 { get; set; } public int Input2 { get; set; } public int Output { get; set; } public override ExecutionResult Run(IStepExecutionContext context) { Output = (Input1 + Input2); return ExecutionResult.Next(); } } //Our class to define the internal data of our workflow public class MyDataClass { public int Value1 { get; set; } public int Value2 { get; set; } public int Answer { get; set; } } //Our workflow definition with strongly typed internal data and mapped inputs & outputs public class PassingDataWorkflow : IWorkflow<MyDataClass> { public void Build(IWorkflowBuilder<MyDataClass> builder) { builder .StartWith<AddNumbers>() .Input(step => step.Input1, data => data.Value1) .Input(step => step.Input2, data => data.Value2) .Output(data => data.Answer, step => step.Output) .Then<CustomMessage>() .Input(step => step.Message, data => \"The answer is \" + data.Answer.ToString()); } ... } or in jSON format { \"Id\": \"AddWorkflow\", \"Version\": 1, \"DataType\": \"MyApp.MyDataClass, MyApp\", \"Steps\": [ { \"Id\": \"Add\", \"StepType\": \"MyApp.AddNumbers, MyApp\", \"NextStepId\": \"ShowResult\", \"Inputs\": { \"Input1\": \"data.Value1\", \"Input2\": \"data.Value2\" }, \"Outputs\": { \"Answer\": \"step.Output\" } }, { \"Id\": \"ShowResult\", \"StepType\": \"MyApp.CustomMessage, MyApp\", \"Inputs\": { \"Message\": \"\\\"The answer is \\\" + data.Answer\" } } ] } or in YAML format Id: AddWorkflow Version: 1 DataType: MyApp.MyDataClass, MyApp Steps: - Id: Add StepType: MyApp.AddNumbers, MyApp NextStepId: ShowResult Inputs: Input1: data.Value1 Input2: data.Value2 Outputs: Answer: step.Output - Id: ShowResult StepType: MyApp.CustomMessage, MyApp Inputs: Message: '\"The answer is \" + data.Answer'","title":"Passing data between steps"},{"location":"GT4T_%E6%9C%AA%E7%BF%BB%E8%AF%91/getting-started/#injecting-dependencies-into-steps","text":"If you register your step classes with the IoC container, the workflow host will use the IoC container to construct them and therefore inject any required dependencies. This example illustrates the use of dependency injection for workflow steps. Consider the following service public interface IMyService { void DoTheThings(); } ... public class MyService : IMyService { public void DoTheThings() { Console.WriteLine(\"Doing stuff...\"); } } Which is consumed by a workflow step as follows public class DoSomething : StepBody { private IMyService _myService; public DoSomething(IMyService myService) { _myService = myService; } public override ExecutionResult Run(IStepExecutionContext context) { _myService.DoTheThings(); return ExecutionResult.Next(); } } Simply add both the service and the workflow step as transients to the service collection when setting up your IoC container. (Avoid registering steps as singletons, since multiple concurrent workflows may need to use them at once.) IServiceCollection services = new ServiceCollection(); services.AddLogging(); services.AddWorkflow(); services.AddTransient<DoSomething>(); services.AddTransient<IMyService, MyService>();","title":"Injecting dependencies into steps"},{"location":"GT4T_%E6%9C%AA%E7%BF%BB%E8%AF%91/json-yaml/","text":"Loading workflow definitions from JSON or YAML Install the WorkflowCore.DSL package from nuget and call AddWorkflowDSL on your service collection. Then grab the DefinitionLoader from the IoC container and call the .LoadDefinition method using WorkflowCore.Interface; ... var loader = serviceProvider.GetService<IDefinitionLoader>(); loader.LoadDefinition(\"<<json or yaml string here>>\", Deserializers.Json); Common DSL Both the JSON and YAML formats follow a common DSL, where step types within the workflow are referenced by the fully qualified class names. Built-in step types typically live in the WorklfowCore.Primitives namespace. Field Description Id Workflow Definition ID Version Workflow Definition Version DataType Fully qualified assembly class name of the custom data object Steps[].Id Step ID (required unique key for each step) Steps[].StepType Fully qualified assembly class name of the step Steps[].NextStepId Step ID of the next step after this one completes Steps[].Inputs Optional Key/value pair of step inputs Steps[].Outputs Optional Key/value pair of step outputs Steps[].CancelCondition Optional cancel condition { \"Id\": \"HelloWorld\", \"Version\": 1, \"Steps\": [ { \"Id\": \"Hello\", \"StepType\": \"MyApp.HelloWorld, MyApp\", \"NextStepId\": \"Bye\" }, { \"Id\": \"Bye\", \"StepType\": \"MyApp.GoodbyeWorld, MyApp\" } ] } Id: HelloWorld Version: 1 Steps: - Id: Hello StepType: MyApp.HelloWorld, MyApp NextStepId: Bye - Id: Bye StepType: MyApp.GoodbyeWorld, MyApp Inputs and Outputs Inputs and outputs can be bound to a step as a key/value pair object, * The Inputs collection, the key would match a property on the Step class and the value would be an expression with both the data and context parameters at your disposal. * The Outputs collection, the key would match a property on the Data class and the value would be an expression with both the step as a parameter at your disposal. Full details of the capabilities of expression language can be found here { \"Id\": \"AddWorkflow\", \"Version\": 1, \"DataType\": \"MyApp.MyDataClass, MyApp\", \"Steps\": [ { \"Id\": \"Hello\", \"StepType\": \"MyApp.HelloWorld, MyApp\", \"NextStepId\": \"Add\" }, { \"Id\": \"Add\", \"StepType\": \"MyApp.AddNumbers, MyApp\", \"NextStepId\": \"Bye\", \"Inputs\": { \"Value1\": \"data.Value1\", \"Value2\": \"data.Value2\" }, \"Outputs\": { \"Answer\": \"step.Result\" } }, { \"Id\": \"Bye\", \"StepType\": \"MyApp.GoodbyeWorld, MyApp\" } ] } Id: AddWorkflow Version: 1 DataType: MyApp.MyDataClass, MyApp Steps: - Id: Hello StepType: MyApp.HelloWorld, MyApp NextStepId: Add - Id: Add StepType: MyApp.AddNumbers, MyApp NextStepId: Bye Inputs: Value1: data.Value1 Value2: data.Value2 Outputs: Answer: step.Result - Id: Bye StepType: MyApp.GoodbyeWorld, MyApp { \"Id\": \"AddWorkflow\", \"Version\": 1, \"DataType\": \"MyApp.MyDataClass, MyApp\", \"Steps\": [ { \"Id\": \"Hello\", \"StepType\": \"MyApp.HelloWorld, MyApp\", \"NextStepId\": \"Print\" }, { \"Id\": \"Print\", \"StepType\": \"MyApp.PrintMessage, MyApp\", \"Inputs\": { \"Message\": \"\\\"Hi there!\\\"\" } } ] } Id: AddWorkflow Version: 1 DataType: MyApp.MyDataClass, MyApp Steps: - Id: Hello StepType: MyApp.HelloWorld, MyApp NextStepId: Print - Id: Print StepType: MyApp.PrintMessage, MyApp Inputs: Message: '\"Hi there!\"' You can also pass object graphs to step inputs as opposed to just scalar values \"inputs\": { \"Body\": { \"Value1\": 1, \"Value2\": 2 }, \"Headers\": { \"Content-Type\": \"application/json\" } }, If you want to evaluate an expression for a given property of your object, simply prepend and @ and pass an expression string \"inputs\": { \"Body\": { \"@Value1\": \"data.MyValue * 2\", \"Value2\": 5 }, \"Headers\": { \"Content-Type\": \"application/json\" } }, Enums If your step has an enum property, you can just pass the string representation of the enum value and it will be automatically converted. Environment variables available in input expressions You can access environment variables from within input expressions. usage: environment[\"VARIABLE_NAME\"]","title":"Loading workflow definitions from JSON or YAML"},{"location":"GT4T_%E6%9C%AA%E7%BF%BB%E8%AF%91/json-yaml/#loading-workflow-definitions-from-json-or-yaml","text":"Install the WorkflowCore.DSL package from nuget and call AddWorkflowDSL on your service collection. Then grab the DefinitionLoader from the IoC container and call the .LoadDefinition method using WorkflowCore.Interface; ... var loader = serviceProvider.GetService<IDefinitionLoader>(); loader.LoadDefinition(\"<<json or yaml string here>>\", Deserializers.Json);","title":"Loading workflow definitions from JSON or YAML"},{"location":"GT4T_%E6%9C%AA%E7%BF%BB%E8%AF%91/json-yaml/#common-dsl","text":"Both the JSON and YAML formats follow a common DSL, where step types within the workflow are referenced by the fully qualified class names. Built-in step types typically live in the WorklfowCore.Primitives namespace. Field Description Id Workflow Definition ID Version Workflow Definition Version DataType Fully qualified assembly class name of the custom data object Steps[].Id Step ID (required unique key for each step) Steps[].StepType Fully qualified assembly class name of the step Steps[].NextStepId Step ID of the next step after this one completes Steps[].Inputs Optional Key/value pair of step inputs Steps[].Outputs Optional Key/value pair of step outputs Steps[].CancelCondition Optional cancel condition { \"Id\": \"HelloWorld\", \"Version\": 1, \"Steps\": [ { \"Id\": \"Hello\", \"StepType\": \"MyApp.HelloWorld, MyApp\", \"NextStepId\": \"Bye\" }, { \"Id\": \"Bye\", \"StepType\": \"MyApp.GoodbyeWorld, MyApp\" } ] } Id: HelloWorld Version: 1 Steps: - Id: Hello StepType: MyApp.HelloWorld, MyApp NextStepId: Bye - Id: Bye StepType: MyApp.GoodbyeWorld, MyApp","title":"Common DSL"},{"location":"GT4T_%E6%9C%AA%E7%BF%BB%E8%AF%91/json-yaml/#inputs-and-outputs","text":"Inputs and outputs can be bound to a step as a key/value pair object, * The Inputs collection, the key would match a property on the Step class and the value would be an expression with both the data and context parameters at your disposal. * The Outputs collection, the key would match a property on the Data class and the value would be an expression with both the step as a parameter at your disposal. Full details of the capabilities of expression language can be found here { \"Id\": \"AddWorkflow\", \"Version\": 1, \"DataType\": \"MyApp.MyDataClass, MyApp\", \"Steps\": [ { \"Id\": \"Hello\", \"StepType\": \"MyApp.HelloWorld, MyApp\", \"NextStepId\": \"Add\" }, { \"Id\": \"Add\", \"StepType\": \"MyApp.AddNumbers, MyApp\", \"NextStepId\": \"Bye\", \"Inputs\": { \"Value1\": \"data.Value1\", \"Value2\": \"data.Value2\" }, \"Outputs\": { \"Answer\": \"step.Result\" } }, { \"Id\": \"Bye\", \"StepType\": \"MyApp.GoodbyeWorld, MyApp\" } ] } Id: AddWorkflow Version: 1 DataType: MyApp.MyDataClass, MyApp Steps: - Id: Hello StepType: MyApp.HelloWorld, MyApp NextStepId: Add - Id: Add StepType: MyApp.AddNumbers, MyApp NextStepId: Bye Inputs: Value1: data.Value1 Value2: data.Value2 Outputs: Answer: step.Result - Id: Bye StepType: MyApp.GoodbyeWorld, MyApp { \"Id\": \"AddWorkflow\", \"Version\": 1, \"DataType\": \"MyApp.MyDataClass, MyApp\", \"Steps\": [ { \"Id\": \"Hello\", \"StepType\": \"MyApp.HelloWorld, MyApp\", \"NextStepId\": \"Print\" }, { \"Id\": \"Print\", \"StepType\": \"MyApp.PrintMessage, MyApp\", \"Inputs\": { \"Message\": \"\\\"Hi there!\\\"\" } } ] } Id: AddWorkflow Version: 1 DataType: MyApp.MyDataClass, MyApp Steps: - Id: Hello StepType: MyApp.HelloWorld, MyApp NextStepId: Print - Id: Print StepType: MyApp.PrintMessage, MyApp Inputs: Message: '\"Hi there!\"' You can also pass object graphs to step inputs as opposed to just scalar values \"inputs\": { \"Body\": { \"Value1\": 1, \"Value2\": 2 }, \"Headers\": { \"Content-Type\": \"application/json\" } }, If you want to evaluate an expression for a given property of your object, simply prepend and @ and pass an expression string \"inputs\": { \"Body\": { \"@Value1\": \"data.MyValue * 2\", \"Value2\": 5 }, \"Headers\": { \"Content-Type\": \"application/json\" } },","title":"Inputs and Outputs"},{"location":"GT4T_%E6%9C%AA%E7%BF%BB%E8%AF%91/json-yaml/#enums","text":"If your step has an enum property, you can just pass the string representation of the enum value and it will be automatically converted.","title":"Enums"},{"location":"GT4T_%E6%9C%AA%E7%BF%BB%E8%AF%91/json-yaml/#environment-variables-available-in-input-expressions","text":"You can access environment variables from within input expressions. usage: environment[\"VARIABLE_NAME\"]","title":"Environment variables available in input expressions"},{"location":"GT4T_%E6%9C%AA%E7%BF%BB%E8%AF%91/multi-node-clusters/","text":"Multi-node clusters By default, the WorkflowHost service will run as a single node using the built-in queue and locking providers for a single node configuration. Should you wish to run a multi-node cluster, you will need to configure an external queueing mechanism and a distributed lock manager to co-ordinate the cluster. These are the providers that are currently available. Queue Providers SingleNodeQueueProvider (Default built-in provider) Azure Storage Queues Redis RabbitMQ AWS Simple Queue Service Distributed lock managers SingleNodeLockProvider (Default built-in provider) Azure Storage Leases Redis AWS DynamoDB","title":"Multi-node clusters"},{"location":"GT4T_%E6%9C%AA%E7%BF%BB%E8%AF%91/multi-node-clusters/#multi-node-clusters","text":"By default, the WorkflowHost service will run as a single node using the built-in queue and locking providers for a single node configuration. Should you wish to run a multi-node cluster, you will need to configure an external queueing mechanism and a distributed lock manager to co-ordinate the cluster. These are the providers that are currently available.","title":"Multi-node clusters"},{"location":"GT4T_%E6%9C%AA%E7%BF%BB%E8%AF%91/multi-node-clusters/#queue-providers","text":"SingleNodeQueueProvider (Default built-in provider) Azure Storage Queues Redis RabbitMQ AWS Simple Queue Service","title":"Queue Providers"},{"location":"GT4T_%E6%9C%AA%E7%BF%BB%E8%AF%91/multi-node-clusters/#distributed-lock-managers","text":"SingleNodeLockProvider (Default built-in provider) Azure Storage Leases Redis AWS DynamoDB","title":"Distributed lock managers"},{"location":"GT4T_%E6%9C%AA%E7%BF%BB%E8%AF%91/performance/","text":"Performance Test Workflow-core version 3.7.0 was put under test to evaluate its performance. The setup used was single node with the default MemoryPersistenceProvider persistence provider. Methodology Test Environment - Test were run on following two environments one after the other to see how workflow-core performance with a lower vs higher hardware configuration. Lower configuration Cores: 8 vCPU ( Standard_D8s_v3 ) RAM: 32 GB OS: Linux Ubuntu 20.04 dotNet 6 Higher configuration Cores: 32 vCPU ( Standard_D32as_v4 ) RAM: 128 GB OS: Linux Ubuntu 20.04 dotNet 6 Test Workflow: Workflow consist of 3 basic steps. These 3 simple steps were chosen to test the performance of the workflow engine with minimal yet sufficient complexity and to avoid any external dependencies. Step1 : Generate a random number between 1 to 10 and print it on standard output. Step2 : Conditional step Step 2.1: If value generate in step1 is > 5 then print it on standard output. Step 2.2: If value generate in step1 is <= 5 then print it on standard output. Step3: Prints a good bye message on standard output. Test tools: NBomber was used as performance testing framework with C# console app as base. Test scenarios: Each type of test run executed for 20 minutes. NBomber Load Simulation of type KeepConstant copies was used. This type of simulation keep a constant amount of Scenario copies(instances) for a specific period. Concurrent copies [1,2,3,4,5,6,7,8,10,12,14,16,32,64,128,256,512,1024] were tested. For example if we take Concurrent copies=4 and Duration=20 minutes this means that NBomber will ensure that we have 4 instance of Test Workflow running in parallel for 20 minutes. Results Workflow per seconds - Below tables shows how many workflows we are able to execute per second on two different environment with increasing number of concurrent copies. Concurrent Copies 8 vCPU 32 vCPU 1 300.6 504.7 2 310.3 513.1 3 309.6 519.3 4 314.7 521.3 5 312.4 519.0 6 314.7 517.7 7 318.9 516.7 8 318.4 517.5 10 322.6 517.1 12 319.7 517.6 14 322.4 518.1 16 327.0 515.5 32 327.7 515.8 64 330.7 523.7 128 332.8 526.9 256 332.8 529.1 512 332.8 529.1 1024 341.3 529.1 Latency - Shows Mean, P99 and P50 latency in milliseconds on two different environment with increasing number of concurrent copies. Concurrent Copies Mean 8 vCPU Mean 32 vCPU P.99 8 vCPU P.99 32 vCPU P.50 8 vCPU P.50 32 vCPU 1 3.32 1.98 12.67 2.49 3.13 1.85 2 6.43 3.89 19.96 5.67 6.17 3.65 3 9.67 5.77 24.96 8.2 9.14 5.46 4 12.7 7.76 27.44 13.57 12.02 7.22 5 15.99 9.63 34.59 41.89 15.14 9.08 6 19.05 11.58 38.69 45.92 18.02 10.93 7 21.94 13.54 42.18 48.9 20.72 12.66 8 25.11 15.45 44.35 51.04 23.92 14.54 10 30.98 19.33 52.29 56.64 29.31 18.21 12 37.52 23.18 59.2 63.33 35.42 21.82 14 43.44 27.01 67.33 67.58 41.28 25.55 16 48.93 31.03 72.06 72.77 46.11 28.93 32 97.65 62.03 130.05 104.96 94.91 58.02 64 193.53 122.24 235.14 168.45 191.49 115.26 128 384.63 243.74 449.79 294.65 379.65 236.67 256 769.13 486.82 834.07 561.66 766.46 498.22 512 1538.29 968.02 1725.44 1052.67 1542.14 962.05 1024 2999.36 1935.32 3219.46 2072.57 3086.34 1935.36 References NBomber","title":"Performance Test"},{"location":"GT4T_%E6%9C%AA%E7%BF%BB%E8%AF%91/performance/#performance-test","text":"Workflow-core version 3.7.0 was put under test to evaluate its performance. The setup used was single node with the default MemoryPersistenceProvider persistence provider.","title":"Performance Test"},{"location":"GT4T_%E6%9C%AA%E7%BF%BB%E8%AF%91/performance/#methodology","text":"Test Environment - Test were run on following two environments one after the other to see how workflow-core performance with a lower vs higher hardware configuration. Lower configuration Cores: 8 vCPU ( Standard_D8s_v3 ) RAM: 32 GB OS: Linux Ubuntu 20.04 dotNet 6 Higher configuration Cores: 32 vCPU ( Standard_D32as_v4 ) RAM: 128 GB OS: Linux Ubuntu 20.04 dotNet 6 Test Workflow: Workflow consist of 3 basic steps. These 3 simple steps were chosen to test the performance of the workflow engine with minimal yet sufficient complexity and to avoid any external dependencies. Step1 : Generate a random number between 1 to 10 and print it on standard output. Step2 : Conditional step Step 2.1: If value generate in step1 is > 5 then print it on standard output. Step 2.2: If value generate in step1 is <= 5 then print it on standard output. Step3: Prints a good bye message on standard output. Test tools: NBomber was used as performance testing framework with C# console app as base. Test scenarios: Each type of test run executed for 20 minutes. NBomber Load Simulation of type KeepConstant copies was used. This type of simulation keep a constant amount of Scenario copies(instances) for a specific period. Concurrent copies [1,2,3,4,5,6,7,8,10,12,14,16,32,64,128,256,512,1024] were tested. For example if we take Concurrent copies=4 and Duration=20 minutes this means that NBomber will ensure that we have 4 instance of Test Workflow running in parallel for 20 minutes.","title":"Methodology"},{"location":"GT4T_%E6%9C%AA%E7%BF%BB%E8%AF%91/performance/#results","text":"Workflow per seconds - Below tables shows how many workflows we are able to execute per second on two different environment with increasing number of concurrent copies. Concurrent Copies 8 vCPU 32 vCPU 1 300.6 504.7 2 310.3 513.1 3 309.6 519.3 4 314.7 521.3 5 312.4 519.0 6 314.7 517.7 7 318.9 516.7 8 318.4 517.5 10 322.6 517.1 12 319.7 517.6 14 322.4 518.1 16 327.0 515.5 32 327.7 515.8 64 330.7 523.7 128 332.8 526.9 256 332.8 529.1 512 332.8 529.1 1024 341.3 529.1 Latency - Shows Mean, P99 and P50 latency in milliseconds on two different environment with increasing number of concurrent copies. Concurrent Copies Mean 8 vCPU Mean 32 vCPU P.99 8 vCPU P.99 32 vCPU P.50 8 vCPU P.50 32 vCPU 1 3.32 1.98 12.67 2.49 3.13 1.85 2 6.43 3.89 19.96 5.67 6.17 3.65 3 9.67 5.77 24.96 8.2 9.14 5.46 4 12.7 7.76 27.44 13.57 12.02 7.22 5 15.99 9.63 34.59 41.89 15.14 9.08 6 19.05 11.58 38.69 45.92 18.02 10.93 7 21.94 13.54 42.18 48.9 20.72 12.66 8 25.11 15.45 44.35 51.04 23.92 14.54 10 30.98 19.33 52.29 56.64 29.31 18.21 12 37.52 23.18 59.2 63.33 35.42 21.82 14 43.44 27.01 67.33 67.58 41.28 25.55 16 48.93 31.03 72.06 72.77 46.11 28.93 32 97.65 62.03 130.05 104.96 94.91 58.02 64 193.53 122.24 235.14 168.45 191.49 115.26 128 384.63 243.74 449.79 294.65 379.65 236.67 256 769.13 486.82 834.07 561.66 766.46 498.22 512 1538.29 968.02 1725.44 1052.67 1542.14 962.05 1024 2999.36 1935.32 3219.46 2072.57 3086.34 1935.36","title":"Results"},{"location":"GT4T_%E6%9C%AA%E7%BF%BB%E8%AF%91/performance/#references","text":"NBomber","title":"References"},{"location":"GT4T_%E6%9C%AA%E7%BF%BB%E8%AF%91/persistence/","text":"Persistence Since workflows are typically long running processes, they will need to be persisted to storage between steps. There are several persistence providers available as separate Nuget packages. MemoryPersistenceProvider (Default provider, for demo and testing purposes) MongoDB SQL Server PostgreSQL Sqlite Amazon DynamoDB Cosmos DB Redis","title":"Persistence"},{"location":"GT4T_%E6%9C%AA%E7%BF%BB%E8%AF%91/persistence/#persistence","text":"Since workflows are typically long running processes, they will need to be persisted to storage between steps. There are several persistence providers available as separate Nuget packages. MemoryPersistenceProvider (Default provider, for demo and testing purposes) MongoDB SQL Server PostgreSQL Sqlite Amazon DynamoDB Cosmos DB Redis","title":"Persistence"},{"location":"GT4T_%E6%9C%AA%E7%BF%BB%E8%AF%91/sagas/","text":"Saga transaction with compensation A Saga allows you to encapsulate a sequence of steps within a saga transaction and specify compensation steps for each. In the sample, Task2 will throw an exception, then UndoTask2 and UndoTask1 will be triggered. builder .StartWith(context => Console.WriteLine(\"Begin\")) .Saga(saga => saga .StartWith<Task1>() .CompensateWith<UndoTask1>() .Then<Task2>() .CompensateWith<UndoTask2>() .Then<Task3>() .CompensateWith<UndoTask3>() ) .CompensateWith<CleanUp>() .Then(context => Console.WriteLine(\"End\")); Retry policy for failed saga transaction This particular example will retry the saga every 5 seconds, but you could also simply fail completely, and process a master compensation task for the whole saga. builder .StartWith(context => Console.WriteLine(\"Begin\")) .Saga(saga => saga .StartWith<Task1>() .CompensateWith<UndoTask1>() .Then<Task2>() .CompensateWith<UndoTask2>() .Then<Task3>() .CompensateWith<UndoTask3>() ) .OnError(Models.WorkflowErrorHandling.Retry, TimeSpan.FromSeconds(5)) .Then(context => Console.WriteLine(\"End\")); Compensate entire saga transaction You could also only specify a master compensation step, as follows builder .StartWith(context => Console.WriteLine(\"Begin\")) .Saga(saga => saga .StartWith<Task1>() .Then<Task2>() .Then<Task3>() ) .CompensateWith<UndoEverything>() .Then(context => Console.WriteLine(\"End\")); Passing parameters to compensation steps Parameters can be passed to a compensation step as follows builder .StartWith<SayHello>() .CompensateWith<PrintMessage>(compensate => { compensate.Input(step => step.Message, data => \"undoing...\"); }) Expressing a saga in JSON or YAML A saga transaction can be expressed in JSON or YAML, by using the WorkflowCore.Primitives.Sequence step and setting the Saga parameter to true . The compensation steps can be defined by specifying the CompensateWith parameter. { \"Id\": \"Saga-Sample\", \"Version\": 1, \"DataType\": \"MyApp.MyDataClass, MyApp\", \"Steps\": [ { \"Id\": \"Hello\", \"StepType\": \"MyApp.HelloWorld, MyApp\", \"NextStepId\": \"MySaga\" }, { \"Id\": \"MySaga\", \"StepType\": \"WorkflowCore.Primitives.Sequence, WorkflowCore\", \"NextStepId\": \"Bye\", \"Saga\": true, \"Do\": [ [ { \"Id\": \"do1\", \"StepType\": \"MyApp.Task1, MyApp\", \"NextStepId\": \"do2\", \"CompensateWith\": [ { \"Id\": \"undo1\", \"StepType\": \"MyApp.UndoTask1, MyApp\" } ] }, { \"Id\": \"do2\", \"StepType\": \"MyApp.Task2, MyApp\", \"CompensateWith\": [ { \"Id\": \"undo2-1\", \"NextStepId\": \"undo2-2\", \"StepType\": \"MyApp.UndoTask2, MyApp\" }, { \"Id\": \"undo2-2\", \"StepType\": \"MyApp.DoSomethingElse, MyApp\" } ] } ] ] }, { \"Id\": \"Bye\", \"StepType\": \"MyApp.GoodbyeWorld, MyApp\" } ] } Id: Saga-Sample Version: 1 DataType: MyApp.MyDataClass, MyApp Steps: - Id: Hello StepType: MyApp.HelloWorld, MyApp NextStepId: MySaga - Id: MySaga StepType: WorkflowCore.Primitives.Sequence, WorkflowCore NextStepId: Bye Saga: true Do: - - Id: do1 StepType: MyApp.Task1, MyApp NextStepId: do2 CompensateWith: - Id: undo1 StepType: MyApp.UndoTask1, MyApp - Id: do2 StepType: MyApp.Task2, MyApp CompensateWith: - Id: undo2-1 NextStepId: undo2-2 StepType: MyApp.UndoTask2, MyApp - Id: undo2-2 StepType: MyApp.DoSomethingElse, MyApp - Id: Bye StepType: MyApp.GoodbyeWorld, MyApp","title":"Saga transaction with compensation"},{"location":"GT4T_%E6%9C%AA%E7%BF%BB%E8%AF%91/sagas/#saga-transaction-with-compensation","text":"A Saga allows you to encapsulate a sequence of steps within a saga transaction and specify compensation steps for each. In the sample, Task2 will throw an exception, then UndoTask2 and UndoTask1 will be triggered. builder .StartWith(context => Console.WriteLine(\"Begin\")) .Saga(saga => saga .StartWith<Task1>() .CompensateWith<UndoTask1>() .Then<Task2>() .CompensateWith<UndoTask2>() .Then<Task3>() .CompensateWith<UndoTask3>() ) .CompensateWith<CleanUp>() .Then(context => Console.WriteLine(\"End\"));","title":"Saga transaction with compensation"},{"location":"GT4T_%E6%9C%AA%E7%BF%BB%E8%AF%91/sagas/#retry-policy-for-failed-saga-transaction","text":"This particular example will retry the saga every 5 seconds, but you could also simply fail completely, and process a master compensation task for the whole saga. builder .StartWith(context => Console.WriteLine(\"Begin\")) .Saga(saga => saga .StartWith<Task1>() .CompensateWith<UndoTask1>() .Then<Task2>() .CompensateWith<UndoTask2>() .Then<Task3>() .CompensateWith<UndoTask3>() ) .OnError(Models.WorkflowErrorHandling.Retry, TimeSpan.FromSeconds(5)) .Then(context => Console.WriteLine(\"End\"));","title":"Retry policy for failed saga transaction"},{"location":"GT4T_%E6%9C%AA%E7%BF%BB%E8%AF%91/sagas/#compensate-entire-saga-transaction","text":"You could also only specify a master compensation step, as follows builder .StartWith(context => Console.WriteLine(\"Begin\")) .Saga(saga => saga .StartWith<Task1>() .Then<Task2>() .Then<Task3>() ) .CompensateWith<UndoEverything>() .Then(context => Console.WriteLine(\"End\"));","title":"Compensate entire saga transaction"},{"location":"GT4T_%E6%9C%AA%E7%BF%BB%E8%AF%91/sagas/#passing-parameters-to-compensation-steps","text":"Parameters can be passed to a compensation step as follows builder .StartWith<SayHello>() .CompensateWith<PrintMessage>(compensate => { compensate.Input(step => step.Message, data => \"undoing...\"); })","title":"Passing parameters to compensation steps"},{"location":"GT4T_%E6%9C%AA%E7%BF%BB%E8%AF%91/sagas/#expressing-a-saga-in-json-or-yaml","text":"A saga transaction can be expressed in JSON or YAML, by using the WorkflowCore.Primitives.Sequence step and setting the Saga parameter to true . The compensation steps can be defined by specifying the CompensateWith parameter. { \"Id\": \"Saga-Sample\", \"Version\": 1, \"DataType\": \"MyApp.MyDataClass, MyApp\", \"Steps\": [ { \"Id\": \"Hello\", \"StepType\": \"MyApp.HelloWorld, MyApp\", \"NextStepId\": \"MySaga\" }, { \"Id\": \"MySaga\", \"StepType\": \"WorkflowCore.Primitives.Sequence, WorkflowCore\", \"NextStepId\": \"Bye\", \"Saga\": true, \"Do\": [ [ { \"Id\": \"do1\", \"StepType\": \"MyApp.Task1, MyApp\", \"NextStepId\": \"do2\", \"CompensateWith\": [ { \"Id\": \"undo1\", \"StepType\": \"MyApp.UndoTask1, MyApp\" } ] }, { \"Id\": \"do2\", \"StepType\": \"MyApp.Task2, MyApp\", \"CompensateWith\": [ { \"Id\": \"undo2-1\", \"NextStepId\": \"undo2-2\", \"StepType\": \"MyApp.UndoTask2, MyApp\" }, { \"Id\": \"undo2-2\", \"StepType\": \"MyApp.DoSomethingElse, MyApp\" } ] } ] ] }, { \"Id\": \"Bye\", \"StepType\": \"MyApp.GoodbyeWorld, MyApp\" } ] } Id: Saga-Sample Version: 1 DataType: MyApp.MyDataClass, MyApp Steps: - Id: Hello StepType: MyApp.HelloWorld, MyApp NextStepId: MySaga - Id: MySaga StepType: WorkflowCore.Primitives.Sequence, WorkflowCore NextStepId: Bye Saga: true Do: - - Id: do1 StepType: MyApp.Task1, MyApp NextStepId: do2 CompensateWith: - Id: undo1 StepType: MyApp.UndoTask1, MyApp - Id: do2 StepType: MyApp.Task2, MyApp CompensateWith: - Id: undo2-1 NextStepId: undo2-2 StepType: MyApp.UndoTask2, MyApp - Id: undo2-2 StepType: MyApp.DoSomethingElse, MyApp - Id: Bye StepType: MyApp.GoodbyeWorld, MyApp","title":"Expressing a saga in JSON or YAML"},{"location":"GT4T_%E6%9C%AA%E7%BF%BB%E8%AF%91/samples/","text":"Samples Hello World Passing Data Events Activity Workers Dependency Injection Parallel ForEach While loop If Parallel Tasks Saga Transactions Scheduled Background Tasks Recurring Background Tasks Multiple outcomes Deferred execution & re-entrant steps Looping Exposing a REST API Human(User) Workflow Workflow Middleware","title":"Samples"},{"location":"GT4T_%E6%9C%AA%E7%BF%BB%E8%AF%91/samples/#samples","text":"Hello World Passing Data Events Activity Workers Dependency Injection Parallel ForEach While loop If Parallel Tasks Saga Transactions Scheduled Background Tasks Recurring Background Tasks Multiple outcomes Deferred execution & re-entrant steps Looping Exposing a REST API Human(User) Workflow Workflow Middleware","title":"Samples"},{"location":"GT4T_%E6%9C%AA%E7%BF%BB%E8%AF%91/test-helpers/","text":"Test helpers for Workflow Core Provides support writing tests for workflows built on WorkflowCore Installing Install the NuGet package \"WorkflowCore.Testing\" PM> Install-Package WorkflowCore.Testing Usage With xUnit Create a class that inherits from WorkflowTest Call the Setup() method in the constructor Implement your tests using the helper methods StartWorkflow() WaitForWorkflowToComplete() WaitForEventSubscription() GetStatus() GetData() UnhandledStepErrors public class xUnitTest : WorkflowTest<MyWorkflow, MyDataClass> { public xUnitTest() { Setup(); } [Fact] public void MyWorkflow() { var workflowId = StartWorkflow(new MyDataClass() { Value1 = 2, Value2 = 3 }); WaitForWorkflowToComplete(workflowId, TimeSpan.FromSeconds(30)); GetStatus(workflowId).Should().Be(WorkflowStatus.Complete); UnhandledStepErrors.Count.Should().Be(0); GetData(workflowId).Value3.Should().Be(5); } } With NUnit Create a class that inherits from WorkflowTest and decorate it with the TestFixture attribute Override the Setup method and decorate it with the SetUp attribute Implement your tests using the helper methods StartWorkflow() WaitForWorkflowToComplete() WaitForEventSubscription() GetStatus() GetData() UnhandledStepErrors [TestFixture] public class NUnitTest : WorkflowTest<MyWorkflow, MyDataClass> { [SetUp] protected override void Setup() { base.Setup(); } [Test] public void NUnit_workflow_test_sample() { var workflowId = StartWorkflow(new MyDataClass() { Value1 = 2, Value2 = 3 }); WaitForWorkflowToComplete(workflowId, TimeSpan.FromSeconds(30)); GetStatus(workflowId).Should().Be(WorkflowStatus.Complete); UnhandledStepErrors.Count.Should().Be(0); GetData(workflowId).Value3.Should().Be(5); } }","title":"Test helpers for Workflow Core"},{"location":"GT4T_%E6%9C%AA%E7%BF%BB%E8%AF%91/test-helpers/#test-helpers-for-workflow-core","text":"Provides support writing tests for workflows built on WorkflowCore","title":"Test helpers for Workflow Core"},{"location":"GT4T_%E6%9C%AA%E7%BF%BB%E8%AF%91/test-helpers/#installing","text":"Install the NuGet package \"WorkflowCore.Testing\" PM> Install-Package WorkflowCore.Testing","title":"Installing"},{"location":"GT4T_%E6%9C%AA%E7%BF%BB%E8%AF%91/test-helpers/#usage","text":"","title":"Usage"},{"location":"GT4T_%E6%9C%AA%E7%BF%BB%E8%AF%91/test-helpers/#with-xunit","text":"Create a class that inherits from WorkflowTest Call the Setup() method in the constructor Implement your tests using the helper methods StartWorkflow() WaitForWorkflowToComplete() WaitForEventSubscription() GetStatus() GetData() UnhandledStepErrors public class xUnitTest : WorkflowTest<MyWorkflow, MyDataClass> { public xUnitTest() { Setup(); } [Fact] public void MyWorkflow() { var workflowId = StartWorkflow(new MyDataClass() { Value1 = 2, Value2 = 3 }); WaitForWorkflowToComplete(workflowId, TimeSpan.FromSeconds(30)); GetStatus(workflowId).Should().Be(WorkflowStatus.Complete); UnhandledStepErrors.Count.Should().Be(0); GetData(workflowId).Value3.Should().Be(5); } }","title":"With xUnit"},{"location":"GT4T_%E6%9C%AA%E7%BF%BB%E8%AF%91/test-helpers/#with-nunit","text":"Create a class that inherits from WorkflowTest and decorate it with the TestFixture attribute Override the Setup method and decorate it with the SetUp attribute Implement your tests using the helper methods StartWorkflow() WaitForWorkflowToComplete() WaitForEventSubscription() GetStatus() GetData() UnhandledStepErrors [TestFixture] public class NUnitTest : WorkflowTest<MyWorkflow, MyDataClass> { [SetUp] protected override void Setup() { base.Setup(); } [Test] public void NUnit_workflow_test_sample() { var workflowId = StartWorkflow(new MyDataClass() { Value1 = 2, Value2 = 3 }); WaitForWorkflowToComplete(workflowId, TimeSpan.FromSeconds(30)); GetStatus(workflowId).Should().Be(WorkflowStatus.Complete); UnhandledStepErrors.Count.Should().Be(0); GetData(workflowId).Value3.Should().Be(5); } }","title":"With NUnit"},{"location":"GT4T_%E6%9C%AA%E7%BF%BB%E8%AF%91/using-with-aspnet-core/","text":"Using with ASP.NET Core How to configure within an ASP.NET Core application In your startup class, use the AddWorkflow extension method to configure workflow core services, and then register your workflows and start the host when you configure the app. public class Startup { public Startup(IConfiguration configuration) { Configuration = configuration; } public IConfiguration Configuration { get; } public void ConfigureServices(IServiceCollection services) { services.AddMvc(); services.AddWorkflow(cfg => { cfg.UseMongoDB(@\"mongodb://mongo:27017\", \"workflow\"); cfg.UseElasticsearch(new ConnectionSettings(new Uri(\"http://elastic:9200\")), \"workflows\"); }); } public void Configure(IApplicationBuilder app, IHostingEnvironment env) { if (env.IsDevelopment()) { app.UseDeveloperExceptionPage(); } app.UseMvc(); var host = app.ApplicationServices.GetService<IWorkflowHost>(); host.RegisterWorkflow<TestWorkflow, MyDataClass>(); host.Start(); } } Usage Now simply inject the services you require into your controllers * IWorkflowController * IWorkflowHost * ISearchIndex * IPersistenceProvider","title":"Using with ASP.NET Core"},{"location":"GT4T_%E6%9C%AA%E7%BF%BB%E8%AF%91/using-with-aspnet-core/#using-with-aspnet-core","text":"","title":"Using with ASP.NET Core"},{"location":"GT4T_%E6%9C%AA%E7%BF%BB%E8%AF%91/using-with-aspnet-core/#how-to-configure-within-an-aspnet-core-application","text":"In your startup class, use the AddWorkflow extension method to configure workflow core services, and then register your workflows and start the host when you configure the app. public class Startup { public Startup(IConfiguration configuration) { Configuration = configuration; } public IConfiguration Configuration { get; } public void ConfigureServices(IServiceCollection services) { services.AddMvc(); services.AddWorkflow(cfg => { cfg.UseMongoDB(@\"mongodb://mongo:27017\", \"workflow\"); cfg.UseElasticsearch(new ConnectionSettings(new Uri(\"http://elastic:9200\")), \"workflows\"); }); } public void Configure(IApplicationBuilder app, IHostingEnvironment env) { if (env.IsDevelopment()) { app.UseDeveloperExceptionPage(); } app.UseMvc(); var host = app.ApplicationServices.GetService<IWorkflowHost>(); host.RegisterWorkflow<TestWorkflow, MyDataClass>(); host.Start(); } }","title":"How to configure within an ASP.NET Core application"},{"location":"GT4T_%E6%9C%AA%E7%BF%BB%E8%AF%91/using-with-aspnet-core/#usage","text":"Now simply inject the services you require into your controllers * IWorkflowController * IWorkflowHost * ISearchIndex * IPersistenceProvider","title":"Usage"},{"location":"GT4T_%E6%9C%AA%E7%BF%BB%E8%AF%91/workflow-middleware/","text":"Workflow Middleware Workflows can be extended with Middleware that run before/after workflows start/complete as well as around workflow steps to provide flexibility in implementing cross-cutting concerns such as log correlation , retries , and other use-cases. This is done by implementing and registering IWorkflowMiddleware for workflows or IWorkflowStepMiddleware for steps. Step Middleware Step middleware lets you run additional code around the execution of a given step and alter its behavior. Implementing a step middleware should look familiar to anyone familiar with ASP.NET Core's middleware pipeline or HttpClient 's DelegatingHandler middleware . Usage First, create your own middleware class that implements IWorkflowStepMiddleware . Here's an example of a middleware that adds workflow ID and step ID to the log correlation context of every workflow step in your app. Important: You must make sure to call next() as part of your middleware. If you do not do this, your step will never run. public class LogCorrelationStepMiddleware : IWorkflowStepMiddleware { private readonly ILogger<LogCorrelationStepMiddleware> _log; public LogCorrelationStepMiddleware( ILogger<LogCorrelationStepMiddleware> log) { _log = log; } public async Task<ExecutionResult> HandleAsync( IStepExecutionContext context, IStepBody body, WorkflowStepDelegate next) { var workflowId = context.Workflow.Id; var stepId = context.Step.Id; // Uses log scope to add a few attributes to the scope using (_log.BeginScope(\"{@WorkflowId}\", workflowId)) using (_log.BeginScope(\"{@StepId}\", stepId)) { // Calling next ensures step gets executed return await next(); } } } Here's another example of a middleware that uses the Polly dotnet resiliency library to implement retries on workflow steps based off a custom retry policy. public class PollyRetryStepMiddleware : IWorkflowStepMiddleware { private const string StepContextKey = \"WorkflowStepContext\"; private const int MaxRetries = 3; private readonly ILogger<PollyRetryStepMiddleware> _log; public PollyRetryMiddleware(ILogger<PollyRetryStepMiddleware> log) { _log = log; } // Consult Polly's docs for more information on how to build // retry policies: // https://github.com/App-vNext/Polly public IAsyncPolicy<ExecutionResult> GetRetryPolicy() => Policy<ExecutionResult> .Handle<TimeoutException>() .RetryAsync( MaxRetries, (result, retryCount, context) => UpdateRetryCount( result.Exception, retryCount, context[StepContextKey] as IStepExecutionContext) ); public async Task<ExecutionResult> HandleAsync( IStepExecutionContext context, IStepBody body, WorkflowStepDelegate next ) { return await GetRetryPolicy().ExecuteAsync( ctx => next(), // The step execution context gets passed down so that // the step is accessible within the retry policy new Dictionary<string, object> { { StepContextKey, context } }); } private Task UpdateRetryCount( Exception exception, int retryCount, IStepExecutionContext stepContext) { var stepInstance = stepContext.ExecutionPointer; stepInstance.RetryCount = retryCount; return Task.CompletedTask; } } Pre/Post Workflow Middleware Workflow middleware run either before a workflow starts or after a workflow completes and can be used to hook into the workflow lifecycle or alter the workflow itself before it is started. Pre Workflow Middleware These middleware get run before the workflow is started and can potentially alter properties on the WorkflowInstance . The following example illustrates setting the Description property on the WorkflowInstance using a middleware that interprets the data on the passed workflow. This is useful in cases where you want the description of the workflow to be derived from the data passed to the workflow. Note that you use WorkflowMiddlewarePhase.PreWorkflow to specify that it runs before the workflow starts. Important: You should call next as part of the workflow middleware to ensure that the next workflow in the chain runs. // AddDescriptionWorkflowMiddleware.cs public class AddDescriptionWorkflowMiddleware : IWorkflowMiddleware { public WorkflowMiddlewarePhase Phase => WorkflowMiddlewarePhase.PreWorkflow; public Task HandleAsync( WorkflowInstance workflow, WorkflowDelegate next ) { if (workflow.Data is IDescriptiveWorkflowParams descriptiveParams) { workflow.Description = descriptiveParams.Description; } return next(); } } // IDescriptiveWorkflowParams.cs public interface IDescriptiveWorkflowParams { string Description { get; } } // MyWorkflowParams.cs public MyWorkflowParams : IDescriptiveWorkflowParams { public string Description => $\"Run task '{TaskName}'\"; public string TaskName { get; set; } } Exception Handling in Pre Workflow Middleware Pre workflow middleware exception handling gets treated differently from post workflow middleware. Since the middleware runs before the workflow starts, any exceptions thrown within a pre workflow middleware will bubble up to the StartWorkflow method and it is up to the caller of StartWorkflow to handle the exception and act accordingly. public async Task MyMethodThatStartsAWorkflow() { try { await host.StartWorkflow(\"HelloWorld\", 1, null); } catch(Exception ex) { // Handle the exception appropriately } } Post Workflow Middleware These middleware get run after the workflow has completed and can be used to perform additional actions for all workflows in your app. The following example illustrates how you can use a post workflow middleware to print a summary of the workflow to console. Note that you use WorkflowMiddlewarePhase.PostWorkflow to specify that it runs after the workflow completes. Important: You should call next as part of the workflow middleware to ensure that the next workflow in the chain runs. public class PrintWorkflowSummaryMiddleware : IWorkflowMiddleware { private readonly ILogger<PrintWorkflowSummaryMiddleware> _log; public PrintWorkflowSummaryMiddleware( ILogger<PrintWorkflowSummaryMiddleware> log ) { _log = log; } public WorkflowMiddlewarePhase Phase => WorkflowMiddlewarePhase.PostWorkflow; public Task HandleAsync( WorkflowInstance workflow, WorkflowDelegate next ) { if (!workflow.CompleteTime.HasValue) { return next(); } var duration = workflow.CompleteTime.Value - workflow.CreateTime; _log.LogInformation($@\"Workflow {workflow.Description} completed in {duration:g}\"); foreach (var step in workflow.ExecutionPointers) { var stepName = step.StepName; var stepDuration = (step.EndTime - step.StartTime) ?? TimeSpan.Zero; _log.LogInformation($\" - Step {stepName} completed in {stepDuration:g}\"); } return next(); } } Exception Handling in Post Workflow Middleware Post workflow middleware exception handling gets treated differently from pre workflow middleware. At the time that the workflow completes, your workflow has ran already so an uncaught exception would be difficult to act on. By default, if a workflow middleware throws an exception, it will be logged and the workflow will complete as normal. This behavior can be changed, however. To override the default post workflow error handling for all workflows in your app, just register a new IWorkflowMiddlewareErrorHandler in the dependency injection framework with your custom behavior as follows. // CustomMiddlewareErrorHandler.cs public class CustomHandler : IWorkflowMiddlewareErrorHandler { public Task HandleAsync(Exception ex) { // Handle your error asynchronously } } // Startup.cs public void ConfigureServices(IServiceCollection services) { // Other workflow configuration services.AddWorkflow(); // Should go after .AddWorkflow() services.AddTransient<IWorkflowMiddlewareErrorHandler, CustomHandler>(); } Registering Middleware In order for middleware to take effect, they must be registered with the built-in dependency injection framework using the convenience helpers. Note: Middleware will be run in the order that they are registered with middleware that are registered earlier running earlier in the chain and finishing later in the chain. For pre/post workflow middleware, all pre middleware will be run before a workflow starts and all post middleware will be run after a workflow completes. public class Startup { public void ConfigureServices(IServiceCollection services) { ... // Add workflow middleware services.AddWorkflowMiddleware<AddDescriptionWorkflowMiddleware>(); services.AddWorkflowMiddleware<PrintWorkflowSummaryMiddleware>(); // Add step middleware services.AddWorkflowStepMiddleware<LogCorrelationStepMiddleware>(); services.AddWorkflowStepMiddleware<PollyRetryMiddleware>(); ... } } More Information See the Workflow Middleware sample for full examples of workflow middleware in action.","title":"Workflow Middleware"},{"location":"GT4T_%E6%9C%AA%E7%BF%BB%E8%AF%91/workflow-middleware/#workflow-middleware","text":"Workflows can be extended with Middleware that run before/after workflows start/complete as well as around workflow steps to provide flexibility in implementing cross-cutting concerns such as log correlation , retries , and other use-cases. This is done by implementing and registering IWorkflowMiddleware for workflows or IWorkflowStepMiddleware for steps.","title":"Workflow Middleware"},{"location":"GT4T_%E6%9C%AA%E7%BF%BB%E8%AF%91/workflow-middleware/#step-middleware","text":"Step middleware lets you run additional code around the execution of a given step and alter its behavior. Implementing a step middleware should look familiar to anyone familiar with ASP.NET Core's middleware pipeline or HttpClient 's DelegatingHandler middleware .","title":"Step Middleware"},{"location":"GT4T_%E6%9C%AA%E7%BF%BB%E8%AF%91/workflow-middleware/#usage","text":"First, create your own middleware class that implements IWorkflowStepMiddleware . Here's an example of a middleware that adds workflow ID and step ID to the log correlation context of every workflow step in your app. Important: You must make sure to call next() as part of your middleware. If you do not do this, your step will never run. public class LogCorrelationStepMiddleware : IWorkflowStepMiddleware { private readonly ILogger<LogCorrelationStepMiddleware> _log; public LogCorrelationStepMiddleware( ILogger<LogCorrelationStepMiddleware> log) { _log = log; } public async Task<ExecutionResult> HandleAsync( IStepExecutionContext context, IStepBody body, WorkflowStepDelegate next) { var workflowId = context.Workflow.Id; var stepId = context.Step.Id; // Uses log scope to add a few attributes to the scope using (_log.BeginScope(\"{@WorkflowId}\", workflowId)) using (_log.BeginScope(\"{@StepId}\", stepId)) { // Calling next ensures step gets executed return await next(); } } } Here's another example of a middleware that uses the Polly dotnet resiliency library to implement retries on workflow steps based off a custom retry policy. public class PollyRetryStepMiddleware : IWorkflowStepMiddleware { private const string StepContextKey = \"WorkflowStepContext\"; private const int MaxRetries = 3; private readonly ILogger<PollyRetryStepMiddleware> _log; public PollyRetryMiddleware(ILogger<PollyRetryStepMiddleware> log) { _log = log; } // Consult Polly's docs for more information on how to build // retry policies: // https://github.com/App-vNext/Polly public IAsyncPolicy<ExecutionResult> GetRetryPolicy() => Policy<ExecutionResult> .Handle<TimeoutException>() .RetryAsync( MaxRetries, (result, retryCount, context) => UpdateRetryCount( result.Exception, retryCount, context[StepContextKey] as IStepExecutionContext) ); public async Task<ExecutionResult> HandleAsync( IStepExecutionContext context, IStepBody body, WorkflowStepDelegate next ) { return await GetRetryPolicy().ExecuteAsync( ctx => next(), // The step execution context gets passed down so that // the step is accessible within the retry policy new Dictionary<string, object> { { StepContextKey, context } }); } private Task UpdateRetryCount( Exception exception, int retryCount, IStepExecutionContext stepContext) { var stepInstance = stepContext.ExecutionPointer; stepInstance.RetryCount = retryCount; return Task.CompletedTask; } }","title":"Usage"},{"location":"GT4T_%E6%9C%AA%E7%BF%BB%E8%AF%91/workflow-middleware/#prepost-workflow-middleware","text":"Workflow middleware run either before a workflow starts or after a workflow completes and can be used to hook into the workflow lifecycle or alter the workflow itself before it is started.","title":"Pre/Post Workflow Middleware"},{"location":"GT4T_%E6%9C%AA%E7%BF%BB%E8%AF%91/workflow-middleware/#pre-workflow-middleware","text":"These middleware get run before the workflow is started and can potentially alter properties on the WorkflowInstance . The following example illustrates setting the Description property on the WorkflowInstance using a middleware that interprets the data on the passed workflow. This is useful in cases where you want the description of the workflow to be derived from the data passed to the workflow. Note that you use WorkflowMiddlewarePhase.PreWorkflow to specify that it runs before the workflow starts. Important: You should call next as part of the workflow middleware to ensure that the next workflow in the chain runs. // AddDescriptionWorkflowMiddleware.cs public class AddDescriptionWorkflowMiddleware : IWorkflowMiddleware { public WorkflowMiddlewarePhase Phase => WorkflowMiddlewarePhase.PreWorkflow; public Task HandleAsync( WorkflowInstance workflow, WorkflowDelegate next ) { if (workflow.Data is IDescriptiveWorkflowParams descriptiveParams) { workflow.Description = descriptiveParams.Description; } return next(); } } // IDescriptiveWorkflowParams.cs public interface IDescriptiveWorkflowParams { string Description { get; } } // MyWorkflowParams.cs public MyWorkflowParams : IDescriptiveWorkflowParams { public string Description => $\"Run task '{TaskName}'\"; public string TaskName { get; set; } }","title":"Pre Workflow Middleware"},{"location":"GT4T_%E6%9C%AA%E7%BF%BB%E8%AF%91/workflow-middleware/#exception-handling-in-pre-workflow-middleware","text":"Pre workflow middleware exception handling gets treated differently from post workflow middleware. Since the middleware runs before the workflow starts, any exceptions thrown within a pre workflow middleware will bubble up to the StartWorkflow method and it is up to the caller of StartWorkflow to handle the exception and act accordingly. public async Task MyMethodThatStartsAWorkflow() { try { await host.StartWorkflow(\"HelloWorld\", 1, null); } catch(Exception ex) { // Handle the exception appropriately } }","title":"Exception Handling in Pre Workflow Middleware"},{"location":"GT4T_%E6%9C%AA%E7%BF%BB%E8%AF%91/workflow-middleware/#post-workflow-middleware","text":"These middleware get run after the workflow has completed and can be used to perform additional actions for all workflows in your app. The following example illustrates how you can use a post workflow middleware to print a summary of the workflow to console. Note that you use WorkflowMiddlewarePhase.PostWorkflow to specify that it runs after the workflow completes. Important: You should call next as part of the workflow middleware to ensure that the next workflow in the chain runs. public class PrintWorkflowSummaryMiddleware : IWorkflowMiddleware { private readonly ILogger<PrintWorkflowSummaryMiddleware> _log; public PrintWorkflowSummaryMiddleware( ILogger<PrintWorkflowSummaryMiddleware> log ) { _log = log; } public WorkflowMiddlewarePhase Phase => WorkflowMiddlewarePhase.PostWorkflow; public Task HandleAsync( WorkflowInstance workflow, WorkflowDelegate next ) { if (!workflow.CompleteTime.HasValue) { return next(); } var duration = workflow.CompleteTime.Value - workflow.CreateTime; _log.LogInformation($@\"Workflow {workflow.Description} completed in {duration:g}\"); foreach (var step in workflow.ExecutionPointers) { var stepName = step.StepName; var stepDuration = (step.EndTime - step.StartTime) ?? TimeSpan.Zero; _log.LogInformation($\" - Step {stepName} completed in {stepDuration:g}\"); } return next(); } }","title":"Post Workflow Middleware"},{"location":"GT4T_%E6%9C%AA%E7%BF%BB%E8%AF%91/workflow-middleware/#exception-handling-in-post-workflow-middleware","text":"Post workflow middleware exception handling gets treated differently from pre workflow middleware. At the time that the workflow completes, your workflow has ran already so an uncaught exception would be difficult to act on. By default, if a workflow middleware throws an exception, it will be logged and the workflow will complete as normal. This behavior can be changed, however. To override the default post workflow error handling for all workflows in your app, just register a new IWorkflowMiddlewareErrorHandler in the dependency injection framework with your custom behavior as follows. // CustomMiddlewareErrorHandler.cs public class CustomHandler : IWorkflowMiddlewareErrorHandler { public Task HandleAsync(Exception ex) { // Handle your error asynchronously } } // Startup.cs public void ConfigureServices(IServiceCollection services) { // Other workflow configuration services.AddWorkflow(); // Should go after .AddWorkflow() services.AddTransient<IWorkflowMiddlewareErrorHandler, CustomHandler>(); }","title":"Exception Handling in Post Workflow Middleware"},{"location":"GT4T_%E6%9C%AA%E7%BF%BB%E8%AF%91/workflow-middleware/#registering-middleware","text":"In order for middleware to take effect, they must be registered with the built-in dependency injection framework using the convenience helpers. Note: Middleware will be run in the order that they are registered with middleware that are registered earlier running earlier in the chain and finishing later in the chain. For pre/post workflow middleware, all pre middleware will be run before a workflow starts and all post middleware will be run after a workflow completes. public class Startup { public void ConfigureServices(IServiceCollection services) { ... // Add workflow middleware services.AddWorkflowMiddleware<AddDescriptionWorkflowMiddleware>(); services.AddWorkflowMiddleware<PrintWorkflowSummaryMiddleware>(); // Add step middleware services.AddWorkflowStepMiddleware<LogCorrelationStepMiddleware>(); services.AddWorkflowStepMiddleware<PollyRetryMiddleware>(); ... } }","title":"Registering Middleware"},{"location":"GT4T_%E6%9C%AA%E7%BF%BB%E8%AF%91/workflow-middleware/#more-information","text":"See the Workflow Middleware sample for full examples of workflow middleware in action.","title":"More Information"},{"location":"wip/multiple-outcomes/","text":"\u591a\u91cd\u7ed3\u679c/\u5206\u53c9 \u6839\u636e\u524d\u9762\u6b65\u9aa4\u7684\u7ed3\u679c\uff0c\u5de5\u4f5c\u6d41\u53ef\u4ee5\u91c7\u7528\u4e0d\u540c\u7684\u8def\u5f84\u3002\u4e0b\u9762\u7684\u793a\u4f8b\u663e\u793a\u4e86\u4e00\u4e2a\u8fc7\u7a0b\uff0c\u5176\u4e2d\u9996\u5148\u751f\u6210\u4e00\u4e2a\u968f\u673a\u6570 0 \u6216 1\uff0c\u5b83\u662f\u7b2c\u4e00\u6b65\u7684\u7ed3\u679c\u3002\u7136\u540e\uff0c\u6839\u636e\u7ed3\u679c\u503c\uff0c\u5de5\u4f5c\u6d41\u5c06\u5206\u53c9\u5230\uff08taskA+taskB\uff09\u6216\uff08taskC+taskD\uff09 public class MultipleOutcomeWorkflow : IWorkflow { public void Build(IWorkflowBuilder<object> builder) { builder .StartWith<RandomOutput>(x => x.Name(\"Random Step\")) .When(data => 0).Do(then => then .StartWith<TaskA>() .Then<TaskB>()) .When(data => 1).Do(then => then .StartWith<TaskC>() .Then<TaskD>()) .Then<SayGoodbye>(); } }","title":"Multiple outcomes"},{"location":"wip/multiple-outcomes/#_1","text":"\u6839\u636e\u524d\u9762\u6b65\u9aa4\u7684\u7ed3\u679c\uff0c\u5de5\u4f5c\u6d41\u53ef\u4ee5\u91c7\u7528\u4e0d\u540c\u7684\u8def\u5f84\u3002\u4e0b\u9762\u7684\u793a\u4f8b\u663e\u793a\u4e86\u4e00\u4e2a\u8fc7\u7a0b\uff0c\u5176\u4e2d\u9996\u5148\u751f\u6210\u4e00\u4e2a\u968f\u673a\u6570 0 \u6216 1\uff0c\u5b83\u662f\u7b2c\u4e00\u6b65\u7684\u7ed3\u679c\u3002\u7136\u540e\uff0c\u6839\u636e\u7ed3\u679c\u503c\uff0c\u5de5\u4f5c\u6d41\u5c06\u5206\u53c9\u5230\uff08taskA+taskB\uff09\u6216\uff08taskC+taskD\uff09 public class MultipleOutcomeWorkflow : IWorkflow { public void Build(IWorkflowBuilder<object> builder) { builder .StartWith<RandomOutput>(x => x.Name(\"Random Step\")) .When(data => 0).Do(then => then .StartWith<TaskA>() .Then<TaskB>()) .When(data => 1).Do(then => then .StartWith<TaskC>() .Then<TaskD>()) .Then<SayGoodbye>(); } }","title":"\u591a\u91cd\u7ed3\u679c/\u5206\u53c9"},{"location":"wip/steps-deep/","text":"\u7b2c\u4e00\u6b21\u8c03\u7528\u5de5\u4f5c\u6d41\u4e2d\u7684\u7279\u5b9a\u6b65\u9aa4\u65f6\uff0c\u4e0a\u4e0b\u6587\u5bf9\u8c61\u7684 PersistenceData \u5c5e\u6027\u4e3a \u65e0\u6548 \u3002Run \u65b9\u6cd5\u751f\u6210\u7684 ExecutionResult \u53ef\u4ee5\u901a\u8fc7\u63d0\u4f9b\u7ed3\u679c\u503c\u4f7f\u5de5\u4f5c\u6d41\u7ee7\u7eed\u4e0b\u4e00\u6b65\uff0c\u6307\u793a\u5de5\u4f5c\u6d41\u5728\u5b9a\u4e49\u7684\u65f6\u95f4\u6bb5\u5185\u4f11\u7720\uff0c\u6216\u8005\u7b80\u5355\u5730\u4e0d\u5411\u524d\u79fb\u52a8\u5de5\u4f5c\u6d41\u3002\u5982\u679c\u672a\u751f\u6210\u7ed3\u679c\u503c\uff0c\u5219\u901a\u8fc7\u8bbe\u7f6e PersistenceData\uff0c\u8be5\u6b65\u9aa4\u5c06\u53d8\u4e3a\u53ef\u91cd\u5165\u6b65\u9aa4\uff0c\u56e0\u6b64\u5de5\u4f5c\u6d41\u4e3b\u673a\u5c06\u5728\u5c06\u6765\u518d\u6b21\u8c03\u7528\u6b64\u6b65\u9aa4\u3002Buy \u5c06\u4f7f\u7528\u5176\u4ee5\u524d\u7684\u503c\u586b\u5145 PersistenceData. \u4f8b\u5982\uff0c\u6b64\u6b65\u9aa4\u6700\u521d\u5c06\u4f7f\u7528 \u65e0\u6548 PersistenceData \u8fd0\u884c\uff0c\u5e76\u4f7f\u5de5\u4f5c\u6d41\u4f11\u7720 12 \u5c0f\u65f6\uff0c\u540c\u65f6\u5c06 PersistenceData \u8bbe\u7f6e\u4e3a \u65b0\u5efa\u5bf9\u8c61\uff08\uff09 \u300212 \u5c0f\u65f6\u540e\uff0c\u5c06\u518d\u6b21\u8c03\u7528\u8be5\u6b65\u9aa4\uff0c\u4f46 Context.PersistenceData \u73b0\u5728\u5c06\u5305\u542b\u5728\u4e0a\u4e00\u6b21\u8fed\u4ee3\u4e2d\u6784\u9020\u7684\u5bf9\u8c61\uff0c\u5e76\u4e14\u73b0\u5728\u5c06\u751f\u6210\u7ed3\u679c\u503c\uff0c \u65e0\u6548 \u4ece\u800c\u4f7f\u5de5\u4f5c\u6d41\u5411\u524d\u79fb\u52a8\u3002 public class SleepStep : StepBody { public override ExecutionResult Run(IStepExecutionContext context) { if (context.PersistenceData == null) return ExecutionResult.Sleep(Timespan.FromHours(12), new Object()); else return ExecutionResult.Next(); } }","title":"Steps deep"},{"location":"wip/GT4T_%E6%9C%AA%E7%BF%BB%E8%AF%91/multiple-outcomes/","text":"Multiple outcomes / forking A workflow can take a different path depending on the outcomes of preceeding steps. The following example shows a process where first a random number of 0 or 1 is generated and is the outcome of the first step. Then, depending on the outcome value, the workflow will either fork to (TaskA + TaskB) or (TaskC + TaskD) public class MultipleOutcomeWorkflow : IWorkflow { public void Build(IWorkflowBuilder<object> builder) { builder .StartWith<RandomOutput>(x => x.Name(\"Random Step\")) .When(data => 0).Do(then => then .StartWith<TaskA>() .Then<TaskB>()) .When(data => 1).Do(then => then .StartWith<TaskC>() .Then<TaskD>()) .Then<SayGoodbye>(); } }","title":"Multiple outcomes"},{"location":"wip/GT4T_%E6%9C%AA%E7%BF%BB%E8%AF%91/multiple-outcomes/#multiple-outcomes-forking","text":"A workflow can take a different path depending on the outcomes of preceeding steps. The following example shows a process where first a random number of 0 or 1 is generated and is the outcome of the first step. Then, depending on the outcome value, the workflow will either fork to (TaskA + TaskB) or (TaskC + TaskD) public class MultipleOutcomeWorkflow : IWorkflow { public void Build(IWorkflowBuilder<object> builder) { builder .StartWith<RandomOutput>(x => x.Name(\"Random Step\")) .When(data => 0).Do(then => then .StartWith<TaskA>() .Then<TaskB>()) .When(data => 1).Do(then => then .StartWith<TaskC>() .Then<TaskD>()) .Then<SayGoodbye>(); } }","title":"Multiple outcomes / forking"},{"location":"wip/GT4T_%E6%9C%AA%E7%BF%BB%E8%AF%91/steps-deep/","text":"The first time a particular step within the workflow is called, the PersistenceData property on the context object is null . The ExecutionResult produced by the Run method can either cause the workflow to proceed to the next step by providing an outcome value, instruct the workflow to sleep for a defined period or simply not move the workflow forward. If no outcome value is produced, then the step becomes re-entrant by setting PersistenceData, so the workflow host will call this step again in the future buy will populate the PersistenceData with it's previous value. For example, this step will initially run with null PersistenceData and put the workflow to sleep for 12 hours, while setting the PersistenceData to new Object() . 12 hours later, the step will be called again but context.PersistenceData will now contain the object constructed in the previous iteration, and will now produce an outcome value of null , causing the workflow to move forward. public class SleepStep : StepBody { public override ExecutionResult Run(IStepExecutionContext context) { if (context.PersistenceData == null) return ExecutionResult.Sleep(Timespan.FromHours(12), new Object()); else return ExecutionResult.Next(); } }","title":"Steps deep"}]}